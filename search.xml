<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Babel] Babel 使用筆記</title>
    <url>/posts/22d5a4ab/</url>
    <content><![CDATA[<p><a href="https://github.com/babel/babel"><img src="https://raw.githubusercontent.com/babel/logo/master/babel.png" alt="Babel"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><a href="https://babeljs.io/" title="Babel">Babel</a> 是一個JavaScript compiler，可以將新的 JS 語法轉譯為瀏覽器支援的 ES5，因為 JavaScript 幾乎是每年會提出一個新的規格草案，但是瀏覽器沒辦法很快就能夠支援新的 JS，所以我們需要先轉譯成瀏覽器支援的 ES5。</p>
<span id="more"></span>

<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># babel-loader 是給webpack設定loader使用。</span></span><br><span class="line"><span class="comment"># babel-core 主要是babel編譯的部分。</span></span><br><span class="line"><span class="comment"># babel-preset-es2015 是設定可以編譯ES6語法，轉譯成ES5普遍瀏覽器可以讀懂的Javascript版本。</span></span><br><span class="line"><span class="comment"># babel-preset-react 編譯react語法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># loader</span></span><br><span class="line">$ npm install --save-dev babel-loader</span><br><span class="line"></span><br><span class="line"><span class="comment"># core</span></span><br><span class="line">$ npm install --save-dev babel-core</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES2017轉碼規則</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2017</span><br><span class="line"></span><br><span class="line"><span class="comment"># command line執行babel</span></span><br><span class="line"><span class="comment">#$ npm install --save-dev babel-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># react轉碼規則</span></span><br><span class="line"><span class="comment">#$ npm install --save-dev babel-preset-react</span></span><br></pre></td></tr></table></figure>

<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>設定的方式有幾種：設定 <code>.babelrc</code>、透過 <code>package.json</code> 設定，或是搭配 <code>Webpack</code> 來設定。</p>
<ul>
<li>設定 <code>.babelrc</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;es2017&quot;</span>, <span class="string">&quot;react&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>透過 <code>package.json</code> 設定</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;babel code -d build&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>搭配 <code>Webpack</code> 來使用，參考: <a href="/posts/f0b15985/">[Webpack] Webpack 設定及使用</a></li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://babeljs.io/" title="Babel">Babel</a></li>
</ul>
]]></content>
      <categories>
        <category>Babel</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>[Cookie] Cross site cookie</title>
    <url>/posts/cbecdf44/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇文章主要是記錄一下使用跨域 cookie 需要設定及注意的地方，以下範例程式後端是使用 Python&#x2F;Flask, 前端則是用 Axios 來送出 request 到後端。</p>
<span id="more"></span>

<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>首先，先來介紹一下 Cookie 幾個比較重要的屬性：</p>
<ul>
<li>HttpOnly: 只能被用在 HTTP 傳輸，不可被 JavaScript 存取</li>
<li>Domain: 可使用的 domain, 如果沒有設定，則只能被設定此 cookie 的 domain 所使用，如果希望設定子網域都可使用此 cookie, 則可以設為 <code>.domain.com</code></li>
<li>Path: 指定可存取 cookie 的路徑</li>
<li>Max-Age: cookie 的期限，單位為秒，或者可以用 <code>Expires</code> 來設定，格式是 Unix time</li>
<li>SameSite: 用來防止瀏覽器將 cookie 跨網站傳送，可以幫助避免 CSRF 攻擊，以下是 <code>SameSite</code> 的三種設定值:<ul>
<li>Strict: 最嚴謹，request 的網域與目前網址相同才會發送 cookie</li>
<li>Lax: 除了 same site request 能夠使用 cookie之外，部分的 cross-site request 也能夠使用 cookie, 包含 HTML 中的 <code>&lt;a&gt;</code> , <code>&lt;link rel=&quot;prerender&quot;&gt;</code>, <code>&lt;form method=&quot;GET&quot;&gt;</code></li>
<li>None: Cross site 的 request 都能夠使用 cookie, <strong>注意在 Chrome 80 之後，若使用這個選項，則必須要設定 Secure</strong></li>
</ul>
</li>
<li>Secure: 若設為 True, 表示只能透過 HTTPS 傳輸</li>
</ul>
<p><strong>注意</strong>: 在 Chrome 80 之後，如果沒有設定 SameSite, 則預設為 Lax, 如果 SameSite 設為 None, 則必須要有 Secure.</p>
<h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><p>後端需要設定 CORS (Cross Origin Resource Sharing), 因為會使用到 Cross site cookie, 所以也記得要設定 <code>Access-Control-Allow-Credentials = true</code> , for example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">whitelist = [<span class="string">&#x27;http://localhost:8080&#x27;</span>, <span class="string">&#x27;https://domain1.com&#x27;</span>, <span class="string">&#x27;https://domain2.com&#x27;</span>]</span><br><span class="line">resource = &#123;</span><br><span class="line">  <span class="string">r&#x27;/.*&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;origins&#x27;</span>: whitelist</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">CORS(app, resources=resource, supports_credentials=<span class="literal">True</span>, methods=<span class="string">&#x27;GET,POST,OPTIONS&#x27;</span>, allow_headers=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">  <span class="comment"># User authentication</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set cookie</span></span><br><span class="line">  response = jsonify(status=<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  response.set_cookie(</span><br><span class="line">    <span class="string">&#x27;access_token&#x27;</span>, <span class="string">&#x27;your_access_token&#x27;</span>, </span><br><span class="line">    domain=<span class="string">&#x27;.your_domain.com&#x27;</span>, </span><br><span class="line">    path=<span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    max_age=<span class="number">600</span>,</span><br><span class="line">    secure=<span class="literal">True</span>, </span><br><span class="line">    httponly=<span class="literal">True</span>,</span><br><span class="line">    samesite=<span class="literal">None</span></span><br><span class="line">  )</span><br><span class="line">  response.set_cookie(</span><br><span class="line">    <span class="string">&#x27;refresh_token&#x27;</span>, <span class="string">&#x27;your_refresh_token&#x27;</span>, </span><br><span class="line">    domain=<span class="string">&#x27;.your_domain.com&#x27;</span>, </span><br><span class="line">    path=<span class="string">&#x27;/refresh&#x27;</span>, </span><br><span class="line">    max_age=<span class="number">86400</span>,</span><br><span class="line">    secure=<span class="literal">True</span>, </span><br><span class="line">    httponly=<span class="literal">True</span>,</span><br><span class="line">    samesite=<span class="literal">None</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  app.run()</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: 設定 <code>supports_credentials</code> 的話， <code>origins</code> 就不能用 <code>*</code></p>
<h2 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h2><p>前端的部分，我們是使用 Axios 來送出 request 到後端，這邊記得要設定 <code>withCredentials: true</code>, for example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, data, &#123;</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果順利的話，會在在網頁的 Cookie 中看到新增了兩個 Cookie (access_token, refresh_token).</p>
<p>但是，在 localhost 測試時會發現無法設定 cookie, 這是因為要跨域使用 cookie, SameSite 就必須設為 None, 而 SameSite 設為 None 就必須要設定 Secure, 但我們目前的 localhost 是沒有設定 SSL 的，所以會無法設定 cookie. 解決方式是把 localhost 加上 SSL.</p>
<p>Localhost 加上 SSL 可參考以下文章:</p>
<ul>
<li>Windows: <a href="https://pvencs.blogspot.com/2019/01/windows-localhost-https.html">讓 Windows 環境的 localhost 啟用 HTTPS 連線</a></li>
<li>MacOS: <a href="https://manglekuo.medium.com/%E8%A8%AD%E5%AE%9Amacos%E6%9C%AC%E5%9C%B0%E7%AB%AFhttps-ssl%E8%AD%89%E6%9B%B8-b2f79bcdedf0">設定macOS本地端HTTPs&#x2F;SSL證書</a> (MacOS 的部分沒測試過，可能需要大家自行測試)</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://jcbaey.com/authentication-in-spa-reactjs-and-vuejs-the-right-way?utm_source=medium&utm_campaign=spa-authentication">Authentication in SPA (ReactJS and VueJS) the right way - Part 1</a></li>
<li><a href="https://ianhung0529.medium.com/chrome-80-%E5%BE%8C%E9%87%9D%E5%B0%8D%E7%AC%AC%E4%B8%89%E6%96%B9-cookie-%E7%9A%84%E8%A6%8F%E5%89%87%E8%AA%BF%E6%95%B4-default-samesite-lax-aaba0bc785a3">Chrome 80 後針對第三方 Cookie 的規則調整 (default SameSite&#x3D;Lax)</a></li>
</ul>
]]></content>
      <categories>
        <category>Cookie</category>
      </categories>
      <tags>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>[DevOps] 使用 supervisor 管理 process</title>
    <url>/posts/53302290/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Supervisor 是一個使用 Python 開發的 process 管理工具，主要用在 process 後台維護、即時監控 process 狀態、自動重啟服務…等。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>使用 pip 來安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install supervisor</span><br></pre></td></tr></table></figure>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>安裝完成後，可以使用 <code>echo_supervisord_conf</code> 來取得預設的 config file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ echo_supervisord_conf &gt; supervisord.conf</span><br></pre></td></tr></table></figure>

<p>以下是預設的 config file 中的主要設定內容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ; the path to the socket file</span><br><span class="line">;chmod=0700                 ; socket file mode (default 0700)</span><br><span class="line">;chown=nobody:nogroup       ; socket file uid:gid owner</span><br><span class="line">;username=user              ; default is no username (open server)</span><br><span class="line">;password=123               ; default is no password (open server)</span><br><span class="line"></span><br><span class="line">[inet_http_server]          ; Web 管理介面</span><br><span class="line">port=127.0.0.1:9001         ; Web 管理介面的 IP 和 port, 如果設為 public 須注意安全性問題</span><br><span class="line">username=user               ; 登入管理介面的 user</span><br><span class="line">password=123                ; 登入管理介面的密碼</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ; 日誌文件，默認是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ; 日誌文件大小，超出會rotate，默認50MB</span><br><span class="line">logfile_backups=10           ; 日誌文件保留備份數量, 默認10</span><br><span class="line">loglevel=info                ; 日誌級別，默認info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ; pid 文件</span><br><span class="line">nodaemon= false              ; 是否在前台啟動，默認是false，即以daemon的方式啟動</span><br><span class="line">silent=false                 ; no logs to stdout if true; 預設是 false</span><br><span class="line">minfds=1024                  ; 可以打開的文件描述符的最小值，默認1024</span><br><span class="line">minprocs=200                 ; 可以打開的進程數的最小值，默認200</span><br><span class="line"></span><br><span class="line">; The rpcinterface:supervisor section must remain in the config file for</span><br><span class="line">; RPC (supervisorctl/web interface) to work.  Additional interfaces may be</span><br><span class="line">; added by defining them in separate [rpcinterface:x] sections.</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">; The supervisorctl section configures how supervisorctl will connect to</span><br><span class="line">; supervisord.  configure it match the settings in either the unix_http_server</span><br><span class="line">; or inet_http_server section.</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket, 透過 unix socket 連接 supervisord, 路徑和 unix_http_server 的 file 一致</span><br><span class="line">serverurl=http://127.0.0.1:9001       ; use an http:// url to specify an inet socket, 透過 HTTP 的方式連接 supervisord</span><br><span class="line">username=admin                        ; should be same as in [*_http_server] if set</span><br><span class="line">password=admin2020@dwave              ; should be same as in [*_http_server] if set</span><br><span class="line">;prompt=mysupervisor                  ; cmd line prompt (default &quot;supervisor&quot;)</span><br><span class="line">;history_file=~/.sc_history           ; use readline history if available</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisord/service-enabled/*.conf ; 可以是 *.conf 或 *.ini</span><br></pre></td></tr></table></figure>

<p>如果有很多個服務，可以將各個服務的 config 寫在不同檔案，最後在 supervisord.conf 中 include 即可，以下範例為 program config file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:program_name]                                               ; program_name 須為唯一值, 不可重複</span><br><span class="line">directory=&lt;project_dir&gt;                                              ; directory to cwd to before exec (def no cwd)</span><br><span class="line">environment=PATH=&quot;/home/&lt;user&gt;/anaconda3/envs/api/bin&quot;               ; process environment additions (def no adds)</span><br><span class="line">command=/home/&lt;user&gt;/anaconda3/envs/api/bin/uwsgi --ini &lt;project_dir&gt;/conf/uwsgi.ini   ; the program (relative uses PATH, can take args)</span><br><span class="line">autostart=true                                                       ; start at supervisord start (default: true)</span><br><span class="line">autorestart=true                                                     ; when to restart if exited after running (def: unexpected)</span><br><span class="line">stdout_logfile=/stdout/logfile/path                                  ; stdout log path, NONE for none; default AUTO</span><br><span class="line">stderr_logfile=/stderr/logfile/path                                  ; stderr log path, NONE for none; default AUTO</span><br><span class="line"></span><br><span class="line">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span><br><span class="line">;numprocs=1                    ; number of processes copies to start (def 1)</span><br><span class="line">;umask=022                     ; umask for process (default None)</span><br><span class="line">;priority=999                  ; the relative start priority (default 999)</span><br><span class="line">;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)</span><br><span class="line">;startretries=3                ; max # of serial start failures when starting (default 3)</span><br><span class="line">;exitcodes=0                   ; &#x27;expected&#x27; exit codes used with autorestart (default 0)</span><br><span class="line">;stopsignal=QUIT               ; signal used to kill process (default TERM)</span><br><span class="line">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</span><br><span class="line">;stopasgroup=false             ; send stop signal to the UNIX process group (default false)</span><br><span class="line">;killasgroup=false             ; SIGKILL the UNIX process group (def false)</span><br><span class="line">;user=chrism                   ; setuid to this UNIX account to run the program</span><br><span class="line">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</span><br><span class="line">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)</span><br><span class="line">;stdout_capture_maxbytes=1MB   ; number of bytes in &#x27;capturemode&#x27; (default 0)</span><br><span class="line">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</span><br><span class="line">;stdout_syslog=false           ; send stdout to syslog with process name (default false)</span><br><span class="line">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</span><br><span class="line">;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)</span><br><span class="line">;stderr_capture_maxbytes=1MB   ; number of bytes in &#x27;capturemode&#x27; (default 0)</span><br><span class="line">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span><br><span class="line">;stderr_syslog=false           ; send stderr to syslog with process name (default false)</span><br><span class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="啟動-supervisord"><a href="#啟動-supervisord" class="headerlink" title="啟動 supervisord"></a>啟動 supervisord</h3><p>撰寫好 config file 之後，使用以下指令來啟動 supervisord:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c: config file</span></span><br><span class="line">$ supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure>

<p>啟動之後可以搭配 supervisorctl 監控狀態, 或是可以連線至 <a href="http://127.0.0.1:9001/">http://127.0.0.1:9001</a>, 登入管理者帳號密碼之後，就可以看到目前各個服務的狀態。</p>
<h3 id="supervisorctl-指令"><a href="#supervisorctl-指令" class="headerlink" title="supervisorctl 指令"></a>supervisorctl 指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c: config file</span></span><br><span class="line">$ supervisorctl -c supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 檢查 process 狀態</span></span><br><span class="line">$ supervisorctl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 process</span></span><br><span class="line">$ supervisorctl start &lt;process_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 關閉 process</span></span><br><span class="line">$ supervisorctl stop &lt;process_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart process</span></span><br><span class="line">$ supervisorctl restart &lt;process_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新載入配置檔案</span></span><br><span class="line">$ upervisordctl update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 關閉 supervisord</span></span><br><span class="line">$ supervisorctl shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空 log file</span></span><br><span class="line">$ supervisorctl clear &lt;process_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 進入互動模式, 可使用 help 查看所有指令</span></span><br><span class="line">$ supervisorctl</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://supervisord.org/index.html">Supervisor 官方文件</a></li>
<li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/">使用supervisor 管理進程</a></li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>supervisor</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] Health Check and Restart Unhealthy Container</title>
    <url>/posts/b8226bad/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在沒有 <code>HEALTHCHECK</code> 指令之前，Docker 只能透過 process 是否退出來判斷 container 的狀態，不過有時候是服務已經無法正常運作了，但 process 沒有退出，這樣會導致該服務仍然可以接收用戶請求，但是無法正常回應。</p>
<span id="more"></span>

<h2 id="Health-Check"><a href="#Health-Check" class="headerlink" title="Health Check"></a>Health Check</h2><p>在 Docker 版本 1.12 之後提供了 <code>HEALTHCHECK</code> 指令，可以設定一行 command 用來判斷服務的狀態是否正常，這樣可以更準確地判斷服務狀態。</p>
<p>Container 啟動後的初始狀態為 <code>starting</code>, 在 <code>HEALTHCHECK</code> 指令檢查成功後，狀態會更改為 <code>healthy</code>，如果連續失敗超過指定次數則會改為 <code>unhealthy</code>.</p>
<p><code>HEALTHCHECK</code> options:</p>
<ul>
<li><code>--interval</code>: Health check 時間間隔，預設為 30 秒</li>
<li><code>--timeout</code>: 當 Health check 超過此設定的時間，則會視為失敗，預設為 30 秒</li>
<li><code>--retries</code>: 當 Health check 連續失敗次數超過此設定時，則會將狀態更改為 <code>unhealthy</code>，預設為 3 次</li>
<li><code>--start-period</code>: 啟動時間，預設為 0 秒</li>
</ul>
<p><code>HEALTHCHECK</code> 可以透過 Dockerfile 或是 docker-compose file 做設定:</p>
<h3 id="Dockerfile-example"><a href="#Dockerfile-example" class="headerlink" title="Dockerfile example"></a>Dockerfile example</h3><p>在 Dockerfile 中，<code>HEALTHCHECK</code> 指令格式為 <code>HEALTHCHECK [options] CMD &lt;command&gt;</code>, <code>&lt;command&gt;</code> 可以是 shell 指令或是 exec 格式 (和其他 Dockerfile 指令相同，可以參考 <code>ENTRYPOINT</code>)。而一個 Dockerfile 中只能有一個 <code>HEALTHCHECK</code> 指令，如果同時有多個 <code>HEALTHCHECK</code> 指令，則只有最後一個有效。</p>
<p><code>&lt;command&gt;</code> 的返回值代表 container 的狀態:</p>
<ul>
<li>0: 成功，container is healthy</li>
<li>1: 失敗，如果失敗超過指定次數，則 container 為 unhealthy</li>
<li>2: reserved, 不要使用這個值</li>
</ul>
<p>假設我們的 container 服務是 web 服務，我們可以使用 <code>curl</code> 來檢查服務是否正常運作，例如: 每 30 秒檢查一次 <code>http://localhost:3000</code> 是否可在 5 秒內回應請求:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=30s --<span class="built_in">timeout</span>=5s --retries=5 --start_period=30s \</span></span><br><span class="line"><span class="language-bash">  CMD curl -fs http://localhost:3000/ || <span class="built_in">exit</span> 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<h3 id="Docker-compose-example"><a href="#Docker-compose-example" class="headerlink" title="Docker-compose example"></a>Docker-compose example</h3><p>在 <code>docker-compose.yml</code> 中，<code>healthcheck</code> 範例如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">api</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">api</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./api</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">curl</span> <span class="string">-fs</span> <span class="string">http://localhost:3000/</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">net</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>test</code> 必須是 string 或 list. 如果是 list, 第一個 item 必須是 <code>NONE</code>, <code>CMD</code> 或 <code>CMD-SHELL</code>。如果是 string, 則等同於 <code>CMD-SHELL</code>。</p>
<h3 id="確認健康狀態"><a href="#確認健康狀態" class="headerlink" title="確認健康狀態"></a>確認健康狀態</h3><p>在設定好 health check 指令之後，接著啟動 container，檢查 container 狀態時可以看到初始狀態是 <code>health: starting</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS                       NAMES</span><br><span class="line">3c7b9ca321d2        api:1.0.0           <span class="string">&quot;uwsgi --ini /home/d…&quot;</span>   5 seconds ago       Up 2 seconds (health: starting)   0.0.0.0:3000-&gt;3000/tcp      api</span><br></pre></td></tr></table></figure>

<p>過 30 秒之後再執行一次 <code>docker ps</code> 可以看到 container 的狀態變成 <code>healthy</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS                       NAMES</span><br><span class="line">3c7b9ca321d2        api:1.0.0           <span class="string">&quot;uwsgi --ini /home/d…&quot;</span>   35 seconds ago      Up 32 seconds (healthy)           0.0.0.0:3000-&gt;3000/tcp      api</span><br></pre></td></tr></table></figure>

<p>而如果連續失敗超過指定次數，狀態會變成 <code>unhealthy</code>。</p>
<p>在 <code>HEALTHCHECK</code> command 的任何 output (包含 <code>stdout</code> 和 <code>stderr</code>) 都會被儲存在健康狀態中，可以使用 <code>docker inspect</code> 來查看:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect --format <span class="string">&#x27;&#123;&#123;json .State.Health&#125;&#125;&#x27;</span> api</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Status&quot;</span>:<span class="string">&quot;healthy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;FailingStreak&quot;</span>:0,</span><br><span class="line">  <span class="string">&quot;Log&quot;</span>:[&#123;</span><br><span class="line">    <span class="string">&quot;Start&quot;</span>:<span class="string">&quot;2021-04-25T15:08:05.579571483+08:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;End&quot;</span>:<span class="string">&quot;2021-04-25T15:08:05.871891851+08:00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ExitCode&quot;</span>:0,</span><br><span class="line">    <span class="string">&quot;Output&quot;</span>:<span class="string">&quot;store HEALTHCHECK output here&quot;</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Restart-Unhealthy-Container"><a href="#Restart-Unhealthy-Container" class="headerlink" title="Restart Unhealthy Container"></a>Restart Unhealthy Container</h2><p>以上的步驟只有檢查 container 的健康狀態，但沒有針對 unhealthy container 做任何處理，這部分我們可以搭配 <a href="https://github.com/willfarrell/docker-autoheal" title="docker-autoheal">docker-autoheal</a> 來重啟 unhealthy container.</p>
<p>這部分可以直接使用 docker 執行，或是寫在 docker-compose file 中:</p>
<ul>
<li><p>使用 docker 指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    --name autoheal \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -e AUTOHEAL_CONTAINER_LABEL=all \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    willfarrell/autoheal</span><br></pre></td></tr></table></figure>
</li>
<li><p>透過 docker-compose file 設定:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">autoheal:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">willfarrell/autoheal</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">autoheal</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AUTOHEAL_CONTAINER_LABEL=all</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>

<p>接著執行 <code>docker-compose up --build -d autoheal</code> 即可。</p>
</li>
</ul>
<p>最後就可以確認一下 unhealthy container 是否有自動重啟~</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.docker.com/engine/reference/builder/#healthcheck">Docker HEALTHCHECK</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/healthcheck">Docker —— 从入门到实践</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#healthcheck">Docker-compose healthcheck</a></li>
<li><a href="https://github.com/willfarrell/docker-autoheal" title="docker-autoheal">docker-autoheal</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] Use non-root user in docker container</title>
    <url>/posts/fe688d83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 docker 中，預設是使用 root user, 但這樣非常不安全，所以通常會在 docker 中另外建立 user，可以透過 <code>--build-args</code> 傳入當前使用者的 User ID 和 Group ID，將新增的 user 的 User ID 和 Group ID 設為當前使用者，最後使用 <code>USER new_user</code> 切換為 non-root user 再執行所需指令。</p>
<span id="more"></span>

<h2 id="Dockerfile-example"><a href="#Dockerfile-example" class="headerlink" title="Dockerfile example"></a>Dockerfile example</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> PYTHON_VERSION</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:$&#123;PYTHON_VERSION&#125;-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> USER_ID</span><br><span class="line"><span class="keyword">ARG</span> GID</span><br><span class="line"><span class="keyword">ARG</span> PROJECT_DIR=/home/docker/api</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set environment variable</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Taipei</span><br><span class="line"><span class="keyword">ENV</span> PATH=<span class="string">&quot;/home/docker:/home/docker/.local/bin:$&#123;PATH&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create user</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> groupadd -g <span class="variable">$GID</span> docker-users &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    useradd -m --no-log-init -s /bin/bash -u <span class="variable">$USER_ID</span> -g <span class="variable">$GID</span> docker &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;docker:docker&quot;</span> | chpasswd &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser docker sudo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set timezone and install packages </span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y --no-install-recommends build-essential sudo curl locales tzdata &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get clean &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get autoremove</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set locale</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL=C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LANGUAGE=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$PROJECT_DIR</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy code, install required packages, create log directory and change permission</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r ./requirements.txt &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> -p ./logs &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R <span class="variable">$USER_ID</span>:<span class="variable">$GID</span> .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> docker</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;uwsgi&quot;</span>, <span class="string">&quot;--ini&quot;</span>, <span class="string">&quot;/home/docker/api/config/uwsgi.ini&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="Build-image-and-run-container"><a href="#Build-image-and-run-container" class="headerlink" title="Build image and run container"></a>Build image and run container</h2><h3 id="Use-docker-command"><a href="#Use-docker-command" class="headerlink" title="Use docker command"></a>Use <code>docker</code> command</h3><p>Build image:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t &lt;image_name&gt;:&lt;version&gt; \</span><br><span class="line">    --build-arg USER_ID=$(<span class="built_in">id</span> -u) \</span><br><span class="line">    --build-arg GID=$(<span class="built_in">id</span> -g) \</span><br><span class="line">    --build-arg PYTHON_VERSION=<span class="string">&quot;3.8.7&quot;</span> .</span><br></pre></td></tr></table></figure>

<p>Run container:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    [--name container_name] \</span><br><span class="line">    [-v host_path:container_path] \</span><br><span class="line">    &lt;image_name&gt;:&lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>ps. 須注意 volumes 的資料夾權限  </p>
<h3 id="User-docker-compose"><a href="#User-docker-compose" class="headerlink" title="User docker-compose"></a>User <code>docker-compose</code></h3><p><code>docker-compose.yml</code> example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">api:$&#123;VERSION&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">api</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">&quot;$&#123;USER_ID&#125;:$&#123;GID&#125;&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9999</span><span class="string">:9999</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">/home/user/workspace/api</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">USER_ID:</span> <span class="string">&quot;$&#123;USER_ID&#125;&quot;</span></span><br><span class="line">        <span class="attr">GID:</span> <span class="string">&quot;$&#123;GID&#125;&quot;</span></span><br><span class="line">        <span class="attr">PYTHON_VERSION:</span> <span class="string">&quot;3.8.7&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/user/workspace/api/config:/home/docker/api/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/user/logs/api:/home/docker/api/logs</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">net</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>

<p>Build image and run container:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ USER_ID=$(<span class="built_in">id</span> -u) GID=$(<span class="built_in">id</span> -g) VERSION=<span class="string">&quot;1.0.0&quot;</span> docker-compose up --build -d api</span><br></pre></td></tr></table></figure>

<p>ps. 須注意 volumes 的資料夾權限</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://medium.com/@mccode/processes-in-containers-should-not-run-as-root-2feae3f0df3b">Processes In Containers Should Not Run As Root</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] 安裝及使用 Docker</title>
    <url>/posts/ba763ef1/</url>
    <content><![CDATA[<p><a href="https://www.docker.com/sites/default/files/social/docker_facebook_share.png"><img src="https://www.docker.com/sites/default/files/social/docker_facebook_share.png" alt="Docker"></a></p>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><a href="https://www.docker.com/" title="Docker">Docker</a> 是一種虛擬化技術，透過 container 的方式將應用程式和所需執行環境打包起來，方便佈署到其他伺服器上，避免因為系統環境不同而無法正確執行，也可以節省建立環境的繁瑣步驟。此外，Docker 也可以用來模擬不同環境下，程式是否能正確執行。</p>
<p>和 Virtual Machine 相比，Docker 的利用率更高，容量小、高效能、啟動速度快，一台伺服器上(Host)可以執行多個 container, 而每個 container 是獨立的，互不影響。</p>
<p>接下來紀錄一下如何在 Linux 環境上安裝及使用 Docker，並且使用 Docker 將我們的應用程式及執行環境打包。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>這裡我們使用的系統環境是: Ubuntu 16.04</p>
<h3 id="設定-Repository"><a href="#設定-Repository" class="headerlink" title="設定 Repository"></a>設定 Repository</h3><p>Update:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>安裝所需套件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install apt-transport-https  ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>

<p>新增 Docker GPG key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p>Add repository:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="subst">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Install-Docker-CE"><a href="#Install-Docker-CE" class="headerlink" title="Install Docker CE"></a>Install Docker CE</h3><p>Update:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>Install:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<p>裝好之後，確認一下是否安裝成功:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p>正常運作的話，可以看到以下畫面:</p>
<p><img src="https://i.imgur.com/2PnQTFu.png" alt="Docker version"></p>
<p>如果有出現 <code>Permission denied</code> 的錯誤訊息，將當前使用者加入 <code>docker</code> 群組即可解決:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br></pre></td></tr></table></figure>

<p>設定好之後，記得要重新登入才會生效。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>映像檔，可以透過 Docker 將應用程式和執行環境打包成 image, 方便之後直接安裝到其他伺服器上。</p>
<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Container 是利用 image 建立出來的，一個 Image 可以 create 多個 container, 每個 container 是獨立的，互不影響。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="搜尋及下載-Image"><a href="#搜尋及下載-Image" class="headerlink" title="搜尋及下載 Image"></a>搜尋及下載 Image</h3><p>在 <a href="https://hub.docker.com/" title="Docker Hub">Docker Hub</a> 上有許多公開的 image, 可以使用以下指令來搜尋所需要的 image:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/b7Yqlhk.png" alt="search"></p>
<p>下載 image:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/v78BxLO.png" alt="pull"></p>
<h3 id="查看所有-Image"><a href="#查看所有-Image" class="headerlink" title="查看所有 Image"></a>查看所有 Image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure>

<h3 id="刪除-Image"><a href="#刪除-Image" class="headerlink" title="刪除 Image"></a>刪除 Image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rmi [options] &lt;image&gt;</span><br></pre></td></tr></table></figure>

<h3 id="建立並啟動-Container"><a href="#建立並啟動-Container" class="headerlink" title="建立並啟動 Container"></a>建立並啟動 Container</h3><p>下載好 image 之後，執行以下指令就可以建立並啟動 container:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --name &lt;container_name&gt; &lt;image&gt; bash</span><br></pre></td></tr></table></figure>

<p><code>-it</code> 是可以進入這個 container 的 shell 進行操作，如果要離開 container, 使用 <code>exit</code> 指令即可。</p>
<p><code>--name</code> 設定 container 名稱。</p>
<h3 id="查看-Container"><a href="#查看-Container" class="headerlink" title="查看 Container"></a>查看 Container</h3><p>查看目前運行的 container:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure>

<p>查看所有 container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>

<h3 id="進入-Container"><a href="#進入-Container" class="headerlink" title="進入 Container"></a>進入 Container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &lt;container_id&gt; bash</span><br></pre></td></tr></table></figure>

<h3 id="停止-Container"><a href="#停止-Container" class="headerlink" title="停止 Container"></a>停止 Container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker stop [options] &lt;container_id&gt;</span><br></pre></td></tr></table></figure>

<h3 id="重新啟動-Container"><a href="#重新啟動-Container" class="headerlink" title="重新啟動 Container"></a>重新啟動 Container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker restart [options] &lt;container_id&gt;</span><br></pre></td></tr></table></figure>

<h3 id="刪除-Container"><a href="#刪除-Container" class="headerlink" title="刪除 Container"></a>刪除 Container</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> [options] &lt;container_id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Dockerize-應用程式"><a href="#Dockerize-應用程式" class="headerlink" title="Dockerize 應用程式"></a>Dockerize 應用程式</h2><p>了解基本概念以及簡單的操作指令之後，我們就可以將應用程式和執行環境打包，產生一個 image, 方便之後佈署到其他機器上。</p>
<h3 id="建立並撰寫-Dockerfile"><a href="#建立並撰寫-Dockerfile" class="headerlink" title="建立並撰寫 Dockerfile"></a>建立並撰寫 Dockerfile</h3><p>Dockerfile 是用來記錄打包的步驟，我們先在專案目錄底下建立 <code>Dockerfile</code>，專案目錄架構如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">application/</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── README.md</span><br><span class="line">├── app.js</span><br><span class="line">├── node_modules/</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>

<h4 id="選定-Base-image"><a href="#選定-Base-image" class="headerlink" title="選定 Base image"></a>選定 Base image</h4><p>Docker 的 image 是一層一層疊加，所以我們需要先從 <a href="https://hub.docker.com/" title="Docker Hub">Docker Hub</a> 上找到適合的 base image, 再慢慢加上我們需要的東西。</p>
<p><a href="https://larrylu.blog/step-by-step-dockerize-your-app-ecd8940696f4"><img src="https://cdn-images-1.medium.com/max/1600/1*bKRHfz7unRA35WHd9SBOCA.png" alt="Docker"></a></p>
<p>因為我們的專案是用 Node.js 寫的，所以這裡我們選擇 node 作為 base image，如果是 Python 或其他語言也可以找到對應的 image 作為 base image.</p>
<p>使用 <code>FROM</code> 設定 base image:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>指定 node 版本為 12.2.0，如果要用最新版也可以寫成 <code>node:latest</code>.</p>
<h4 id="設定-Working-directory"><a href="#設定-Working-directory" class="headerlink" title="設定 Working directory"></a>設定 Working directory</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br></pre></td></tr></table></figure>

<h4 id="Copy-code"><a href="#Copy-code" class="headerlink" title="Copy code"></a>Copy code</h4><p>使用 copy 指令將程式碼複製到 <code>WORKDIR</code>, 這裡我們假設 <code>WORKDIR</code> 是 <code>/app/</code>:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.js package.json /app/</span></span><br></pre></td></tr></table></figure>

<p>如果想要複製所有檔案，只排除特定檔案，可以建立 <code>.dockerignore</code>，裡面寫要排除檔案:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Ignore files</span><br><span class="line">node_modules</span><br><span class="line">.git</span><br><span class="line">.circleci</span><br><span class="line">test</span><br><span class="line">*.txt</span><br></pre></td></tr></table></figure>

<p>然後在 <code>Dockerfile</code> 就可以直接寫:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app/</span></span><br></pre></td></tr></table></figure>

<h4 id="安裝所需套件"><a href="#安裝所需套件" class="headerlink" title="安裝所需套件"></a>安裝所需套件</h4><p>使用 <code>RUN</code> 執行安裝指令，清理 npm cache 是為了讓 build 出來的 image 小一點。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm i &amp;&amp; npm cache clean --force</span></span><br></pre></td></tr></table></figure>

<h4 id="設定-Port"><a href="#設定-Port" class="headerlink" title="設定 Port"></a>設定 Port</h4><p>設定 container 開放的 port:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h4 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NAME HelloWord</span><br></pre></td></tr></table></figure>

<h4 id="設定-Initial-command"><a href="#設定-Initial-command" class="headerlink" title="設定 Initial command"></a>設定 Initial command</h4><p>最後就是執行程式的指令，使用 <code>CMD</code> 來設定這個 image run 起來之後要執行的預設指令:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> node app.js</span></span><br></pre></td></tr></table></figure>

<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>完成 Dockerfile 之後就可以開始建立 image, 執行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t &lt;image_name&gt;[:tag] &lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>建立完之後，執行 <code>docker images</code> 就可以看到多了剛才建立的 image 囉!</p>
<h3 id="執行打包的應用程式"><a href="#執行打包的應用程式" class="headerlink" title="執行打包的應用程式"></a>執行打包的應用程式</h3><p>直接使用 <code>docker run &lt;image&gt;</code> 就可以啟動應用程式，並且預設會執行 <code>CMD</code> 設定的指令，這樣就成功了!</p>
<p>如果想要在背景執行，可以加上 <code>-d</code> 參數，讓 container 在背景執行，如果想要看 log, 可以執行 <code>docker logs &lt;container_id&gt;</code>.</p>
<p>另外可以使用 <code>-p</code> 將外部 Host 的 port 轉到 container 的 port, 例如: 將伺服器的 8080 port 轉到 container 的 8080 port:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 &lt;image&gt;</span><br></pre></td></tr></table></figure>

<h3 id="佈署到遠端-server"><a href="#佈署到遠端-server" class="headerlink" title="佈署到遠端 server"></a>佈署到遠端 server</h3><p>如果想要佈署到遠端 server, 有以下幾種方式:</p>
<ol>
<li>將 image 傳到遠端 server</li>
<li>將 Dockerfile 和所有程式碼放在 git repo, 直接在遠端 pull repo 之後 build image</li>
<li>將自己的 image push 到 Docker Hub</li>
</ol>
<p>第一點要將 image 傳到遠端 server 有點麻煩，第三點因為 Docker Hub 的 private repository 只能有一個，而 image 又包含自己的程式碼或是一些重要的 key, 不能把它設為 public repository, 所以建議用第二個方法，在遠端 server 重新 build image, 因為都是依照 Dockerfile 的步驟執行，所以不用擔心執行結果不同。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://larrylu.blog/step-by-step-dockerize-your-app-ecd8940696f4">Docker 實戰系列（一）：一步一步帶你 dockerize 你的應用</a></li>
<li><a href="https://github.com/twtrubiks/docker-tutorial">docker-tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[ELK] 利用 ELK 架構分析 log</title>
    <url>/posts/5e2804d6/</url>
    <content><![CDATA[<p><a href="https://medium.com/oneclicklabs-io/streaming-spring-boot-application-logs-to-elk-stack-part-1-a68bd7cccaeb"><img src="https://cdn-images-1.medium.com/max/748/1*mwSvtVy_qGz0nTjaYbvwpw.png" alt="ELK"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常我們架設網站或服務時，會把 Log 寫在檔案中，方便追蹤系統狀態，當發生問題時也能夠查看紀錄，但是當我們的服務是分散在許多台機器時，每次發生問題就要到各個機器開啟 Log file 查看，這樣的過程很繁瑣又很沒效率，所以這一篇文章主要紀錄如何利用 ELK 架構來分析 Log，透過 ELK 架構可以更方便地追蹤系統狀態、分析 Log.</p>
<span id="more"></span>

<p>ELK 是由 <a href="https://www.elastic.co/cn/products/elasticsearch" title="Elasticsearch">Elasticsearch</a>、<a href="https://www.elastic.co/cn/products/logstash" title="Logstash">Logstash</a> 和 <a href="https://www.elastic.co/cn/products/kibana" title="Kibana">Kibana</a> 所組成的 Log 收集、分析和查詢的架構:</p>
<ul>
<li>Elasticsearch: 是一個以 <a href="https://lucene.apache.org/core/">Apache Lucene</a> 為核心，分散式的 RESTful 風格的搜尋和數據分析引擎。它是以 JSON 的形式儲存資料，並提供即時的分析及搜尋。在此架構中, 主要作為儲存和查詢 Log 的搜尋引擎。</li>
<li>Logstash: 是開源的 Log 收集、處理的工具，並將處理後的 Log 資料儲存到 Elasticsearch.</li>
<li>Kibana: 將 Elasticsearch 中的資料以視覺化的方式呈現，並提供操作 Elastic Stack 的 UI 介面。</li>
</ul>
<h2 id="安裝及設定"><a href="#安裝及設定" class="headerlink" title="安裝及設定"></a>安裝及設定</h2><h3 id="Elasticsearch-amp-Kibana"><a href="#Elasticsearch-amp-Kibana" class="headerlink" title="Elasticsearch &amp; Kibana"></a>Elasticsearch &amp; Kibana</h3><p>可以參考 <a href="/posts/e0cb3249/"><a href="https://www.elastic.co/cn/products/elasticsearch" title="Elasticsearch">Elasticsearch</a> 使用 Elasticsearch + Kibana 實現中文全文檢索</a> 來安裝和設定 Elasticsearch 和 Kibana.</p>
<h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>直接從 <a href="https://www.elastic.co/cn/products/logstash" title="Logstash">Logstash</a> 網站中下載並解壓縮:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/logstash/logstash-6.2.3.tar.gz</span><br><span class="line">$ tar zxvf logstash-6.2.3.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> logstash-6.2.3</span><br></pre></td></tr></table></figure>

<h2 id="使用-ELK-架構"><a href="#使用-ELK-架構" class="headerlink" title="使用 ELK 架構"></a>使用 ELK 架構</h2><p>依照上面步驟安裝完 Elasticsearch、Kibana 和 Logstash 之後，可以開始來設定 Logstash 蒐集 Log 資料，將資料處理過後儲存到 Elasticsearch, 最後透過 Kibana 呈現 Log 內容，流程如下:</p>
<p><a href="https://oranwind.org/dv-elk-an-zhuang-ji-she-ding-jiao-xue/"><img src="http://upload-images.jianshu.io/upload_images/5342565-8df4892e85e1e904.png" alt="ELK流程"></a></p>
<h3 id="設定-Logstash"><a href="#設定-Logstash" class="headerlink" title="設定 Logstash"></a>設定 Logstash</h3><p>Logstash 處理資料的流程: <code>輸入資料 → 過濾/處理資料 → 輸出資料</code>, 設定檔格式如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這裡稍微介紹一下 Logstash 常用的 plugins:</p>
<h4 id="Input-plugins"><a href="#Input-plugins" class="headerlink" title="Input plugins"></a>Input plugins</h4><p>我們主要透過 Input plugins 來讀取 Log 資料，以下是幾個常用的 Input plugins 及使用方式，更多 Input plugins 可以參考<a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">官方網站 - Input plugins</a>.</p>
<h5 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h5><p>tcp plugin 是可以接收來自 TCP socket 的資料，將各個機器的 Log 送到指定的 port 就可以蒐集不同來源的資料了。</p>
<p>範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">tcp</span> &#123;</span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9250</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json</span>       <span class="comment"># vaule type, default is &quot;plain&quot;</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">dev_log</span>     <span class="comment"># 分類, 可以用在 filter 進行資料處理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">tcp</span> &#123;</span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">9260</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">sys_log</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="file"><a href="#file" class="headerlink" title="file"></a>file</h5><p>file plugin 主要是用來讀取已經寫成純文字檔的 Log file, 預設會持續觀察指定檔案，如果檔案有更新則會觸發 Logstash 進行資料擷取。</p>
<p>範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">file</span> &#123;</span><br><span class="line">        <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;/var/log/*.log&quot;</span>]      <span class="comment"># path can be an array</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;sys_log&quot;</span></span><br><span class="line">        <span class="string">start_position</span> <span class="string">=&gt;</span> <span class="string">&quot;beginning&quot;</span>   <span class="comment"># 如果是第一次啟動，可以設定讀取全部檔案內容</span></span><br><span class="line">        <span class="string">discover_interval</span> <span class="string">=&gt;</span> <span class="number">15</span>         <span class="comment"># 多久察看一次指定檔案, 預設15秒</span></span><br><span class="line">        <span class="string">exclude</span> <span class="string">=&gt;</span> [<span class="string">&quot;*.tar.gz&quot;</span>]         <span class="comment"># 排除的檔案</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h5><p>elasticsearch plugin 可以用來讀取 Elasticsearch 的 query result, 也可以排程定期執行一次 query.</p>
<p>範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]     <span class="comment"># hosts can be an array</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;mylog&quot;</span>                <span class="comment"># default is &quot;logstash-*&quot;</span></span><br><span class="line">        <span class="string">query</span> <span class="string">=&gt;</span> <span class="string">&#x27;&#123; \&quot;query\&quot;: &#123; &quot;match&quot;: &#123; &quot;statuscode&quot;: 200 &#125; &#125;, &quot;sort&quot;: [ &quot;_doc&quot; ] &#125;&#x27;</span></span><br><span class="line">        <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;0 * * * *&quot;</span>         <span class="comment"># cron format, 每小時執行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面範例等同於每小時執行一次以下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://localhost:9200/mylog/_search?&amp;scroll=1m&amp;size=1000&#x27;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;statuscode&quot;: 200</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;sort&quot;: [ &quot;_doc&quot; ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Filter-plugins"><a href="#Filter-plugins" class="headerlink" title="Filter plugins"></a>Filter plugins</h4><p>透過 Filter plugins 可以過濾資料，這裡介紹一些 Filter plugins 的使用方式，更多 Filter plugins 可以參考<a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">官方網站 - Filter plugins</a>:</p>
<h5 id="grok"><a href="#grok" class="headerlink" title="grok"></a>grok</h5><p>我們所要過濾的資料都在 <code>message</code> 這個欄位，也就是 Log file 的完整內容，而 <code>grok</code> 這個 plugin 有方便的字串處理功能，可以使用正規表達式及 grok 語法來處理資料。範例:</p>
<p>test.log:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[2018-04-16 13:51:17.482] INFO MyServer - client:127.0.0.1, Server start.</span><br></pre></td></tr></table></figure>

<p>使用範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">        <span class="string">match</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;\[(?&lt;date&gt;.+?)\] <span class="template-variable">%&#123;LOGLEVEL:level&#125;</span> <span class="template-variable">%&#123;DATA:logger&#125;</span> - client:<span class="template-variable">%&#123;IPV4:client_ip&#125;</span>, <span class="template-variable">%&#123;DATA:message&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的範例使用正規表達式切割出日期 <code>date</code>，剩下的則是使用 grok 語法來切割。grok 語法的格式如: <code>%&#123;grok patterns:自訂屬性名稱&#125;</code>，透過以上設定就可以將 Log 資料處理成:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-04-16 13:51:17.482&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;logger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MyServer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server start.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>詳細的 grok patterns 可以參考: <a href="https://grokdebug.herokuapp.com/patterns#">grok patterns</a>, 這裡也提供一個方便的工具 <a href="https://grokdebug.herokuapp.com/">grok debugger</a>, 可以用來測試 grok 語法是否正確。</p>
<h5 id="json"><a href="#json" class="headerlink" title="json"></a>json</h5><p>透過 json plugin, 可以處理 json 格式的資料，範例:</p>
<p>test.log:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;&quot;date&quot;:&quot;2018-04-16 13:51:17.482&quot;,&quot;loglevel&quot;:&quot;INFO&quot;,&quot;message&quot;:&quot;Server start.&quot;,&quot;more&quot;:[&quot;test1&quot;, &quot;test2&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>filter 設定:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">json</span> &#123;</span><br><span class="line">        <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">&quot;message&quot;</span></span><br><span class="line">        <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">&quot;jsoncontent&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的範例是將 json 格式的資料處理後，儲存到 <code>jsoncontent</code> 屬性，結果如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;jsoncontent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-04-16 13:51:17.482&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;loglevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INFO&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server start.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;more&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;test1&quot;</span><span class="punctuation">,</span> <span class="string">&quot;test2&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="mutate"><a href="#mutate" class="headerlink" title="mutate"></a>mutate</h5><p>mutate 這個 plugin 除了有字串切割的功能之外，還有型態轉換和基本運算的功能，使用範例如下:</p>
<p>test.log:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2018-04-16 13:51:17.482,INFO,MyServer,client:127.0.0.1,Server start.</span><br></pre></td></tr></table></figure>

<p>我們可以將 grok 處理後的資料取出來，再透過 mutate convert 轉換至其他型態:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">mutate</span> &#123;</span><br><span class="line">        <span class="string">convert</span> <span class="string">=&gt;</span> [<span class="string">&quot;exec_time&quot;</span>, <span class="string">&quot;float&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以將 log file 內容以指定符號切割:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">mutate</span> &#123;</span><br><span class="line">        <span class="string">split</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;,&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以取代特定字串:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">mutate</span> &#123;</span><br><span class="line">        <span class="string">gsub</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外還可以重新命名屬性欄位:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">mutate</span> &#123;</span><br><span class="line">        <span class="string">rename</span> <span class="string">=&gt;</span> [<span class="string">&quot;exec_time&quot;</span>, <span class="string">&quot;sys_exec_time&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="geoip"><a href="#geoip" class="headerlink" title="geoip"></a>geoip</h5><p>geoip 可以分析 IPv4 或 IPv6, 提供 IP 的所在位置及相關資訊。</p>
<p>使用範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IPV4:ip&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">geoip</span> &#123;</span><br><span class="line">        <span class="string">source</span> <span class="string">=&gt;</span> <span class="string">&quot;ip&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>會產生 geoip 屬性，裡面包含 IP 的相關資訊:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;geoip&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hanoi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Asia/Ho_Chi_Minh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123.30.238.16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latitude&quot;</span><span class="punctuation">:</span> <span class="number">21.0333</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;country_code2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;country_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Vietnam&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;continent_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;country_code3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;region_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Thanh Pho Ha Noi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="number">105.85</span><span class="punctuation">,</span> <span class="number">21.0333</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;longitude&quot;</span><span class="punctuation">:</span> <span class="number">105.85</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;region_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;64&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="Output-plugins"><a href="#Output-plugins" class="headerlink" title="Output plugins"></a>Output plugins</h4><p>最後我們透過 Output plugins 來將處理後的資料輸出，在 ELK 架構中，我們搭配 elasticsearch plugin 來將資料輸出到 Elasticsearch, 其他的 Output plugins 可以參考: <a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">官方網站 - Output plugins</a>.</p>
<p>完整的 Logstash config 範例:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">file</span> &#123;</span><br><span class="line">        <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;/home/user/test.log&quot;</span>]</span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;test_log&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">        <span class="string">match</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">            <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;\[(?&lt;date&gt;.+?)\] <span class="template-variable">%&#123;LOGLEVEL:level&#125;</span> <span class="template-variable">%&#123;DATA:logger&#125;</span> - client:<span class="template-variable">%&#123;IPV4:client_ip&#125;</span>, <span class="template-variable">%&#123;DATA:detail&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]     <span class="comment"># hosts can be an array</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;mylog&quot;</span>                <span class="comment"># Elasticsearch index name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>寫好設定檔之後，啟動 Logstash:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/logstash -f ./config/log.conf</span><br></pre></td></tr></table></figure>

<h3 id="瀏覽-Log-資料"><a href="#瀏覽-Log-資料" class="headerlink" title="瀏覽 Log 資料"></a>瀏覽 Log 資料</h3><p>接著我們開啟 Kibana 的 Discover 頁面, 就可以看到由 Logstash 輸出的 Log 資料囉!<br>如果是第一次使用，記得要先到 Management 建立 Index pattern, 就能在 Discover 中看到 Elasticsearch 中的資料了!</p>
<p><img src="https://i.imgur.com/yHY2f9f.png" alt="Kibana UI"></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://hk.saowen.com/a/78d90e1799838b5e28369e9be35655de59c2495f554561dc9de5cda335403058">ELK入門級介紹–打造實時日誌查詢系統</a></li>
<li><a href="https://blog.johnwu.cc/article/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-centos-red-hat.html">ELK 教學 - 從無到有安裝 ELK (CentOS&#x2F;Red Hat)</a></li>
<li><a href="https://oranwind.org/dv-elk-an-zhuang-ji-she-ding-jiao-xue/">[DV] ELK 安裝及設定教學</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10186786">Day5 - 便利的 logstash plugin (filter)</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>Logstash</tag>
        <tag>Kibana</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>[Elasticsearch] Elasticsearch + Kibana 設定使用者認證</title>
    <url>/posts/9cefa9a7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>參考上一篇文章: <a href="/posts/e0cb3249/">[Elasticsearch] 使用 Elasticsearch + Kibana 實現中文全文檢索</a> 開始使用 Elasticsearch 和 Kibana 之後就會發現一個問題: 沒有使用者帳號密碼嗎? 因為像是 MySQL、MongoDB 等許多資料庫都有使用者認證的機制，需要有帳號密碼才可存取資料庫，但 Elasticsearch 和 Kibana 本身是沒有提供使用者驗證的機制，如果希望是內部使用，只能透過設定防火牆的方式限制特定網域使用，但是如果我們希望讓外部也能夠存取資源，綁定 IP 之後，任何人只要知道 IP 和 port 就都可以存取資料，這樣非常不安全，因此我們希望能夠設定使用者認證。</p>
<p>雖然 Elasticsearch 和 Kibana 本身沒有提供使用者認證機制，但 Elastic 有提供 X-Pack 工具，它可以用來做 Elasticsearch 和 Kibana 的安全防護、即時監控和產生報表等等，但是它是要付費的，試用期過了之後就無法使用。如果除了安全防護之外，也需要有即時監控、報表紀錄等等功能，也是可以考慮這個方案，詳細設定方式可以參考 <a href="https://www.elastic.co/">Elastic 官網</a>。</p>
<p>因為我們主要的需求是希望讓外部也能夠存取資源，但需要有使用者驗證機制，不要讓任何人都能夠存取資料，所以我們選擇使用 Nginx 作為 proxy，接收外部的請求，再透過 Nginx 轉發給 Elasticsearch 或 Kibana, 將 Elasticsearch 和 Kibana 設定為只能本機存取 (host 設為 <code>127.0.0.1</code>)，並針對 Nginx 設定 HTTP Basic Auth, 這樣就能夠達到需要輸入使用者帳號密碼才能夠存取 Elasticsearch 和 Kibana 的需求。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>首先，我們先來安裝所需要的套件:</p>
<h3 id="安裝-Nginx-相依套件"><a href="#安裝-Nginx-相依套件" class="headerlink" title="安裝 Nginx 相依套件"></a>安裝 Nginx 相依套件</h3><p><a href="http://pcre.org/">PCRE</a>: Supports regular expressions. Required by the NGINX Core and Rewrite modules.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.43.tar.gz</span><br><span class="line">$ tar -zxf pcre-8.43.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pcre-8.43</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><a href="http://www.zlib.net/">zlib</a>: Supports header compression. Required by the NGINX Gzip module.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">$ tar -zxf zlib-1.2.11.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> zlib-1.2.11</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><a href="https://www.openssl.org/">OpenSSL</a>: Supports the HTTPS protocol. Required by the NGINX SSL module and others</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://www.openssl.org/source/openssl-1.0.2r.tar.gz</span><br><span class="line">$ tar -zxf openssl-1.0.2r.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> openssl-1.0.2r</span><br><span class="line">$ ./Configure darwin64-x86_64-cc --prefix=/usr</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line">$ tar zxf nginx-1.16.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.16.0</span><br></pre></td></tr></table></figure>

<p>接下來設定 Nginx 路徑, 這裡我們把路徑設定在 <code>~/nginx/</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/home/&lt;user&gt;/nginx       <span class="comment"># DEFAULT:  /usr/local/nginx</span></span><br></pre></td></tr></table></figure>

<p>Make &amp; Install:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<h3 id="安裝-Apache-工具"><a href="#安裝-Apache-工具" class="headerlink" title="安裝 Apache 工具"></a>安裝 Apache 工具</h3><p>後面步驟會使用到此工具來建立密碼檔，因此我們先安裝 <code>apache2-utils</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install apache2-utils</span><br></pre></td></tr></table></figure>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><h3 id="設定-Elasticsearch"><a href="#設定-Elasticsearch" class="headerlink" title="設定 Elasticsearch"></a>設定 Elasticsearch</h3><p>將 Elasticsearch 設定為只能本機存取, 修改 <code>&lt;ES_DIR&gt;/config/elasticsearch.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br></pre></td></tr></table></figure>

<h3 id="設定-Kibana"><a href="#設定-Kibana" class="headerlink" title="設定 Kibana"></a>設定 Kibana</h3><p>將 Kibana 設定為只能本機存取, 修改 <code>&lt;Kibana_DIR&gt;/config/kibana.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br></pre></td></tr></table></figure>

<p>並設定 Elasticsearch url:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">&quot;http://127.0.0.1:9200&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果 Elasticsearch 和 Kibana 在不同台機器上，則需要設定為:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">&quot;http://&lt;nginx_host&gt;:&lt;nginx_es_port&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;username&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="設定-Nginx-Server"><a href="#設定-Nginx-Server" class="headerlink" title="設定 Nginx Server"></a>設定 Nginx Server</h3><p>接著設定 Nginx, 修改 <code>&lt;NGINX_DIR&gt;/conf/nginx.conf</code>, 將原本的 http server 註解, 並加上:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">http</span> &#123;</span><br><span class="line">    <span class="comment"># Elasticsearch</span></span><br><span class="line">    <span class="string">server</span> &#123;</span><br><span class="line">        <span class="string">listen</span>       <span class="number">9201</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Authorize</span></span><br><span class="line">        <span class="string">auth_basic</span>  <span class="string">&quot;ES Auth&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">auth_basic_user_file</span>    <span class="string">/home/&lt;user&gt;/nginx/passwd/elasticsearch.passwd;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">            <span class="comment"># Proxy</span></span><br><span class="line">            <span class="string">proxy_pass</span>  <span class="string">http://127.0.0.1:9200;</span></span><br><span class="line">            <span class="string">proxy_redirect</span>  <span class="string">off;</span></span><br><span class="line">            <span class="string">proxy_http_version</span> <span class="number">1.1</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">Connection</span>  <span class="string">&quot;&quot;</span><span class="string">;</span></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">X-Real-IP</span>   <span class="string">$remote_addr;</span></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">Host</span>    <span class="string">$http_host;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Kibana</span></span><br><span class="line">    <span class="string">server</span> &#123;</span><br><span class="line">        <span class="string">listen</span>       <span class="number">5602</span><span class="string">;</span></span><br><span class="line">        <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Authorize</span></span><br><span class="line">        <span class="string">auth_basic</span>  <span class="string">&quot;Kibana Auth&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">auth_basic_user_file</span>    <span class="string">/home/&lt;user&gt;/nginx/passwd/kibana.passwd;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">            <span class="comment"># Proxy</span></span><br><span class="line">            <span class="string">proxy_pass</span>  <span class="string">http://127.0.0.1:5601;</span></span><br><span class="line">            <span class="string">proxy_redirect</span>  <span class="string">off;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">X-Real-IP</span>   <span class="string">$remote_addr;</span></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">            <span class="string">proxy_set_header</span>    <span class="string">Host</span>    <span class="string">$http_host;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讓 Nginx 可以接收外部請求，轉發到內部指定的 port，並使用 HTTP Basic Auth 做基本的登入限制。</p>
<h3 id="建立密碼檔"><a href="#建立密碼檔" class="headerlink" title="建立密碼檔"></a>建立密碼檔</h3><p>再來我們來建立密碼檔:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ htpasswd -c ./passwd/elasticsearch.passwd &lt;username&gt;</span><br><span class="line">$ htpasswd -c ./passwd/kibana.passwd &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p><code>-c</code> 代表 create, 如果要建立多組帳號密碼，把 <code>-c</code> 拿掉即可。</p>
<p>完成後重新啟動 Nginx ，就可以來測試有沒有設定成功了!</p>
<p>啟動 Nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./sbin/nginx</span><br></pre></td></tr></table></figure>

<p>連線到 Elasticsearch 可以使用此指令格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u &lt;username&gt; <span class="string">&#x27;http://&lt;nginx_host&gt;:&lt;nginx_es_port&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>連線到 Kibana 的部分，用瀏覽器開啟 <code>http://&lt;nginx_host&gt;:&lt;nginx_kibana_port</code> 就會看到詢問帳號密碼的畫面，輸入後才能繼續操作:</p>
<p><img src="https://i.imgur.com/fiIflfm.png" alt="Kibana Login"></p>
<p>這樣我們就完成設定 Elasticsearch 和 Kibana 的使用者驗證囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://coder.tw/?p=7235">Elasticsearch、Kibana 使用者認證設定</a></li>
<li><a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">Install Nginx</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>Elasticsearch</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>[Elasticsearch] 使用 Elasticsearch + Kibana 實現中文全文檢索</title>
    <url>/posts/e0cb3249/</url>
    <content><![CDATA[<p><a href="https://blog.toright.com/posts/5319/fulltext-search-elasticsearch-kibana-bigdata.html"><img src="https://blog.toright.com/wp-content/uploads/2017/07/elasticsearch-logo.png" alt="Elasticsearch"></a></p>
<h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><a href="https://www.elastic.co/cn/products/elasticsearch" title="Elasticsearch">Elasticsearch</a> 是一個以 <a href="https://lucene.apache.org/core/">Apache Lucene</a> 為核心，分散式的 RESTful 風格的搜尋和數據分析引擎。它是以 JSON 的形式儲存資料，並提供即時的分析及搜尋。</p>
<p><a href="https://www.elastic.co/cn/products/kibana" title="Kibana">Kibana</a> 將 Elasticsearch 中的資料以視覺化的方式呈現，並提供操作 Elastic Stack 的 UI 介面。</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik" title="ik analyzer">ik analyzer</a> 是一個 Elasticsearch 的中文分詞 plugin，由於 Elasticsearch 預設對於中文的分詞是一個字一個字切割，沒有分詞的話，中文搜尋的效果會比較差，所以我們需要加上中文分詞的 plugin, 讓搜尋的結果更好。</p>
<span id="more"></span>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elasticsearch 和一般 RDBMS 的架構不同，所以在名詞上也不一樣，以下表格是 MySQL 和 Elasticsearch 名詞的對應關係:</p>
<table>
<thead>
<tr>
<th>MySQL</th>
<th>Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td>Server</td>
<td>Node</td>
</tr>
<tr>
<td>Database</td>
<td>Index</td>
</tr>
<tr>
<td>Table</td>
<td>Type</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
</tr>
<tr>
<td>Column</td>
<td>Field</td>
</tr>
</tbody></table>
<p>在 Elasticsearch 中，Index 的名稱必須是小寫，而同一個 Index、同一個 Type 中的每筆 record 的資料欄位不需要相同 (NoSQL的概念)。另外，根據<a href="https://www.elastic.co/blog/index-type-parent-child-join-now-future-in-elasticsearch">此文章</a>，在 Elasticsearch 6.x 版只允許每個 Index 包含一個 Type，在 7.x 版將會<strong>完全移除</strong> Type.</p>
<h2 id="安裝及設定"><a href="#安裝及設定" class="headerlink" title="安裝及設定"></a>安裝及設定</h2><h3 id="安裝-amp-設定-Elasticsearch"><a href="#安裝-amp-設定-Elasticsearch" class="headerlink" title="安裝&amp;設定 Elasticsearch"></a>安裝&amp;設定 Elasticsearch</h3><p>在安裝 Elasticsearch 之前，需要先安裝 Java 環境:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install default-jre</span><br></pre></td></tr></table></figure>

<p>安裝完 Java 後，就可以來安裝 Elasticsearch, 直接下載並解壓縮即可:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.7.2.tar.gz</span><br><span class="line">$ tar zxvf elasticsearch-6.7.2.tar.gz</span><br></pre></td></tr></table></figure>

<p>設定 Elasticsearch (<code>&lt;ES_DIR&gt;/config/elasticsearch.yml</code>):</p>
<p><strong>cluster name</strong><br>如果有多台 Elasticsearch node 要加入 cluster, 則必須定義相同的 cluster name.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">cluster_name</span></span><br></pre></td></tr></table></figure>

<p><strong>node.name</strong><br>自訂義 node name.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node1</span></span><br></pre></td></tr></table></figure>

<p><strong>bootstrap.memory_lock</strong><br>設定為 true 是為了防止 swap 到 ES 的 memory.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>network</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ------------------------ Network ------------------------</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">host_ip</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="string">port</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="attr">http.cors.allow-methods :</span> <span class="string">OPTIONS,</span> <span class="string">HEAD,</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT,</span> <span class="string">DELETE</span></span><br><span class="line"><span class="attr">http.cors.allow-headers :</span> <span class="string">X-Requested-With,X-Auth-Token,Content-Type,</span> <span class="string">Content-Length</span></span><br></pre></td></tr></table></figure>

<p><strong>thread_pool</strong></p>
<p>可以參考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-threadpool.html">Elasticsearch官網</a></p>
<p><code>index</code><br>  For index&#x2F;delete operations. Thread pool type is <code>fixed</code> with a size of <code># of available processors</code>, queue_size of 200. The maximum size of this pool is <code>1 + # of available processors</code>.</p>
<p><code>write</code><br>For single-document index&#x2F;delete&#x2F;update and bulk requests. Thread pool type is fixed with a size of <code># of available processors</code>, queue_size of 200. The maximum size for this pool is <code>1 + # of available processors</code>.</p>
<p>The <code>size</code> parameter controls the number of threads, and defaults to the number of cores times 5.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Thread pool</span></span><br><span class="line"><span class="attr">thread_pool:</span></span><br><span class="line">    <span class="attr">index:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">13</span></span><br><span class="line">        <span class="attr">queue_size:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">write:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">13</span></span><br><span class="line">        <span class="attr">queue_size:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>

<p>ps. 如果不知道機器的 available processors，可以使用 <code>nproc</code> 指令來查詢。</p>
<p>接下來修改 JVM 的設定，Elasticsearch 預設的 JVM 大小為 1GB, 如果需要調整 memory 大小，可以在 <code>./elasticsearch-6.7.2/config/jvm.options</code> 做修改:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Xms represents the initial size of total heap space</span></span><br><span class="line"><span class="comment"># Xmx represents the maximum size of total heap space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the minimum heap size (Xms) and maximum heap size (Xmx) to be equal to each other</span></span><br><span class="line"><span class="string">-Xms4g</span></span><br><span class="line"><span class="string">-Xmx4g</span></span><br></pre></td></tr></table></figure>

<p>ps. Elasticsearch 最多只會使用系統的 50% memory, 且不建議設定超過 32GB.</p>
<p>設定好之後啟動 Elasticsearch:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> elasticsearch-6.7.2/bin</span><br><span class="line">$ ./elasticsearch</span><br></pre></td></tr></table></figure>

<p>啟動時可能會遇到一些問題，這裡列了目前有遇到的錯誤訊息和解決方式，如果啟動時有出現這些錯誤訊息可以參考以下解法:</p>
<ul>
<li><p>vm.max_map_count 太小<br>Error message:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least</span><br></pre></td></tr></table></figure>

<p>解決方式: 增加 <code>vm.max_map_count</code> 的大小限制，<code>vm.max_map_count</code> 是用來限制 process 在 Virtual Memory Areas 擁有的最大數量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure>
</li>
<li><p>無法 lock memory<br>Error message:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Unable to lock JVM Memory: error=12, reason=Cannot allocate memory</span><br></pre></td></tr></table></figure>

<p>解決方式: 修改 <code>/etc/security/limits.conf</code> 設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># allow user &#x27;userA&#x27; mlockall</span><br><span class="line">userA soft memlock unlimited</span><br><span class="line">userA hard memlock unlimited</span><br></pre></td></tr></table></figure>

<p>接著重新登入即可生效。</p>
</li>
<li><p>NullPointerException<br>Error message:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[ERROR][o.e.b.Bootstrap ] Exception</span><br><span class="line">java.lang.NullPointerException: null</span><br></pre></td></tr></table></figure>

<p>解決方式: 設定 cgroup</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,cpu,cpuacct cgroup /sys/fs/cgroup/cpu,cpuacct </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果設定 line 1 的指令後，一樣無法啟動，請再試著設定以下內容:</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,freezer cgroup /sys/fs/cgroup/freezer</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,blkio cgroup /sys/fs/cgroup/blkio</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,hugetlb cgroup /sys/fs/cgroup/hugetlb</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,devices cgroup /sys/fs/cgroup/devices</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,net_cls,net_prio cgroup /sys/fs/cgroup/net_cls,net_prio</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,cpuset cgroup /sys/fs/cgroup/cpuset</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,memory cgroup /sys/fs/cgroup/memory</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,pids cgroup /sys/fs/cgroup/pids</span></span><br><span class="line"><span class="comment"># sudo mount -t cgroup -o rw,nosuid,nodev,noexec,relatime,perf_event cgroup /sys/fs/cgroup/perf_event</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="安裝-amp-設定-ik-analyzer"><a href="#安裝-amp-設定-ik-analyzer" class="headerlink" title="安裝&amp;設定 ik analyzer"></a>安裝&amp;設定 ik analyzer</h3><p>參考 <a href="https://github.com/medcl/elasticsearch-analysis-ik" title="ik analyzer">ik analyzer</a>, 使用 elasticsearch-plugin 安裝 ik analyzer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.7.2/elasticsearch-analysis-ik-6.7.2.zip</span><br></pre></td></tr></table></figure>

<p>NOTE: 將 <code>6.7.2</code> 替換為所使用的 Elasticsearch 版本。</p>
<p>接著設定 Dictionary, 可以準備自定義的字典檔讓搜尋效果更好, 字典及設定檔可以放在 <code>&lt;ES_DIR&gt;/config/analysis-ik/</code> 或是 <code>&lt;ES_DIR&gt;/plugins/analysis-ik/config/</code> 底下，再來在 <code>IKAnalyzer.cfg.xml</code> 設定使用自定義的字典:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span></span><br><span class="line">    custom/mydict.dic;</span><br><span class="line">    extra_main.dic;</span><br><span class="line">    extra_single_word_low_freq.dic;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span></span><br><span class="line">    extra_stopword.dic</span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最後重新啟動 Elasticsearch 就可以使用 ik analyzer.</p>
<h3 id="安裝-amp-設定-Kibana"><a href="#安裝-amp-設定-Kibana" class="headerlink" title="安裝&amp;設定 Kibana"></a>安裝&amp;設定 Kibana</h3><p>直接從 <a href="https://www.elastic.co/cn/products/kibana" title="Kibana">Kibana</a> 網站中下載並解壓縮:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/kibana/kibana-6.7.2-linux-x86_64.tar.gz</span><br><span class="line">$ tar zxvf kibana-6.7.2-linux-x86_64.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> kibana-6.7.2-linux-x86_64</span><br></pre></td></tr></table></figure>

<p>設定 <code>&lt;KIBANA_DIR&gt;/config/kibana.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kibana host and port</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;localhost&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Elasticsearch url</span></span><br><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">&quot;http://localhost:9200&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.dest:</span> <span class="string">/path/to/kibana/log</span></span><br></pre></td></tr></table></figure>

<p>執行 Kibana:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/kibana</span><br></pre></td></tr></table></figure>

<p>啟動 Kibana 之後，開啟瀏覽器進入: <code>http://localhost:5601</code>，如果有正常連線到 Elasticsearch 就會看到以下畫面:</p>
<p><img src="https://i.imgur.com/E6iiQTW.png" alt="Kibana"></p>
<h2 id="操作-Elasticsearch"><a href="#操作-Elasticsearch" class="headerlink" title="操作 Elasticsearch"></a>操作 Elasticsearch</h2><h3 id="設定-Mapping"><a href="#設定-Mapping" class="headerlink" title="設定 Mapping"></a>設定 Mapping</h3><p>在建立索引之前，要先設定 Index 的 mapping，設定資料欄位的 datatype, format, analyzer 等等，讓搜尋效果可以更好，詳細的 Mapping 設定方式可以參考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">官方文件</a>，這裡範例是指定資料欄位使用 ik analyzer:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XPOST <span class="string">&#x27;http://localhost:9200/index/type/_mapping&#x27;</span> -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;properties&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;content&quot;: &#123;</span></span><br><span class="line"><span class="string">      &quot;type&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">      &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span></span><br><span class="line"><span class="string">      &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="設定回傳的資料量限制"><a href="#設定回傳的資料量限制" class="headerlink" title="設定回傳的資料量限制"></a>設定回傳的資料量限制</h3><p>Elasticsearch 預設的 from + size 最多為 10000, 如果需要增加大小，需要修改以下設定:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XPUT <span class="string">&#x27;http://&lt;host&gt;:&lt;port&gt;/&lt;index&gt;/_settings&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;index&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;max_result_window&quot; : &quot;300000&quot;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>但是有可能會占用更多記憶體，所以要小心設定。</p>
<h3 id="設定-Log-level"><a href="#設定-Log-level" class="headerlink" title="設定 Log level"></a>設定 Log level</h3><p>當資料量大的時候，在 Elasticsearch 做全文搜尋時，CPU 使用率常常會很高，甚至到達 100%，我們可以透過設定 Log level 來減少 IO，降低 CPU 使用率:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XPUT <span class="string">&#x27;http://&lt;host&gt;:&lt;port&gt;/&lt;index&gt;/_settings&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;index.search.slowlog.level&quot;: &quot;info&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="檢查狀態"><a href="#檢查狀態" class="headerlink" title="檢查狀態"></a>檢查狀態</h3><h4 id="Index-狀態"><a href="#Index-狀態" class="headerlink" title="Index 狀態"></a>Index 狀態</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://127.0.0.1:9200/_cat/indices?v</span><br></pre></td></tr></table></figure>

<p>回傳結果:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   dcard    SWUzC7XRSU6DfGGwa_rtHw   5   1          6            0     84.4kb         84.4kb</span><br><span class="line">yellow open   ptt      DzwrF9YMRQm_vzpp_Xz8eg   5   1        912            0    166.4kb        166.4kb</span><br><span class="line">yellow open   mylog    x74lnUFcTZO1IU4rznok0w   5   1          5            0     37.5kb         37.5kb</span><br><span class="line">yellow open   my_index IFc49rh8So2AtXrW5gIXng   5   1          5            0     16.9kb         16.9kb</span><br><span class="line">yellow open   fbpost   xD9-BAR_R4ybkhAYnXzLYA   5   1          6            1     98.9kb         98.9kb</span><br><span class="line">yellow open   news     WLNPnFXpQ8yQEH8c_saClg   5   1          5            0     55.3kb         55.3kb</span><br><span class="line">green  open   .kibana  isZ0WfytSzWQcXXH0PxmWA   1   0          5            2     33.1kb         33.1kb</span><br></pre></td></tr></table></figure>

<ul>
<li>health: index 的健康狀態<ul>
<li>red: 資料缺損，無法使用</li>
<li>yellow: 資料只有一份，沒有 shards, 如果單一節點損壞的話，無法回復</li>
<li>green: 資料有 shards 的備，如果單點損壞還是可以正常檢索</li>
</ul>
</li>
<li>status: 是否啟用</li>
<li>index: 索引名稱</li>
<li>uuid: unique key</li>
<li>pri: 主要 shards 數量</li>
<li>rep: 備份 shards 數量</li>
<li>docs.count: index 中 doc 筆數</li>
<li>docs.deleted: index 中刪除的 doc 筆數</li>
<li>store.size: 儲存主要和備份資料所占用的空間</li>
<li>pri.store.size: 儲存主要資料所佔用的空間</li>
</ul>
<h4 id="線程狀態"><a href="#線程狀態" class="headerlink" title="線程狀態"></a>線程狀態</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -XGET http://127.0.0.1:9200/_cat/thread_pool?v</span><br></pre></td></tr></table></figure>

<h4 id="Cluster-狀態"><a href="#Cluster-狀態" class="headerlink" title="Cluster 狀態"></a>Cluster 狀態</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://127.0.0.1:9200/_cat/health?v</span><br></pre></td></tr></table></figure>

<h4 id="Node-狀態"><a href="#Node-狀態" class="headerlink" title="Node 狀態"></a>Node 狀態</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XGET http://127.0.0.1:9200/_cat/nodes?v</span><br></pre></td></tr></table></figure>

<h3 id="新增資料"><a href="#新增資料" class="headerlink" title="新增資料"></a>新增資料</h3><p>基本的指令格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XPUT <span class="string">&#x27;http://&lt;host&gt;:&lt;port&gt;/&lt;index&gt;/&lt;type&gt;/&lt;doc_id&gt;&#x27;</span> -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;data&quot;: data&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>doc_id</code> 不一定要有，如果沒有指定 <code>doc_id</code>, HTTP request method 需使用 <code>POST</code>. For example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定 doc_id</span></span><br><span class="line">$ curl -XPUT http://localhost:9200/index/type/1 -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;蘋果好綠！宣布全球設施已 100％ 使用再生能源&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不指定 doc_id</span></span><br><span class="line">$ curl -XPOST http://localhost:9200/index/type -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;阿里山花季謝幕 紫藤接替營造紫色浪漫&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">$ curl -XPOST http://localhost:9200/index/type -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;日本環球影城全新夜間遊行 四大特點搶先看&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">$ curl -XPOST http://localhost:9200/index/type -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;阿里山花季今閉幕群花接力開&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">$ curl -XPOST http://localhost:9200/index/fulltext -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;不甩聯合國美國怒嗆：要讓「怪物」阿薩德付出代價&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="查詢資料-By-doc-id"><a href="#查詢資料-By-doc-id" class="headerlink" title="查詢資料 (By doc_id)"></a>查詢資料 (By doc_id)</h3><p>基本指令格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://&lt;host&gt;:&lt;port&gt;/&lt;index&gt;/&lt;type&gt;/&lt;doc_id&gt;?pretty=true</span></span><br></pre></td></tr></table></figure>

<p>其中 URL 參數 <code>pretty=true</code> 代表以方便讀取的格式回傳, for example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://localhost:9200/index/type/1?pretty=true&#x27;</span></span><br></pre></td></tr></table></figure>

<p>回傳結果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;蘋果好綠！宣布全球設施已 100％ 使用再生能源&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="刪除資料"><a href="#刪除資料" class="headerlink" title="刪除資料"></a>刪除資料</h3><p>使用 <code>DELETE</code> method, for example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XDELETE <span class="string">&#x27;http://localhost:9200/index/type/1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>也可以直接刪除 Index 中的所有資料:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XDELETE <span class="string">&#x27;http://localhost:9200/index&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新資料"><a href="#更新資料" class="headerlink" title="更新資料"></a>更新資料</h3><p>使用 <code>PUT</code> method, 重新發送一次 request 即可:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -XPUT http://localhost:9200/index/type/1 -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> -d<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;content&quot;:&quot;蘋果好綠！宣布全球設施已 100％ 使用再生能源. Update!!&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>回傳結果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我們可以看到回傳的結果中 <code>_version</code> 是 2, <code>result</code> 為 <code>updated</code>, 代表是更新資料而不是新增資料。</p>
<h3 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h3><p>使用 Elasticsearch 最重要的就是搜尋的功能，我們使用它所提供的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html">Search API</a> 來搜尋:</p>
<h4 id="取得所有紀錄"><a href="#取得所有紀錄" class="headerlink" title="取得所有紀錄"></a>取得所有紀錄</h4><p>使用 <code>GET</code> method, 後面加上 <code>_search</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;http://localhost:9200/index/type/_search&#x27;</span></span><br></pre></td></tr></table></figure>

<p>回傳結果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PXlMs2IBy_MbTvZJQ_1N&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阿里山花季謝幕 紫藤接替營造紫色浪漫&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蘋果好綠！宣布全球設施已 100％ 使用再生能源&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="全文搜尋"><a href="#全文搜尋" class="headerlink" title="全文搜尋"></a>全文搜尋</h4><p>Elasticsearch 有自己的查詢語法，詳細可以參考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Query DSL</a>, 這裡的範例是搜尋 <code>美國</code> 並將比對到的地方 highlight:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl <span class="string">&#x27;localhost:9200/index/type/_search&#x27;</span>  -d <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;query&quot; : &#123;</span></span><br><span class="line"><span class="string">    &quot;match&quot;: &#123; &quot;content&quot;: &quot;美國&quot; &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;highlight&quot; : &#123;</span></span><br><span class="line"><span class="string">    &quot;fields&quot; : &#123;</span></span><br><span class="line"><span class="string">      &quot;content&quot; : &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>搜尋結果:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">0.92769736</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QHlMs2IBy_MbTvZJXv3t&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.92769736</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不甩聯合國美國怒嗆：要讓「怪物」阿薩德付出代價&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;不甩聯合國&lt;em&gt;美國&lt;/em&gt;怒嗆：要讓「怪物」阿薩德付出代價&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="備份"><a href="#備份" class="headerlink" title="備份"></a>備份</h3><p>Elasticsearch 的備份，可以參考由 taskrabbit 開發的 <a href="https://github.com/taskrabbit/elasticsearch-dump">elasticsearch-dump</a> 工具來做資料的備份及轉移。</p>
<h2 id="操作-Kibana"><a href="#操作-Kibana" class="headerlink" title="操作 Kibana"></a>操作 Kibana</h2><p>由於從 cmd 操作 Elasticsearch 比較難閱讀，Kibana 提供漂亮的介面，讓我們可以更方便地操作 Elasticsearch, 並將 Elasticsearch 中的資料以視覺化的方式呈現，這裡我們簡單介紹一下 Kibana 的使用方式。</p>
<p><img src="https://i.imgur.com/eqTx39V.png" alt="Kibana UI"></p>
<p>一進到 Kibana 頁面，我們可以看到左側主選單有以下幾個功能:</p>
<ul>
<li>Discover: 檢視每個索引下的紀錄筆數和內容。</li>
<li>Visualize: 將搜尋結果是以視覺化的圖表呈現，並可以將搜尋結果或圖表儲存。</li>
<li>Dashboard: 組合多個已儲存的圖表或搜尋結果，方便一次瀏覽所有資訊。</li>
<li>Dev Tools: 是一個方便的除錯測試工具，可以在 Console 輸入指令直接操作 Elasticsearch.</li>
<li>Management: 設定 Kibana 對應的 Elasticsearch index patterns, 管理已儲存的搜尋結果 object、視覺化圖表以及進階的設定。</li>
</ul>
<p>如果是第一次使用，我們需要先到 Management 建立 Index pattern, 這樣就可以在 Discover 中搜尋特定條件的資料，並且在 Visualize 中以視覺化圖表的方式呈現，最後透過 Dashboard 組合多個搜尋結果 object 和圖表，一次瀏覽所需要的資訊。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.toright.com/posts/5319/fulltext-search-elasticsearch-kibana-bigdata.html">安裝 ElasticSearch + Kibana 實現中文全文搜尋與數據分析</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">全文搜索引擎 Elasticsearch 入门教程</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10189791">[ELK] Elasticsearch 安裝 (5.4.1版本)</a></li>
<li><a href="https://www.jianshu.com/p/008f1c2a3653">elasticsearch6.3.2安装</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>Kibana</tag>
        <tag>ik分詞</tag>
      </tags>
  </entry>
  <entry>
    <title>[Elasticsearch] 解決 FORBIDDEN/12/index read-only / allow delete (api) 的問題</title>
    <url>/posts/c04104b4/</url>
    <content><![CDATA[<p>在 Elasticsearch 運行的過程中，很有可能會遇到 <code>FORBIDDEN/12/index read-only / allow delete (api)</code> 的錯誤，發生的原因是 Disk 空間不足，這和 Elasticsearch 中的幾個設定有關:</p>
<span id="more"></span>

<p><code>cluster.routing.allocation.disk.watermark.low</code>: 控制 Disk usage 的 low watermark, 預設是 85%，代表 Elasticsearch 不會配置 shards 給 Disk 使用量高於 85% 的節點。其值可以是百分比，也可以是絕對的數值(例如: 20gb)。此設定可以避免 Elasticsearch 配置 shards 給 Disk 空間不足的節點。此設定對於新創建的 index 的 primary shard 是不影響的，也就是說如果 cluster 中所有節點的 Disk usage 都超過 85%，有新創建的 index 需要進行分配，此時新創建的 primary shard 會正常分配，非主要的 shard 會無法分配而導致 cluster status 為 yellow.</p>
<p><code>cluster.routing.allocation.disk.watermark.high</code>: 控制 Disk usage 的 high watermark, 預設是 90%，代表 Elasticsearch 會企圖嘗試將 Disk 使用量高於 90% 的節點重新配置 shards。其值和 <code>low watermark</code> 一樣可以是百分比，也可以是絕對的數值(例如: 10gb)。此設定會影響到所有 shards，不論是否已經配置過，都會影響到。</p>
<p><code>cluster.routing.allocation.disk.watermark.flood_stage</code>: 控制 flood stage watermark. 預設是 95%，代表 Elasticsearch 會強制將有一個或多個 shard 被配置到 Disk 使用量超過 95% 的節點上的所有 index 變成 read-only index block (<code>index.blocks.read_only_allow_delete</code>)，這是最後會採取的措施，用來避免節點的 Disk 空間被用盡。當有足夠 Disk 空間時，需要再手動釋放 index block.</p>
<p>所以當發生 <code>FORBIDDEN/12/index read-only / allow delete (api)</code> 錯誤時，代表已經達到 flood stage，解決方式就是整理 Disk 空間、刪除部分資料，當有足夠 Disk 空間後，執行以下指令來釋放 index block:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUT /&lt;your_index&gt;/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;index.blocks.read_only_allow_delete&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ps. 在設定時，不能混合百分比和絕對的數值，必須全部都是百分比，或是全部都是絕對數值。</p>
<p><strong>參考資料</strong>  </p>
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/disk-allocator.html">Disk-based Shard Allocation</a></li>
<li><a href="https://discuss.elastic.co/t/forbidden-12-index-read-only-allow-delete-api/110282">FORBIDDEN&#x2F;12&#x2F;index read-only &#x2F; allow delete (api)</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>[Elasticsearch] 解決 HTTP ERROR: 413 (Request Entity Too Large)</title>
    <url>/posts/b7da9ddc/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在匯入資料到 Elasticsearch 時，如果出現以下 Error:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">raise HTTP_EXCEPTIONS.get(status_code, TransportError)(status_code, error_message, additional_info)</span><br><span class="line">elasticsearch.exceptions.TransportError: TransportError(413, &#x27;&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;413 Request Entity Too Large&lt;/title&gt;&lt;/head&gt;\r\n&lt;body bgcolor=&quot;white&quot;&gt;\r\n&lt;center&gt;&lt;h1&gt;413 Request Entity Too Large&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;nginx/1.12.1&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n&#x27;)</span><br></pre></td></tr></table></figure>

<p>我們可以透過設定 <code>http.max_content_length</code> 來調整大小限制。</p>
<span id="more"></span>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>在 Elasticsearch config (<code>&lt;ES_DIR&gt;/config/elasticsearch.yml</code>) 中加上以下設定，調整 <code>http.max_content_length</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set a custom allowed content length:</span></span><br><span class="line"><span class="attr">http.max_content_length:</span> <span class="string">500mb</span></span><br></pre></td></tr></table></figure>

<p>接著重新啟動 Elasticsearch 就可以囉!</p>
<p>另外如果有搭配 Nginx 做 proxy, 也記得要檢查 Nginx 的設定，可以參考 <a href="/posts/f8ec6a24/">[Nginx] 解決 HTTP ERROR: 413 Request Entity Too Large</a>。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://github.com/elastic/elasticsearch/issues/2902">Return HTTP 413 (Request Entity Too Large) when http.max_content_length exceeded</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>[Elasticsearch] 解決 max_clause_count is set to 1024 的錯誤</title>
    <url>/posts/a7aaf577/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Elasticsearch 預設的 Lucene BooleanQuery 的 clauses 長度限制為 1024, 不只有 <code>bool</code> query, 其他的 query 也幾乎會在內部被轉換為 Lucene 的 BooleanQuery. 此限制主要是要避免 query 過大，造成使用過多 CPU 和 memory, 一般來說預設的 1024 就很夠用，但是如果出現 <code>max_clause_count is set to 1024</code> 這個錯誤訊息，代表 query 長度超過限制，可以透過以下的設定來做調整，不過要注意將此限制調高的話，可能會降低 performance 或是產生記憶體相關問題。</p>
<span id="more"></span>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>若要調整 <code>max_clause_count</code>，在 <code>&lt;ES_DIR&gt;/config/elasticsearch.yml</code> 中加上以下設定:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">indices.query.bool.max_clause_count:</span> <span class="number">10240</span></span><br></pre></td></tr></table></figure>

<p>接著重啟 Elasticsearch 就可以了~</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://stackoverflow.com/questions/40275514/elasticsearch-set-max-clause-count">Elasticsearch - set max_clause_count</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>[GCP] Google Compute Engine SSH連線設定</title>
    <url>/posts/3b5e3bdc/</url>
    <content><![CDATA[<p><img src="https://bit.ly/2NF2Nvg" alt="Google Cloud Platform"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近正好在研究 Google Cloud Platform (GCP)，GCP 有提供 300 美元的免費試用額度，期限是一年，免費額度用完之後需要升級帳戶才會再繼續扣款，所以可以不用擔心額度用完後就會被收錢，另外 GCP 也有提供免費的方案，可以參考 <a href="https://cloud.google.com/free/">Google Cloud Platform 免費版</a>，在用量限制內可以免費使用特定的產品。</p>
<p>這裡我們主要使用的產品是 GCP 中的 Compute Engine，它提供了許多主機規格可以自行定義，並依照不同規格來收費，計價方式可以參考 <a href="https://cloud.google.com/pricing/list">Google Cloud 價目表</a>。</p>
<p>這篇文章主要是紀錄在 Google Compute Engine 架設好之後，如何使用 SSH 連線到 Compute Engine 上，而不用從 Google developer console 頁面中連線到機器上。</p>
<span id="more"></span>

<h1 id="Linux-和-OSX-連線至-Compute-Engine"><a href="#Linux-和-OSX-連線至-Compute-Engine" class="headerlink" title="Linux 和 OSX 連線至 Compute Engine"></a>Linux 和 OSX 連線至 Compute Engine</h1><p>首先，我們需要先產生 SSH key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -f ~/.ssh/ssh-key-gcp -C [username]</span><br></pre></td></tr></table></figure>

<p>其中的 <code>username</code> 是執行個體中要套用的金鑰使用者，如果沒有指定，Compute Engine 會自動使用產生這個金鑰的使用者。</p>
<p>執行完上面的指令之後，會在 <code>~/.ssh/</code> 中看到以下檔案:</p>
<ul>
<li>ssh-key-gcp: private key, 權限必須是 <code>600</code>.</li>
<li>ssh-key-gcp.pub: public key, 權限為 <code>644</code>.</li>
</ul>
<p>接著輸入以下指令，印出 public key 內容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ssh-key-gcp.pub</span><br></pre></td></tr></table></figure>

<p>將 public key 的內容複製後，前往專案的<a href="https://console.cloud.google.com/compute/metadata/sshKeys?hl=zh-tw&_ga=2.71562451.-1591071787.1529480427">中繼資料</a>頁面:</p>
<p><img src="https://i.imgur.com/r3MK14E.png" alt="中繼資料"></p>
<p>選擇 <strong>SSH 金鑰</strong> 後，點選 <strong>編輯</strong> 按鈕，修改專案的 SSH key，將 public key 的內容貼到 SSH key 清單中，<br>最後點選 <strong>儲存</strong>，即可在 Terminal 使用以下指令連線到 Compute Engine:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -i ~/.ssh/ssh-key-gcp [username]@[compute_engine_ip]</span><br></pre></td></tr></table></figure>

<h1 id="Windows-連線至-Compute-Engine"><a href="#Windows-連線至-Compute-Engine" class="headerlink" title="Windows 連線至 Compute Engine"></a>Windows 連線至 Compute Engine</h1><p>在 Windows 系統中，我們一樣要先產生 SSH key，需要透過 <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">puttygen</a> 這個工具來產生。</p>
<p>下載並執行 puttygen，可以在這個工具中調整金鑰產生的設定，大部分情況下使用預設的選項即可，設定好之後點選 <strong>Generate</strong> 即可產生金鑰。</p>
<p>接著在 <strong>key comment</strong> 的地方輸入 <code>username</code> (Google 使用者名稱)，並點選 <strong>Save private key</strong> 將 private key 儲存為 <code>ssh-key-gcp.ppk</code>， 以及點選 <strong>Save public key</strong> 儲存 public key 以便之後使用。</p>
<p><img src="https://i.imgur.com/JWpp7NU.png" alt="puttygen"></p>
<p>再來將 puttygen 中顯示的 public key 內容複製後，前往專案的<a href="https://console.cloud.google.com/compute/metadata/sshKeys?hl=zh-tw&_ga=2.71562451.-1591071787.1529480427">中繼資料</a>頁面:</p>
<p><img src="https://i.imgur.com/r3MK14E.png" alt="中繼資料"></p>
<p>選擇 <strong>SSH 金鑰</strong> 後，點選 <strong>編輯</strong> 按鈕，修改專案的 SSH key，將 public key 的內容貼到 SSH key 清單中，最後點選 <strong>儲存</strong>，再來開啟 putty 後，輸入使用者名稱和 Compute Engine IP:</p>
<p><img src="https://i.imgur.com/6zLm8Gx.png" alt="putty"></p>
<p>接著點選 <strong>Connection</strong> &gt; <strong>SSH</strong> &gt; <strong>Auth</strong>，選擇上面步驟所產生的 Private key file (<code>ssh-key-gcp.ppk</code>):</p>
<p><img src="https://i.imgur.com/Z1ME2FQ.png" alt="putty"></p>
<p>這樣就可以在 Windows 中使用 putty 連線到 Compute Engine 囉!</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://cloud.google.com/compute/docs/instances/connecting-to-instance?hl=zh-tw">連線至 Linux 執行個體</a></li>
</ul>
]]></content>
      <categories>
        <category>GCP</category>
      </categories>
      <tags>
        <tag>GCP</tag>
      </tags>
  </entry>
  <entry>
    <title>[GCP] Google Compute Engine 防火牆規則與設定</title>
    <url>/posts/7801bf01/</url>
    <content><![CDATA[<p>每次新開一個 Google Compute Engine 就會忘記要去哪裡設定防火牆 XD，所以就寫了這一篇文章來紀錄一下設定的步驟~</p>
<span id="more"></span>

<p>首先要先到 <strong>VPC 網路</strong> &gt; <strong>防火牆規則</strong> 的頁面:</p>
<p><img src="https://i.imgur.com/tRUN5OR.png" alt="防火牆規則"></p>
<p>點選上方的 <strong>建立防火牆規則</strong> 按鈕，輸入規則的內容:</p>
<p><img src="https://i.imgur.com/gViYcYQ.png" alt="防火牆規則"></p>
<p><img src="https://i.imgur.com/rsg8dmB.png" alt="防火牆規則"></p>
<p>輸入完之後，按儲存就可以建立防火牆規則，這邊要記一下所輸入的目標代碼，接下來的步驟會需要用到~</p>
<p>再來到 <strong>Compute Engine</strong> &gt; <strong>VM 執行個體</strong> 的頁面，點選要設定防火牆的 VM 並按下編輯按鈕，接著找到 <strong>網路標記</strong> 的欄位:</p>
<p><img src="https://i.imgur.com/kdOrXNo.png" alt="網路標記"></p>
<p>輸入剛才填寫的目標代碼，最後按下儲存就可以套用防火牆規則囉!</p>
]]></content>
      <categories>
        <category>GCP</category>
      </categories>
      <tags>
        <tag>GCP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Git Flow 開發流程</title>
    <url>/posts/96228b34/</url>
    <content><![CDATA[<p><a href="https://nvie.com/posts/a-successful-git-branching-model/"><img src="http://bit.ly/2EjGXut" alt="Git flow"></a></p>
<h1 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h1><p>當越來越多人一起開發一個專案時，如果沒有好的開發流程，每個人的開發習慣都不同，到後期會讓整個專案很混亂，所以有人提出了一套開發流程: <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a>，而後來也陸續有一些不錯的開發流程: <a href="https://guides.github.com/introduction/flow/">GitHub flow</a>, <a href="https://about.gitlab.com/2014/09/29/gitlab-flow/">GitLab flow</a>，這一篇主要是紀錄 Git flow 開發流程。</p>
<span id="more"></span>

<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支分為 <code>master</code>, <code>develop</code>, <code>feature</code>, <code>release</code> 和 <code>hotfix</code> 這五種分支，各分支分別負責不同的功能。</p>
<h2 id="主要分支"><a href="#主要分支" class="headerlink" title="主要分支"></a>主要分支</h2><p>主要的分支是 <code>master</code> 和 <code>develop</code>，其他的分支大部分都會在完成後刪除。</p>
<h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>最新、穩定、隨時可以上線的版本，只能從其他分支合併過來，不可直接 commit 到這個分支。通常會在這個分支的 commit 加上版本號的 tag.</p>
<h3 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h3><p>主要用來開發的分支，當要開發新功能時，會從這個分支切出 <code>feature</code> 分支，當 <code>feature</code> 分支完成後，再合併回 <code>develop</code> 分支。</p>
<h2 id="次要分支"><a href="#次要分支" class="headerlink" title="次要分支"></a>次要分支</h2><p>次要的分支則是 <code>feature</code>, <code>release</code> 和 <code>hotfix</code>.</p>
<h3 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h3><p>主要是在新功能開發的時候，從 <code>develop</code> 分出來的，當完成後，會再合併回 <code>develop</code> 分支。</p>
<h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><p>為了發布而建立的分支，主要是做為上線前的最後測試。測試完後，<code>release</code> 會同時合併到 <code>master</code> 和 <code>develop</code> 分支，確保所有程式都是最新的狀態。</p>
<h3 id="Hotfix"><a href="#Hotfix" class="headerlink" title="Hotfix"></a>Hotfix</h3><p>當已經發布的產品發生緊急的問題時，從 <code>master</code> 切出來的分支，當修復完成後，會合併回 <code>master</code>，同時也會合併回 <code>develop</code> 分支，以確保所有程式都是最新狀態。</p>
<h1 id="開始使用-Git-Flow-開發流程"><a href="#開始使用-Git-Flow-開發流程" class="headerlink" title="開始使用 Git Flow 開發流程"></a>開始使用 Git Flow 開發流程</h1><p><a href="https://github.com/nvie/gitflow">Git flow GitHub 專案</a> 中有 <code>git flow</code> 工具，或是也可以直接使用 <code>git</code> 來實現 Git Flow 開發流程，這兩個方式我們都會稍微紀錄一下~</p>
<h2 id="安裝-Git-Flow"><a href="#安裝-Git-Flow" class="headerlink" title="安裝 Git Flow"></a>安裝 Git Flow</h2><p>如果想要使用 <code>git flow</code> 工具，需要先依照以下步驟來安裝。</p>
<p>我們的開發環境是在 Windows 10 上使用 VS code，所以接下來的安裝及使用方式都是以此環境為範例，其他環境的安裝方式可以參考 <a href="https://github.com/nvie/gitflow">Git flow GitHub 專案</a> 中的說明。</p>
<p>建議安裝 <a href="https://cygwin.com/install.html">Cygwin</a> , 在安裝時需選擇安裝 <code>git</code>, <code>util-linux</code> and <code>wget</code> tools.</p>
<p>完成安裝後，在 Cygwin shell 執行以下指令即可安裝 git flow:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>先初始化 git repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>Initialize repository for git flow</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow init -d  <span class="comment"># -d: 使用所有預設值</span></span><br></pre></td></tr></table></figure>

<p>依照提示設定即可完成初始設定。</p>
<h2 id="建立分支"><a href="#建立分支" class="headerlink" title="建立分支"></a>建立分支</h2><h3 id="建立-Feature-分支"><a href="#建立-Feature-分支" class="headerlink" title="建立 Feature 分支"></a>建立 Feature 分支</h3><p>如果一個功能有很多人一起進行，可以開多個 <code>feature/myFeature</code> 分支，例如: <code>feature/myFeature/user1</code>, <code>feature/myFeature/user2</code>, 最後 merge 回 <code>feature/myFeature</code>, 整個功能完全完成後再 merge 回 <code>develop</code>.</p>
<h4 id="使用-git-flow"><a href="#使用-git-flow" class="headerlink" title="使用 git flow"></a>使用 git flow</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow feature                              <span class="comment"># 顯示 feature 分支</span></span><br><span class="line">$ git flow feature start &lt;name&gt; [&lt;base&gt;]        <span class="comment"># 建立新的 feature 分支</span></span><br><span class="line"></span><br><span class="line">$ git flow feature publish &lt;name&gt;               <span class="comment"># push feature branch to remote repo.</span></span><br><span class="line">$ git flow feature pull &lt;remote&gt; &lt;name&gt;         <span class="comment"># pull feature branch to remote repo.</span></span><br></pre></td></tr></table></figure>

<p>For feature branches, the <code>&lt;base&gt;</code> arg must be a commit on <code>develop</code>.</p>
<h4 id="使用-git"><a href="#使用-git" class="headerlink" title="使用 git"></a>使用 git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b feature/myFeature develop</span><br></pre></td></tr></table></figure>

<p><code>feature</code> 分支的名稱通常會加上 prefix: <code>feature/</code>, <code>base</code> 則是 <code>develop</code>.</p>
<h3 id="建立-Release-分支"><a href="#建立-Release-分支" class="headerlink" title="建立 Release 分支"></a>建立 Release 分支</h3><h4 id="使用-git-flow-1"><a href="#使用-git-flow-1" class="headerlink" title="使用 git flow"></a>使用 git flow</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow release                              <span class="comment"># 顯示 release 分支</span></span><br><span class="line">$ git flow release start &lt;name&gt; [&lt;base&gt;]        <span class="comment"># 建立新的 release 分支</span></span><br></pre></td></tr></table></figure>

<p>For release branches, the <code>&lt;base&gt;</code> arg must be a commit on <code>develop</code>.</p>
<h4 id="使用-git-1"><a href="#使用-git-1" class="headerlink" title="使用 git"></a>使用 git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b release/1.0.0 develop</span><br></pre></td></tr></table></figure>

<p><code>release</code> 分支的名稱通常會加上 prefix: <code>release/</code>, 後面通常是加上版本號, <code>base</code> 則是 <code>develop</code>.</p>
<h3 id="建立-Hotfix-分支"><a href="#建立-Hotfix-分支" class="headerlink" title="建立 Hotfix 分支"></a>建立 Hotfix 分支</h3><h4 id="使用-git-flow-2"><a href="#使用-git-flow-2" class="headerlink" title="使用 git flow"></a>使用 git flow</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow hotfix                               <span class="comment"># 顯示 hotfix 分支</span></span><br><span class="line">$ git flow hotfix start &lt;name&gt; [&lt;base&gt;]         <span class="comment"># 建立新的 hotfix 分支</span></span><br></pre></td></tr></table></figure>

<p>For hotfix branches, the <code>&lt;base&gt;</code> arg must be a commit on <code>master</code>.</p>
<h4 id="使用-git-2"><a href="#使用-git-2" class="headerlink" title="使用 git"></a>使用 git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b hotfix/1.0.1</span><br></pre></td></tr></table></figure>

<p><code>hotfix</code> 分支的名稱通常會加上 prefix: <code>hotfix/</code>, 後面通常是加上修改的版本號.</p>
<h2 id="完成分支任務"><a href="#完成分支任務" class="headerlink" title="完成分支任務"></a>完成分支任務</h2><p>最後，執行以下指令來完成分支任務:</p>
<h4 id="使用-git-flow-3"><a href="#使用-git-flow-3" class="headerlink" title="使用 git flow"></a>使用 git flow</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git flow feature finish &lt;name&gt;</span><br><span class="line">$ git flow release finish &lt;name&gt;</span><br><span class="line">$ git flow hotfix finish &lt;name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="使用-git-3"><a href="#使用-git-3" class="headerlink" title="使用 git"></a>使用 git</h4><p>合併分支時，<code>release</code> 和 <code>hotfix</code> 分支記得要合併到 <code>master</code> 和 <code>develop</code>，合併可以使用 <code>merge</code> 或 <code>rebase</code> 指令:</p>
<p><strong>merge</strong><br>  修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。</p>
<p>  切換到要合併的<strong>主要分支</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;main_branch&gt;  <span class="comment"># &lt;main_branch&gt;: 要合併到的主要分支 (develop or master)</span></span><br></pre></td></tr></table></figure>

<p>  Merge:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff &lt;name&gt;    <span class="comment"># &lt;name&gt;: 要合併的分支名稱, ex. feature/myFeature</span></span><br></pre></td></tr></table></figure>

<p>  <code>--no-ff</code> 不要做 fast-forward 的動作。 Fast-forward 是指當被 merge 對象 (ex. feature&#x2F;myFeature) 是目前分支 (ex. develop) 的 child 時， merge 後會完全看不出來有 merge 過。</p>
<p><strong>rebase</strong><br>  修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是比使用 merge 更容易發生衝突。<br>  <strong>注意: 只能用在還沒有 push 的情況下。</strong></p>
<p>  切換到要 rebase 的<strong>次要分支</strong><br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout feature/myFeature</span><br></pre></td></tr></table></figure></p>
<p>  Rebase:<br>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase origin &lt;main_branch&gt;  <span class="comment"># &lt;main_branch&gt;: 要 rebase 到的主要分支 (develop or master)</span></span><br></pre></td></tr></table></figure></p>
<p>  如果有先把 <code>feature/myFeature</code> 分支 pull 到本地, 可以直接執行:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase &lt;main_branch&gt;</span><br></pre></td></tr></table></figure>

<p>  當發生衝突的時候，需要去修改衝突的地方，修改好之後，如果要繼續 rebase 就加上 –continue，如果要取消 rebase 的話，則加上–abort.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add file.txt        <span class="comment"># file.txt 為發生衝突的檔案, 修改好之後再加入</span></span><br><span class="line">$ git rebase --<span class="built_in">continue</span>   <span class="comment"># 繼續 rebase</span></span><br><span class="line">$ git rebase --abort      <span class="comment"># 取消 rebase</span></span><br></pre></td></tr></table></figure>

<p>最後記得要刪除次要分支:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;name&gt;  <span class="comment"># &lt;name&gt;: 已合併到主要分支的次要分支名稱, ex. feature/myFeature</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://github.com/nvie/gitflow">Git flow Github專案</a></li>
<li><a href="http://blog.hellojcc.tw/2015/04/27/understanding-git-flow/">了解 Git Flow</a></li>
<li><a href="https://gitbook.tw/chapters/gitflow/why-need-git-flow.html">Git Flow 是什麼？為什麼需要這種東西？</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Git Flow</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Git 安裝及使用</title>
    <url>/posts/223ce999/</url>
    <content><![CDATA[<p><a href="https://git-scm.com/"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/400px-Git-logo.svg.png" alt="Git"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>在開發專案時，版本控制是很重要的，透過版本控制系統可以紀錄檔案修改的歷史紀錄、追蹤檔案修改前後的差異、回復到特定版本的檔案內容。若修改後發生問題，也能夠追蹤修改的部分，方便地找出是哪個部分導致了問題的發生。</p>
<p>Git 是一個分散式的版本控制系統，由 Linus Torvalds 開發，一開始是為了管理 Linux Kernel 原始碼，後來設計出 Git 版本控制系統，因為它的分散式、效能好、支援本地存取以及無痛分支的特性，近年來受到許多人的喜愛。</p>
<span id="more"></span>

<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><h2 id="On-Linux"><a href="#On-Linux" class="headerlink" title="On Linux"></a>On Linux</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="On-Windows"><a href="#On-Windows" class="headerlink" title="On Windows"></a>On Windows</h2><p>可以直接從<a href="https://git-scm.com/downloads">Git官方網站</a>下載，安裝後記得在系統環境變數的 <code>PATH</code> 中加上 <code>&lt;Git install path&gt;/bin</code> 才能使用 git 指令。</p>
<h1 id="初始設定"><a href="#初始設定" class="headerlink" title="初始設定"></a>初始設定</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email&quot;</span></span><br><span class="line">$ git config --global core.editor vim        <span class="comment"># 設定預設編輯器</span></span><br><span class="line">$ git config --global merge.tool vimdiff     <span class="comment"># 設定預設合併工具</span></span><br><span class="line">$ git config --global core.autocrlf <span class="literal">false</span>    <span class="comment"># 設定是否自動將LF(\n)轉為CRLF(\r\n)</span></span><br><span class="line">$ git config --list                          <span class="comment"># 檢查目前的設定</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alias</span></span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>

<p>如果想要不需要密碼就能夠操作 GitHub 專案，可以參考<a href="/posts/593a6ec9/">[GitHub] 免密碼 push&#x2F;pull&#x2F;clone 操作專案</a>.</p>
<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="建立新的-Repository"><a href="#建立新的-Repository" class="headerlink" title="建立新的 Repository"></a>建立新的 Repository</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="忽略部分檔案"><a href="#忽略部分檔案" class="headerlink" title="忽略部分檔案"></a>忽略部分檔案</h2><p>建立 <code>.gitignore</code> 檔案，並編輯其內容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim .gitignore</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in .gitignore</span></span><br><span class="line">data/</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure>

<h2 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git st                        <span class="comment"># 檢查狀態</span></span><br><span class="line">$ git diff &lt;file_name&gt;          <span class="comment"># 檢查檔案修改的部分</span></span><br></pre></td></tr></table></figure>

<h2 id="檔案追蹤"><a href="#檔案追蹤" class="headerlink" title="檔案追蹤"></a>檔案追蹤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add &lt;file_name&gt;           <span class="comment"># 增加</span></span><br><span class="line">$ git reset &lt;file_name&gt;         <span class="comment"># reset已追蹤的檔案</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cache &lt;file_name&gt;    <span class="comment"># 刪除, 加上--cache則不會刪除原檔案</span></span><br></pre></td></tr></table></figure>

<h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git ci -m <span class="string">&#x27;Commit message.&#x27;</span>   <span class="comment"># 提交檔案</span></span><br><span class="line">$ git <span class="built_in">log</span>                       <span class="comment"># 檢查提交的歷史紀錄</span></span><br><span class="line">$ git ci --amend                <span class="comment"># 修改最近的commit</span></span><br></pre></td></tr></table></figure>

<h2 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v                         <span class="comment"># list remote repository</span></span><br><span class="line">$ git remote add &lt;name&gt; &lt;repo url&gt;      <span class="comment"># 新增remote repository</span></span><br><span class="line">$ git remote remove &lt;name&gt;              <span class="comment"># 刪除remote repository</span></span><br><span class="line">$ git remote set-url &lt;name&gt; &lt;repo url&gt;  <span class="comment"># 修改remote repository url</span></span><br></pre></td></tr></table></figure>

<h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push &lt;name&gt; &lt;branch&gt;              <span class="comment"># push到remote repository, -f: 強制push</span></span><br></pre></td></tr></table></figure>

<h2 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> &lt;repository&gt; [&lt;directory&gt;]  <span class="comment"># 複製remote repository</span></span><br></pre></td></tr></table></figure>

<h2 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull &lt;name&gt; &lt;branch&gt;              <span class="comment"># 從遠端repository pull最新的內容到local repository</span></span><br></pre></td></tr></table></figure>

<h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h2><p>為了將修改記錄的整體流程分開儲存，讓分開的分支不受其他分支的影響，所以在同一個數據庫裡可以同時進行多個不同的修改。</p>
<h3 id="Master-branch"><a href="#Master-branch" class="headerlink" title="Master branch"></a>Master branch</h3><p>在數據庫進行最初的提交後，Git 會建立一個名為 master 的分支。之後的提交在切換分支之前都會增加在 master 分支裡。</p>
<h3 id="Integration-branch"><a href="#Integration-branch" class="headerlink" title="Integration branch"></a>Integration branch</h3><ul>
<li>新的分支會建立在它的上面，而且 Integration 分支是為了可以隨時建立發布版本的分支。</li>
<li>如果要進行更改的話，最好先建立 Topic 分支並在上面做操作。</li>
<li>通常大家會將 master 分支當作 Integration 分支使用。</li>
</ul>
<h3 id="Topic-branch"><a href="#Topic-branch" class="headerlink" title="Topic branch"></a>Topic branch</h3><ul>
<li>為了開發功能或修復錯誤之類的任務所建立的分支。</li>
<li>若同時進行多個任務時，您必須建立多個的 Topic 分支。</li>
<li>Topic 分支是從穩定的 Integration 分支上建立的，完成作業後，要將 Topic 分支合併到 Integration 分支。</li>
</ul>
<p>如何在開發流程中應用 Branch 可以參考另一篇文章: <a href="/posts/96228b34/">Git Flow 開發流程</a>.</p>
<h3 id="Branch常用指令"><a href="#Branch常用指令" class="headerlink" title="Branch常用指令"></a>Branch常用指令</h3><h4 id="建立Branch"><a href="#建立Branch" class="headerlink" title="建立Branch"></a>建立Branch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;branch_name&gt; [&lt;base&gt;]         <span class="comment"># 建立branch, base:  從哪個分支切出來的</span></span><br><span class="line">$ git branch                                <span class="comment"># 顯示branch列表, 並顯示目前所在的 branch</span></span><br></pre></td></tr></table></figure>

<h4 id="刪除Branch"><a href="#刪除Branch" class="headerlink" title="刪除Branch"></a>刪除Branch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>

<h4 id="切換Branch"><a href="#切換Branch" class="headerlink" title="切換Branch"></a>切換Branch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b: 可以同時建立和切換</span></span><br><span class="line"><span class="comment"># $ git checkout -b &lt;branch_name&gt; [&lt;base&gt;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>執行 <code>checkout</code> 之後，工作目錄裡的檔案會根據切換到不同的分支而呈現該分支最後提交的內容。而 <code>checkout</code> 之後的提交，則屬於切換後的分支的。</p>
<p>HEAD &amp; Stash</p>
<ul>
<li>HEAD<ul>
<li>代表當前分支的最新提交名稱</li>
<li>在建立新的數據庫時，Git 會預設 HEAD 指向 master 分支。</li>
</ul>
</li>
<li>Stash<ul>
<li>Stash 是暫時儲存檔案修改內容的區域。</li>
<li>Stash 可以暫時儲存工作目錄還沒提交的修改內容，可以在事後再取出暫時儲存的修改，應用到原先的分支或者其他的分支中。</li>
</ul>
</li>
</ul>
<h4 id="合併Branch"><a href="#合併Branch" class="headerlink" title="合併Branch"></a>合併Branch</h4><p>Topic 分支完成作業後，必須合併到主要分支 (Integration branch)，合併分支可以使用 <code>merge</code> 或 <code>rebase</code>。</p>
<h5 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;main_branch&gt;        <span class="comment"># 切換到要合併的主要 branch</span></span><br><span class="line">$ git merge --no-ff &lt;branch_name&gt;   <span class="comment"># 將指定的 branch 合併到當前使用的 branch</span></span><br><span class="line">$ git merge --abort                 <span class="comment"># 取消 merge</span></span><br></pre></td></tr></table></figure>

<p><code>--no-ff</code> 不要做 fast-forward 的動作。 Fast-forward 是指當被 merge 對象(branch_name)是目前分支(main_branch)的 child 時， merge 後會完全看不出來有 merge 過。</p>
<ul>
<li>修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜</li>
<li>如果在同一行文字進行修改，則會產生衝突</li>
<li>解決合併衝突: 修改發生衝突的地方，之後再 commit 一次</li>
</ul>
<h5 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branch_name&gt;    <span class="comment"># 切換到要合併的次要 branch</span></span><br><span class="line">$ git rebase &lt;main_branch&gt;      <span class="comment"># 更改次要 branch 的 base (改為 main_branch)</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>rebase 可以看成是修改某個 branch 的參考基準 (base), 把目前分支的 commit 接到另一個分支後面 (通常是 main_branch ).</p>
</li>
<li><p>合併後的歷史記錄會比較清楚簡單，但是會比使用 merge 更容易發生衝突。</p>
</li>
<li><p><strong>只能用在還沒有 push 的情況下。</strong></p>
</li>
<li><p>解決合併衝突: 修改發生衝突的地方，修改好之後，如果要繼續 rebase 操作，則在 rebase 後加上 –continue，如果要取消 rebase 的話，則加上–abort.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add file.txt        <span class="comment"># file.txt 為發生衝突的檔案, 修改好之後再加入</span></span><br><span class="line">$ git rebase --<span class="built_in">continue</span>   <span class="comment"># 繼續 rebase</span></span><br><span class="line">$ git rebase --abort      <span class="comment"># 取消 rebase</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://git-scm.com/" title="Git">Git</a></li>
<li><a href="https://ihower.tw/git/intro.html">Git 版本控制系統</a></li>
<li><a href="https://backlog.com/git-tutorial/tw/intro/intro1_1.html">連猴子都能懂得Git入門指南</a></li>
<li><a href="https://blog.yorkxin.org/2011/07/29/git-rebase">Git-rebase 小筆記</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Git] Gitlab Flow</title>
    <url>/posts/f6ed9129/</url>
    <content><![CDATA[<p><a href="https://docs.gitlab.com/ee/topics/img/gitlab_flow_production_branch.png"><img src="https://docs.gitlab.com/ee/topics/img/gitlab_flow_production_branch.png" alt="Gitlab Flow"></a></p>
<p>在 Git strategy 中，主要分為三種 flow: Git flow, Github flow 和 Gitlab flow. 這篇文章主要介紹一下 Gitlab flow, Git flow 的部分可以參考之前的文章: <a href="/posts/96228b34/">[Git] Git Flow 開發流程</a>.</p>
<span id="more"></span>

<h2 id="Upstream-First"><a href="#Upstream-First" class="headerlink" title="Upstream First"></a>Upstream First</h2><p>在 Gitlab flow 中最主要的原則是上游優先 (Upstream first), 也就是只存在一個主分支 master, 它是所有分支的上游，只有通過測試之後才能往下游合併。</p>
<p>Gitlab flow 分成兩種情況，以因應不同的開發流程:</p>
<ul>
<li>持續發布</li>
<li>版本發布</li>
</ul>
<h3 id="持續發布"><a href="#持續發布" class="headerlink" title="持續發布"></a>持續發布</h3><p>在持續發布的專案中，建議在 master 分支以外，再多建立不同的環境分支，例如: 開發環境是 master, 預發環境是 pre-production, 生產環境是 production.</p>
<p><a href="https://docs.gitlab.com/ee/topics/img/gitlab_flow_environment_branches.png"><img src="https://docs.gitlab.com/ee/topics/img/gitlab_flow_environment_branches.png" alt="Gitlab Flow-持續發布"></a></p>
<p>在開發時，會從 master 另外建立分支做開發，當開發到一段落後，就會發 pull request (PR) 來 merge to master, 在發 PR 之後，會進行 code review、自動化測試…等等，通過後才可 merge 回 master, 接著再依序往下合併。</p>
<p>而如果在 production 環境中發生 bug, 則要再從 master 建立一個新的分支，修改完成後要先合併到 master, 通過 code review 及測試之後再使用 <code>cherry-pick</code> 依序往 pre-production、 production 分支合併。</p>
<h3 id="版本發布"><a href="#版本發布" class="headerlink" title="版本發布"></a>版本發布</h3><p>Gitlab flow 對於版本發布的專案，建議是每一個穩定版本都要從 master 拉出新的分支，例如下圖的 2-3 stable, 2-4 stable. 如果有 bug, 一樣要再建立一個新的分支，修改完後一樣要先合併到最上游的 master, 通過測試之後再合併到版本發布的分支，並且更新版本號。</p>
<p><a href="https://docs.gitlab.com/ee/topics/img/gitlab_flow_release_branches.png"><img src="https://docs.gitlab.com/ee/topics/img/gitlab_flow_release_branches.png" alt="Gitlab Flow-版本發布"></a></p>
<h2 id="合併的方式"><a href="#合併的方式" class="headerlink" title="合併的方式"></a>合併的方式</h2><p>在發布新的版本或功能時，是從 master 依序往下(pre-production, production) merge，但是不一定所有 master 上的 commit 都要發布，所以在 Gitlab flow 中是採用 <code>git cherry-pick</code> 來挑選需要的 commit 部署到 pre-production 和 production 分支。</p>
<p>如果所有小分支合併回主要分支(master)都是使用 rebase 後進行 fast-forward 的方式合併，那在 master 分支上挑選 commit 的時候，會很容易造成漏挑 commit 的狀況。因此，在 Gitlab flow 中通常會採用 <code>git merge --no-ff</code> 或 <code>git merge --squash</code> 的方式:</p>
<ul>
<li><p><code>git merge --no-ff</code>: 透過 <code>--no-ff</code> 合併時，會把合併的 branch 的 commit 包在一個圓圈內，因此在 <code>cherry-pick</code> 時，只要挑選圈內的所有 commit 即可。</p>
<p>  <a href="https://d1dwq032kyr03c.cloudfront.net/upload/images/20191007/200726065kcpm5tcKZ.jpg"><img src="https://d1dwq032kyr03c.cloudfront.net/upload/images/20191007/200726065kcpm5tcKZ.jpg" alt="`git merge --no-ff`"></a></p>
</li>
<li><p><code>git merge --squash</code>: 透過 <code>--squash</code> 合併時，會把合併的 branch 的所有 commit 壓縮在一個 commit 中，因此在 <code>cherry-pick</code> 時也不會漏挑。</p>
<p>  <a href="https://d1dwq032kyr03c.cloudfront.net/upload/images/20191008/20072606UNYiue54Jg.jpg"><img src="https://d1dwq032kyr03c.cloudfront.net/upload/images/20191008/20072606UNYiue54Jg.jpg" alt="`git merge --squash`"></a></p>
</li>
</ul>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Gitlab flow 不像 Git flow 那麼複雜，也不需要頻繁的切換分支，感覺起來更適合小型團隊、版本快速迭代的專案。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html">Gitlab Flow</a></li>
<li><a href="https://medium.com/@lf2lf2111/%E4%B8%89%E7%A8%AE%E7%89%88%E6%8E%A7%E6%B5%81%E7%A8%8B-29c82f5d4469">三種版控流程</a></li>
<li><a href="https://blog.csdn.net/henryhu712/article/details/82284702">GitLab 工作流介紹（GitLab Flow）</a></li>
<li><a href="https://drprincess.github.io/2017/12/26/Git%E4%B8%89%E5%A4%A7%E7%89%B9%E8%89%B2%E4%B9%8BWorkFlow(%E5%B7%A5%E4%BD%9C%E6%B5%81)/">Git三大特色之WorkFlow(工作流)</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10228195">Day 29 - GIT 團隊協作 談 流程管理 03 GitLab Flow</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Gitlab Flow</tag>
      </tags>
  </entry>
  <entry>
    <title>[GitHub] 免密碼 push/pull/clone 操作專案</title>
    <url>/posts/593a6ec9/</url>
    <content><![CDATA[<p>每次要 push, pull 或 clone 專案的時候，都要輸入密碼很麻煩，所以這裡紀錄一下如何免密碼就能夠操作 GitHub 專案，原理和 <a href="/posts/69b8a25e/">[Linux] 設定 SSH 免密碼登入</a> 一樣，利用 <code>ssh-keygen</code> 來產生 public key and private key, 就可以建立互相信任的連線。</p>
<p>首先，先在 Windows&#x2F;Linux&#x2F;Mac cmd 執行 <code>ssh-keygen</code> 來產生 public key and private key.</p>
<p>如果是在 Windows 上執行，<code>ssh-keygen</code> 是包含在 <code>&lt;Git install path&gt;\usr\bin</code> 底下，記得先將此路徑加到系統環境變數 <code>PATH</code>，以免無法辨識 <code>ssh-keygen</code> 指令。</p>
<span id="more"></span>

<p>產生 public key and private key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -t: rsa or dsa, 預設是 rsa</span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>接著會詢問一些選項:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/&lt;username&gt;/.ssh/id_rsa):	<span class="comment"># 按 Enter 確認 key 儲存的位置</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):				<span class="comment"># 按 Enter 不設定密碼</span></span><br><span class="line">Enter same passphrase again:						<span class="comment"># 按 Enter 不設定密碼</span></span><br></pre></td></tr></table></figure>

<p>這樣就產生好 public key and private key 了, Linux&#x2F;Mac 會產生在 <code>~/.ssh</code> ，Windows 則是產生在 <code>C:\Users\&lt;username&gt;\.ssh</code>.</p>
<p>在 <code>.ssh/</code> 資料夾底下會看到兩個檔案:</p>
<ul>
<li>id_rsa: private key</li>
<li>id_rsa.pub: public key</li>
</ul>
<p>再來進入 GitHub settings → SSH and GPG keys:</p>
<p><img src="https://i.imgur.com/2vPUO2T.png" alt="GitHub settings"></p>
<p>點擊 New SSH key，將 id_rsa.pub (public key) 的內容貼上:</p>
<p><img src="https://i.imgur.com/g0cTDOo.png" alt="New SSH key"></p>
<p>這樣就可以不用密碼就能夠操作 GitHub 專案囉!</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Testify 單元測試</title>
    <url>/posts/5793cee/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Golang 內建就有輕量級的測試框架 <code>testing</code>, 搭配 <code>go test</code> 就可以方便做測試，另外也有其他 testing package, 像是 <a href="https://github.com/stretchr/testify">Testify</a>, <a href="https://github.com/golang/mock">GoMock</a> 或 <a href="https://labix.org/gocheck">gocheck</a> ，其中 <code>Testify</code> 的社群活躍度較高，也有持續在維護，因此我們選擇搭配 <code>Testify</code> 來撰寫單元測試。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/stretchr/testify</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>簡單的使用範例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomething</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    assert.True(t, <span class="literal">true</span>, <span class="string">&quot;True is true!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Testify 有提供幾個方便的 packages: <code>assert</code>, <code>require</code> , <code>mock</code> and <code>suite</code> , 接下來介紹一下這幾個 package.</p>
<h2 id="Assert-package"><a href="#Assert-package" class="headerlink" title="Assert package"></a>Assert package</h2><p><code>assert</code> package 提供一些有用的方法，讓我們寫更好的測試：</p>
<ul>
<li>Prints friendly</li>
<li>Allows for very testable code</li>
<li>Optionally annotate each assertion with a message</li>
</ul>
<p>使用範例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomething</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// assert equality</span></span><br><span class="line">    assert.Equal(t, <span class="number">123</span>, <span class="number">123</span>, <span class="string">&quot;they should be equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert inequality</span></span><br><span class="line">    assert.NotEqual(t, <span class="number">123</span>, <span class="number">456</span>, <span class="string">&quot;they should not be equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert for nil (good for errors)</span></span><br><span class="line">    assert.Nil(t, object)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert for not nil (good when you expect something)</span></span><br><span class="line">    <span class="keyword">if</span> assert.NotNil(t, object) &#123;</span><br><span class="line">        <span class="comment">// now we know that object isn&#x27;t nil, we are safe to make</span></span><br><span class="line">        <span class="comment">// further assertions without causing any errors</span></span><br><span class="line">        assert.Equal(t, <span class="string">&quot;Something&quot;</span>, object.Value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>assert</code> 會回傳 <code>boolean</code> 表示驗證成功或失敗</li>
</ul>
<p>如果需要 assert 很多次，可以改用以下寫法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomething</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    a := assert.New(t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert equality</span></span><br><span class="line">    a.Equal(<span class="number">123</span>, <span class="number">123</span>, <span class="string">&quot;they should be equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert inequality</span></span><br><span class="line">    a.NotEqual(<span class="number">123</span>, <span class="number">456</span>, <span class="string">&quot;they should not be equal&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert for nil (good for errors)</span></span><br><span class="line">    a.Nil(object)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert for not nil (good when you expect something)</span></span><br><span class="line">    <span class="keyword">if</span> a.NotNil(object) &#123;</span><br><span class="line">        <span class="comment">// now we know that object isn&#x27;t nil, we are safe to make</span></span><br><span class="line">        <span class="comment">// further assertions without causing any errors</span></span><br><span class="line">        a.Equal(<span class="string">&quot;Something&quot;</span>, object.Value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Require-package"><a href="#Require-package" class="headerlink" title="Require package"></a>Require package</h2><p><code>require</code> 和 <code>aasert</code> 很像，但是它不會回傳 <code>bool</code> , 而是會直接終止目前的測試。</p>
<h2 id="Mock-package"><a href="#Mock-package" class="headerlink" title="Mock package"></a>Mock package</h2><p><code>mock</code> package 提供了一種機制，可以方便的 mock object, 在測試時可以用來替代 real object. 使用範例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/mock&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Test objects</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MyMockedObject is a mocked object that implements an interface</span></span><br><span class="line"><span class="comment">// that describes an object that the code I am testing relies on.</span></span><br><span class="line"><span class="keyword">type</span> MyMockedObject <span class="keyword">struct</span>&#123;</span><br><span class="line">    mock.Mock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DoSomething is a method on MyMockedObject that implements some interface</span></span><br><span class="line"><span class="comment">// and just records the activity, and returns what the Mock object tells it to.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// In the real object, this method would do something useful, but since this</span></span><br><span class="line"><span class="comment">// is a mocked object - we&#x27;re just going to stub it out.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> This method is not being tested here, code that uses this object is.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MyMockedObject)</span></span> DoSomething(number <span class="type">int</span>) (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    args := m.Called(number)</span><br><span class="line">    <span class="keyword">return</span> args.Bool(<span class="number">0</span>), args.Error(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Actual test functions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TestSomething is an example of how to use our test object to</span></span><br><span class="line"><span class="comment">// make assertions about some target code we are testing.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomething</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// create an instance of our test object</span></span><br><span class="line">    testObj := <span class="built_in">new</span>(MyMockedObject)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup expectations</span></span><br><span class="line">    testObj.On(<span class="string">&quot;DoSomething&quot;</span>, <span class="number">123</span>).Return(<span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the code we are testing</span></span><br><span class="line">    targetFuncThatDoesSomethingWithObj(testObj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert that the expectations were met</span></span><br><span class="line">    testObj.AssertExpectations(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestSomethingWithPlaceholder is a second example of how to use our test object to</span></span><br><span class="line"><span class="comment">// make assertions about some target code we are testing.</span></span><br><span class="line"><span class="comment">// This time using a placeholder. Placeholders might be used when the</span></span><br><span class="line"><span class="comment">// data being passed in is normally dynamically generated and cannot be</span></span><br><span class="line"><span class="comment">// predicted beforehand (eg. containing hashes that are time sensitive)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomethingWithPlaceholder</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// create an instance of our test object</span></span><br><span class="line">    testObj := <span class="built_in">new</span>(MyMockedObject)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup expectations with a placeholder in the argument list</span></span><br><span class="line">    testObj.On(<span class="string">&quot;DoSomething&quot;</span>, mock.Anything).Return(<span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the code we are testing</span></span><br><span class="line">    targetFuncThatDoesSomethingWithObj(testObj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert that the expectations were met</span></span><br><span class="line">    testObj.AssertExpectations(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TestSomethingElse2 is a third example that shows how you can use</span></span><br><span class="line"><span class="comment">// the Unset method to cleanup handlers and then add new ones.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSomethingElse2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// create an instance of our test object</span></span><br><span class="line">    testObj := <span class="built_in">new</span>(MyMockedObject)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup expectations with a placeholder in the argument list</span></span><br><span class="line">    mockCall := testObj.On(<span class="string">&quot;DoSomething&quot;</span>, mock.Anything).Return(<span class="literal">true</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// call the code we are testing</span></span><br><span class="line">    targetFuncThatDoesSomethingWithObj(testObj)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert that the expectations were met</span></span><br><span class="line">    testObj.AssertExpectations(t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// remove the handler now so we can add another one that takes precedence</span></span><br><span class="line">    mockCall.Unset()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return false now instead of true</span></span><br><span class="line">    testObj.On(<span class="string">&quot;DoSomething&quot;</span>, mock.Anything).Return(<span class="literal">false</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    testObj.AssertExpectations(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Suite-package"><a href="#Suite-package" class="headerlink" title="Suite package"></a>Suite package</h2><p><code>suite</code> 可以幫助我們在讓每個測試案例做前置作業或後置操作， 很像是 Python 中的 <code>setUp()</code> 和 <code>tearDown()</code>.</p>
<p>使用範例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Basic imports</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;testing&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/stretchr/testify/suite&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define the suite, and absorb the built-in basic suite</span></span><br><span class="line"><span class="comment">// functionality from testify - including a T() method which</span></span><br><span class="line"><span class="comment">// returns the current testing context</span></span><br><span class="line"><span class="keyword">type</span> ExampleTestSuite <span class="keyword">struct</span> &#123;</span><br><span class="line">    suite.Suite</span><br><span class="line">    VariableThatShouldStartAtFive <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure that VariableThatShouldStartAtFive is set to five</span></span><br><span class="line"><span class="comment">// before each test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(suite *ExampleTestSuite)</span></span> SetupTest() &#123;</span><br><span class="line">    suite.VariableThatShouldStartAtFive = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All methods that begin with &quot;Test&quot; are run as tests within a</span></span><br><span class="line"><span class="comment">// suite.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(suite *ExampleTestSuite)</span></span> TestExample() &#123;</span><br><span class="line">    assert.Equal(suite.T(), <span class="number">5</span>, suite.VariableThatShouldStartAtFive)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In order for &#x27;go test&#x27; to run this suite, we need to create</span></span><br><span class="line"><span class="comment">// a normal test function and pass our suite to suite.Run</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExampleTestSuite</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    suite.Run(t, <span class="built_in">new</span>(ExampleTestSuite))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是 Testify 的簡單介紹，在我們寫程式時，記得一定要寫測試來確保我們的 code 是可以正常執行的，也能夠確保每次的改動沒有改壞原本的 code.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/stretchr/testify">Testify</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Golang</tag>
        <tag>Testify</tag>
        <tag>Unit test</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] log.Fatal v.s. panic</title>
    <url>/posts/eb4b7b31/</url>
    <content><![CDATA[<p>這陣子剛開始學習 Golang, 看了一些 tutorial, 發現有些範例會使用 <code>log.Fatal()</code> 輸出錯誤訊息，而有些會使用 <code>panic()</code>, 這篇文章先記錄一下兩者的差別，後續的 Golang 筆記再慢慢補~</p>
<span id="more"></span>

<h2 id="os-Exit"><a href="#os-Exit" class="headerlink" title="os.Exit()"></a>os.Exit()</h2><p>在比較兩者差別之前，需要先了解 <code>os.Exit()</code> 的定義：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exit</span><span class="params">(code <span class="type">int</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit causes the current program to exit with the given status code.</span></span><br><span class="line"><span class="comment">// Conventionally, code zero indicates success, non-zero an error.</span></span><br><span class="line"><span class="comment">// The program terminates immediately; deferred functions are not run.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>code &#x3D;&#x3D; 0: success</li>
<li>code !&#x3D; 0: error, program 會馬上終止，defer function 不會執行</li>
</ul>
<h2 id="log-Fatal"><a href="#log-Fatal" class="headerlink" title="log.Fatal()"></a>log.Fatal()</h2><p>Reference: <a href="https://pkg.go.dev/log#Logger.Fatal">Logger.Fatal</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Logger)</span></span> Fatal(v ...any)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).</span></span><br></pre></td></tr></table></figure>

<p><a href="https://cs.opensource.google/go/go/+/refs/tags/go1.19:src/log/log.go;l=230">Source code</a>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *Logger)</span></span> Fatal(v ...any) &#123;</span><br><span class="line">    l.Output(<span class="number">2</span>, fmt.Sprint(v...))</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 source code 中可以看到 <code>log.Fatal()</code> 會先輸出錯誤訊息，接著 call <code>os.Exit(1)</code>, 也就是會馬上終止 program, 並且不會執行 defer function.</p>
<h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><p>Reference: <a href="https://go.dev/src/builtin/builtin.go#L233">buildin.go</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The panic built-in function stops normal execution of the current</span></span><br><span class="line"><span class="comment">// goroutine. When a function F calls panic, normal execution of F stops</span></span><br><span class="line"><span class="comment">// immediately. Any functions whose execution was deferred by F are run in</span></span><br><span class="line"><span class="comment">// the usual way, and then F returns to its caller. To the caller G, the</span></span><br><span class="line"><span class="comment">// invocation of F then behaves like a call to panic, terminating G&#x27;s</span></span><br><span class="line"><span class="comment">// execution and running any deferred functions. This continues until all</span></span><br><span class="line"><span class="comment">// functions in the executing goroutine have stopped, in reverse order. At</span></span><br><span class="line"><span class="comment">// that point, the program is terminated with a non-zero exit code. This</span></span><br><span class="line"><span class="comment">// termination sequence is called panicking and can be controlled by the</span></span><br><span class="line"><span class="comment">// built-in function recover.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panic</span><span class="params">(v any)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>function F 會馬上終止</li>
<li>defer function 被執行</li>
<li>Return to caller G</li>
<li>To the caller G, call F() 就像 call panic(), 因此進行：<ul>
<li>終止 G 的執行</li>
<li>執行 defer functions</li>
<li>Return to G’s caller</li>
</ul>
</li>
<li>持續進行上個步驟，直到最上層的 function, 此時 program 會終止</li>
</ul>
<p>以上整個流程叫做 panicking, 而可以透過 recover 來調控 panicking 的流程。</p>
<h2 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h2><p>panic and recover 類似 C++&#x2F;Java&#x2F;Python 中的 try catch. recover 就是用來調控 panicking 流程，如果發生了 panic, 而我們需要做一些處理，就可以使用 <code>recover()</code>, recover 必須在被 defer 的 function 中執行才有效果，如果在被 defer 的 function 外執行， recover 一定是回傳 <code>nil</code>.</p>
<p>用法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(err)</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// panic blocks</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h2><p>上面提到的 <code>defer</code> function 是指可以使用 <code>defer</code> 指定某個 function 延遲執行，會延遲到 main function return 之前再執行，for example:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferredFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;deferredFunc&quot;</span>)    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> deferredFunc()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們在 <code>deferredFunc()</code> 前加上 <code>defer</code>，因此它會在 <code>main()</code> return 前執行，所以執行結果會是先顯示 “Hello, world!”，才顯示 “deferredFunc”。</p>
<p>如果有多個 <code>defer</code> functions, 在 main function return 前，會依 defer 的相反順序執行，也就是 LIFO.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.jianshu.com/p/f85ecae6e7df">https://www.jianshu.com/p/f85ecae6e7df</a></li>
<li><a href="https://babygoat.github.io/2019/05/04/Golang-log-Panic-v-s-log-Fatal/">https://babygoat.github.io/2019/05/04/Golang-log-Panic-v-s-log-Fatal/</a></li>
<li><a href="https://easonwang.gitbook.io/golang/ji-ben-yu-fa/panic-recover">https://easonwang.gitbook.io/golang/ji-ben-yu-fa/panic-recover</a></li>
<li><a href="https://openhome.cc/Gossip/Go/DeferPanicRecover.html">https://openhome.cc/Gossip/Go/DeferPanicRecover.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] 《精通 Go 程式設計》- 基本資料型別 閱讀筆記</title>
    <url>/posts/21f37274/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cf-assets1.tenlong.com.tw/images/111035/original/ACL047300.jpg" alt="The Go Programming Language"></p>
<p>這一篇文章是《精通 Go 程式設計》(The Go Programming Language) - 第三章「基本資料型別」的閱讀筆記。</p>
<span id="more"></span>

<h2 id="Ch3-基本資料型別"><a href="#Ch3-基本資料型別" class="headerlink" title="Ch3. 基本資料型別"></a>Ch3. 基本資料型別</h2><p>包含：數字、字串和布林。</p>
<h3 id="3-1-整數"><a href="#3-1-整數" class="headerlink" title="3.1 整數"></a>3.1 整數</h3><ul>
<li>帶正負號的整數有四種大小：8, 16, 32 和 64 位元，分別是 <code>int8</code>, <code>int16</code>, <code>int32</code> 和 <code>int64</code>，對應的無正負號型別是 <code>uint8</code>, <code>uint16</code>, <code>uint32</code> 和 <code>uint64</code>. 另外還有 <code>int</code> 和 <code>uint</code> 是特定平台上自然且大小最有效率的有正負號及無正負號整數。</li>
<li><code>rune</code> 是 <code>int32</code> 的同義詞，用來只是該值為 Unicode, 兩者名稱可以交換使用。</li>
<li><code>byte</code> 為 <code>uint8</code> 同義詞，強調該值為原始資料而非數值。</li>
<li>無正負號型別 <code>uintptr</code>, 它的大小並未指定，但足夠保存指標值的所有位元。只用於低階程式設計，例如 Go 和 C library 或 OS 的介接。</li>
<li>帶正負號的數字以 2 補位的形式表示，其最高位元保留給正負號且 n 位元數字值的範圍是 -2<sup>n-1</sup> ~ 2<sup>n-1</sup>-1, Ex.<ul>
<li><code>int8</code>: -128 ~ 127</li>
<li><code>uint8</code>: 0 ~ 255</li>
</ul>
</li>
</ul>
<h4 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h4><p>二進位運算子只有五層優先順序，同一層的運算子以左邊優先：</p>
<ol>
<li><code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>&amp;^</code></li>
<li><code>+</code>, <code>-</code>, <code>|</code>, <code>^</code></li>
<li><code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code></li>
<li><code>&amp;&amp;</code></li>
<li><code>||</code></li>
</ol>
<ul>
<li><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 等數學運算子可以用在整數、浮點數和複數，但 <code>%</code> 只能用在整數。</p>
</li>
<li><p>在 Go 中，餘數的正負號和被除數相同，例如：<code>-5%3</code> 和 <code>-5%-3</code> 都是 -2.</p>
</li>
<li><p><code>/</code> 的行為視運算子是否為整數而定，例如：<code>5.0/4.0 = 1.25</code>, 但 <code>5/4 = 1</code>.</p>
</li>
<li><p>Overflow: 若數學運算的結果超過結果型別的範圍，則為 Overflow, 容不下的最高位元會被拋棄。如果原始數值是有正負號的型別，則最左為元為1時會變為負數，範例：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u <span class="type">uint8</span> = <span class="number">255</span></span><br><span class="line">fmt.Println(u, u+<span class="number">1</span>, u*u)    <span class="comment">// 255 0 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int8</span> = <span class="number">127</span></span><br><span class="line">fmt.Println(i, i+<span class="number">1</span>, i*i)    <span class="comment">// 127 -128 1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h5><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>相等</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>不相等</td>
</tr>
<tr>
<td>&lt;</td>
<td>小於</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>小於或等於</td>
</tr>
<tr>
<td>&gt;</td>
<td>大於</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>大於或等於</td>
</tr>
</tbody></table>
<ul>
<li>相同型別的基本型別（布林、數字與字串）都是可以比較的</li>
<li>比較運算式的型別為布林</li>
</ul>
<h5 id="二進位運算子"><a href="#二進位運算子" class="headerlink" title="二進位運算子"></a>二進位運算子</h5><table>
<thead>
<tr>
<th>Operator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>位元 AND</td>
</tr>
<tr>
<td>|</td>
<td>位元 OR</td>
</tr>
<tr>
<td>^</td>
<td>位元 XOR</td>
</tr>
<tr>
<td>&amp;^</td>
<td>位元清除 (AND NOT)</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左位移</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右位移</td>
</tr>
</tbody></table>
<p>範例： <code>uint8</code> 位元操作，使用 <code>Printf</code> <code>%b</code> 來顯示二進位</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">uint8</span> = <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">uint8</span> = <span class="number">1</span>&lt;&lt;<span class="number">1</span> | <span class="number">1</span>&lt;&lt;<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x)		<span class="comment">// 00100010, &#123;1,5&#125; 的集合</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, y)		<span class="comment">// 00000110, &#123;1,2&#125; 的集合</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&amp;y)	<span class="comment">// 00000010, 交集</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x|y)	<span class="comment">// 00100110, 聯集</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x^y)	<span class="comment">// 00100100, 對稱差 &#123;2,5&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&amp;^y)	<span class="comment">// 00100000, 差 &#123;5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:= <span class="type">uint</span>(<span class="number">0</span>); i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> x&amp;(<span class="number">1</span>&lt;&lt;i) != <span class="number">0</span> &#123;	<span class="comment">// 成員測試</span></span><br><span class="line">        fmt.Println(i)	<span class="comment">// 1 5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&lt;&lt;<span class="number">1</span>)	<span class="comment">// 01000100, &#123;2,6&#125; 的集合</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%08b\n&quot;</span>, x&gt;&gt;<span class="number">1</span>)	<span class="comment">// 00010001, &#123;0,4&#125; 的集合</span></span><br></pre></td></tr></table></figure>

<h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><ul>
<li>不同型別必須有明確的轉換</li>
<li>數學與邏輯（除了位移之外）的二進位運算子的運算元必須是相同型別</li>
</ul>
<p>範例：</p>
<ul>
<li><p>Compile error</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> apples <span class="type">int32</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> oranges <span class="type">int16</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> compote <span class="type">int</span> = apples + oranges <span class="comment">// Compile error</span></span><br></pre></td></tr></table></figure>

<p>  Solution:</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> compote <span class="type">int</span> = <span class="type">int</span>(apples) + <span class="type">int</span>(oranges)</span><br></pre></td></tr></table></figure>
</li>
<li><p>浮點數轉換</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := <span class="number">3.141</span>  <span class="comment">// float64</span></span><br><span class="line">i := <span class="type">int</span>(f)</span><br><span class="line">fmt.Println(f, i)   <span class="comment">// 3.141 3</span></span><br><span class="line"></span><br><span class="line">f = <span class="number">1.99</span></span><br><span class="line">fmt.Println(<span class="type">int</span>(f)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>  要避免超過目標型別的轉換，因為他的結果會取決於實作：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := <span class="number">1e100</span></span><br><span class="line">i := <span class="type">int</span>(f)  <span class="comment">// 結果視實作而定</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>十進位、八進位、十六進位</p>
<ul>
<li><p>八進位數字以0開頭，十六進位以0x或0X開頭</p>
</li>
<li><p>可以使用 <code>%d</code>, <code>%o</code> 或 <code>%x</code> 控制底數與格式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">o := <span class="number">0666</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]o %#[1]o\n&quot;</span>, o)      <span class="comment">// 438 666 0666</span></span><br><span class="line"></span><br><span class="line">x := <span class="type">int64</span>(<span class="number">0xdeadbeef</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]x %#[1]x %#[1]X&quot;</span>, x) <span class="comment">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>rune</code></p>
<ul>
<li><p>單引號字元，ex. <code>&#39;a&#39;</code></p>
</li>
<li><p>以 <code>%c</code> 或 <code>%q</code>（加引號）輸出</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ascii := <span class="string">&#x27;a&#x27;</span></span><br><span class="line">unicode := <span class="string">&#x27;国&#x27;</span></span><br><span class="line">newline := <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]c %[1]q\n&quot;</span>, ascii)   <span class="comment">// 97 a &#x27;a&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]c %[1]q\n&quot;</span>, unicode) <span class="comment">// 22269 国 &#x27;国&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d %[1]q\n&quot;</span>, newline)       <span class="comment">// 10 &#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-2-浮點數"><a href="#3-2-浮點數" class="headerlink" title="3.2 浮點數"></a>3.2 浮點數</h3><p>包含 <code>float32</code> 和 <code>float64</code>.</p>
<ul>
<li><p><code>float32</code></p>
<ul>
<li>最大值約為 3.4e48, 最小值約為 1.4e-45</li>
<li>提供小數點以下六位數的精確度</li>
</ul>
</li>
<li><p><code>float64</code></p>
<ul>
<li>最大值約為 1.8e038, 最小值約為 4.9e324</li>
<li>提供小數點以下15位數的精確度</li>
<li>適合大部分用途</li>
</ul>
</li>
<li><p>非常大或非常小的數值建議以科學記號表示，ex. <code>6.02214129e23</code>, <code>6.62606957e-34</code></p>
</li>
<li><p>通常以 <code>%g</code> 輸出，他會選擇適合精確度的最精簡表示，也可以使用 <code>%e</code> (指數)或 <code>%f</code> (無指數)，這三種修飾詞可以控制欄寬與數值精確度</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; <span class="number">8</span>; x++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x = %d e^x = %8.3f\n&quot;</span>, x, math.Exp(<span class="type">float64</span>(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  Output:</p>
  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">x = 0 e^x =    1.000</span><br><span class="line">x = 1 e^x =    2.718</span><br><span class="line">x = 2 e^x =    7.389</span><br><span class="line">x = 3 e^x =   20.086</span><br><span class="line">x = 4 e^x =   54.598</span><br><span class="line">x = 5 e^x =  148.413</span><br><span class="line">x = 6 e^x =  403.429</span><br><span class="line">x = 7 e^x = 1096.633</span><br></pre></td></tr></table></figure>
</li>
<li><p>特殊值</p>
<ul>
<li><p><code>+Inf</code>: 正無限大</p>
</li>
<li><p><code>-Inf</code>: 負無限大</p>
</li>
<li><p><code>NaN</code>: Not a number</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> z <span class="type">float64</span></span><br><span class="line">fmt.Println(z, -z, <span class="number">1</span>/z, <span class="number">-1</span>/z, z/z)  <span class="comment">// 0 -0 +Inf -Inf NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>math.IsNaN</code> 測試參數是否不是數字，<code>math.NaN</code> 回傳這樣的值，但測試特定運算結果是否等於 NaN 是很危險的事，因為與 NaN 的比較永遠是 false:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">nan := math.NaN()</span><br><span class="line">fmt.Println(nan == nan, nan &lt; nan, nan &gt; nan)   <span class="comment">// false false false</span></span><br></pre></td></tr></table></figure>

<p>如果回傳浮點數結果的函式有可能失敗，最好獨立回傳該失敗。</p>
</li>
</ul>
</li>
</ul>
<h4 id="範例-浮點數圖形運算"><a href="#範例-浮點數圖形運算" class="headerlink" title="範例: 浮點數圖形運算"></a>範例: 浮點數圖形運算</h4><p>以 SVG 繪製 3D 圖：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	width, height = <span class="number">600</span>, <span class="number">320</span>            <span class="comment">// 畫布尺寸</span></span><br><span class="line">	cells         = <span class="number">100</span>                 <span class="comment">// 格數量</span></span><br><span class="line">	xyrange       = <span class="number">30.0</span>                <span class="comment">// 軸範圍 (-xyrange..+xyrange)</span></span><br><span class="line">	xyscale       = width / <span class="number">2</span> / xyrange <span class="comment">// x 或 y 單位像素</span></span><br><span class="line">	zscale        = height * <span class="number">0.4</span>        <span class="comment">// z 單位像素</span></span><br><span class="line">	angle         = math.Pi / <span class="number">6</span>         <span class="comment">// x, y 角度(30°)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sin30, cos30 = math.Sin(angle), math.Cos(angle) <span class="comment">// sin(30°), cos(30°)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; &quot;</span>+</span><br><span class="line">		<span class="string">&quot;style=&#x27;stroke: grey; fill: white; stroke-width: 0.7&#x27; &quot;</span>+</span><br><span class="line">		<span class="string">&quot;width=&#x27;%d&#x27; height=&#x27;%d&#x27;&gt;&quot;</span>, width, height)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; cells; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; cells; j++ &#123;</span><br><span class="line">			ax, ay := corner(i+<span class="number">1</span>, j)</span><br><span class="line">			bx, by := corner(i, j)</span><br><span class="line">			cx, cy := corner(i, j+<span class="number">1</span>)</span><br><span class="line">			dx, dy := corner(i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;&lt;polygon points=&#x27;%g,%g %g,%g %g,%g %g,%g&#x27;/&gt;\n&quot;</span>,</span><br><span class="line">				ax, ay, bx, by, cx, cy, dx, dy)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;&lt;/svg&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">corner</span><span class="params">(i, j <span class="type">int</span>)</span></span> (<span class="type">float64</span>, <span class="type">float64</span>) &#123;</span><br><span class="line">	<span class="comment">// 找出(i,j)格的點(x,y)</span></span><br><span class="line">	x := xyrange * (<span class="type">float64</span>(i)/cells - <span class="number">0.5</span>)</span><br><span class="line">	y := xyrange * (<span class="type">float64</span>(j)/cells - <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 計算 z 高度</span></span><br><span class="line">	z := f(x, y)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 投射 (x,y,z) 到 2D 畫布 (sx, sy)</span></span><br><span class="line">	sx := width/<span class="number">2</span> + (x-y)*cos30*xyscale</span><br><span class="line">	sy := height/<span class="number">2</span> + (x+y)*sin30*xyscale - z*zscale</span><br><span class="line">	<span class="keyword">return</span> sx, sy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x, y <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	r := math.Hypot(x, y) <span class="comment">// 與(0,0)的距離</span></span><br><span class="line">	<span class="keyword">return</span> math.Sin(r) / r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<p><img src="https://i.imgur.com/Z239YrD.png" alt="3-2"></p>
<h3 id="3-3-複數"><a href="#3-3-複數" class="headerlink" title="3.3 複數"></a>3.3 複數</h3><p>包含 <code>complex64</code> 和 <code>complex128</code>.</p>
<ul>
<li><p>內建的 complex 函式從實數與虛數建構出複數，而內建的 real 和 imag 函式提取這些元件：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>)    <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>)    <span class="comment">// 3+4i</span></span><br><span class="line"></span><br><span class="line">fmt.Println(x*y)                    <span class="comment">// -5+10i</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y))              <span class="comment">// -5</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y))              <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<p>  上面的宣告也可以簡化為：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">y := <span class="number">3</span> + <span class="number">4i</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>複數可以使用 <code>==</code> 或 <code>!=</code> 進行比較，如果兩個複數的實數和虛數都相等，則兩複數相等。</p>
</li>
<li><p><code>math/cmplx</code> 提供操作複數的函式，例如：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(cmplx.Sqrt(<span class="number">-1</span>)) <span class="comment">// 0+1i</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="範例-產生曼德博碎形-PNG-圖"><a href="#範例-產生曼德博碎形-PNG-圖" class="headerlink" title="範例: 產生曼德博碎形 PNG 圖"></a>範例: 產生曼德博碎形 PNG 圖</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;image&quot;</span></span><br><span class="line">	<span class="string">&quot;image/color&quot;</span></span><br><span class="line">	<span class="string">&quot;image/png&quot;</span></span><br><span class="line">	<span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		xmin, ymin, xmax, ymax = <span class="number">-2</span>, <span class="number">-2</span>, +<span class="number">2</span>, +<span class="number">2</span></span><br><span class="line">		width, height          = <span class="number">1024</span>, <span class="number">1024</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	img := image.NewRGBA(image.Rect(<span class="number">0</span>, <span class="number">0</span>, width, height))</span><br><span class="line">	<span class="keyword">for</span> py := <span class="number">0</span>; py &lt; height; py++ &#123;</span><br><span class="line">		y := <span class="type">float64</span>(py)/height*(ymax-ymin) + ymin</span><br><span class="line">		<span class="keyword">for</span> px := <span class="number">0</span>; px &lt; width; px++ &#123;</span><br><span class="line">			x := <span class="type">float64</span>(px)/width*(xmax-xmin) + xmin</span><br><span class="line">			z := <span class="built_in">complex</span>(x, y)</span><br><span class="line">			<span class="comment">// Image point (px, py) represents complex value z.</span></span><br><span class="line">			img.Set(px, py, mandelbrot(z))</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	png.Encode(os.Stdout, img) <span class="comment">// <span class="doctag">NOTE:</span> ignoring errors</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mandelbrot</span><span class="params">(z <span class="type">complex128</span>)</span></span> color.Color &#123;</span><br><span class="line">	<span class="keyword">const</span> iterations = <span class="number">200</span></span><br><span class="line">	<span class="keyword">const</span> contrast = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> v <span class="type">complex128</span></span><br><span class="line">	<span class="keyword">for</span> n := <span class="type">uint8</span>(<span class="number">0</span>); n &lt; iterations; n++ &#123;</span><br><span class="line">		v = v*v + z</span><br><span class="line">		<span class="keyword">if</span> cmplx.Abs(v) &gt; <span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> color.Gray&#123;<span class="number">255</span> - contrast*n&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> color.Black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//!-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Some other interesting functions:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">acos</span><span class="params">(z <span class="type">complex128</span>)</span></span> color.Color &#123;</span><br><span class="line">	v := cmplx.Acos(z)</span><br><span class="line">	blue := <span class="type">uint8</span>(<span class="built_in">real</span>(v)*<span class="number">128</span>) + <span class="number">127</span></span><br><span class="line">	red := <span class="type">uint8</span>(<span class="built_in">imag</span>(v)*<span class="number">128</span>) + <span class="number">127</span></span><br><span class="line">	<span class="keyword">return</span> color.YCbCr&#123;<span class="number">192</span>, blue, red&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(z <span class="type">complex128</span>)</span></span> color.Color &#123;</span><br><span class="line">	v := cmplx.Sqrt(z)</span><br><span class="line">	blue := <span class="type">uint8</span>(<span class="built_in">real</span>(v)*<span class="number">128</span>) + <span class="number">127</span></span><br><span class="line">	red := <span class="type">uint8</span>(<span class="built_in">imag</span>(v)*<span class="number">128</span>) + <span class="number">127</span></span><br><span class="line">	<span class="keyword">return</span> color.YCbCr&#123;<span class="number">128</span>, blue, red&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// f(x) = x^4 - 1</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// z&#x27; = z - f(z)/f&#x27;(z)</span></span><br><span class="line"><span class="comment">//    = z - (z^4 - 1) / (4 * z^3)</span></span><br><span class="line"><span class="comment">//    = z - (z - 1/z^3) / 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newton</span><span class="params">(z <span class="type">complex128</span>)</span></span> color.Color &#123;</span><br><span class="line">	<span class="keyword">const</span> iterations = <span class="number">37</span></span><br><span class="line">	<span class="keyword">const</span> contrast = <span class="number">7</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="type">uint8</span>(<span class="number">0</span>); i &lt; iterations; i++ &#123;</span><br><span class="line">		z -= (z - <span class="number">1</span>/(z*z*z)) / <span class="number">4</span></span><br><span class="line">		<span class="keyword">if</span> cmplx.Abs(z*z*z*z<span class="number">-1</span>) &lt; <span class="number">1e-6</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> color.Gray&#123;<span class="number">255</span> - contrast*i&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> color.Black</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Output:</p>
<p><img src="https://i.imgur.com/9seMKVZ.png" alt="3-3"></p>
<h3 id="3-4-布林"><a href="#3-4-布林" class="headerlink" title="3.4 布林"></a>3.4 布林</h3><ul>
<li><p>布林值只有兩種可能的值：<code>true</code> or <code>false</code>.</p>
</li>
<li><p><code>if</code> 和 <code>for</code> 陳述的條件為布林，<code>==</code> 與 <code>&lt;</code> 等比較運算子也產生布林結果。</p>
</li>
<li><p>布林值可以與 <code>&amp;&amp;</code> (AND) 和 <code>||</code> (OR) 組合，它具有<strong>短路</strong>行為，如果答案已由左運算元決定，則不會進行右運算式，讓如下運算式可安全撰寫：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s != <span class="string">&quot;&quot;</span> &amp;&amp; s[<span class="number">0</span>] == <span class="string">&#x27;x&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由於 <code>&amp;&amp;</code> 的優先序比 <code>||</code> 高，下列形式的條件式不需要括號：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span> ||</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span> ||</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5-字串"><a href="#3-5-字串" class="headerlink" title="3.5 字串"></a>3.5 字串</h3><ul>
<li><p>字串是不可變的一系列位元組，可以帶有任何資料，包括值為 0 的位元組，但通常會帶有可讀的文字。</p>
</li>
<li><p><code>len</code> 函式回傳字串中位元組數量，索引操作 <code>s[i]</code> 讀取字串 s 的第 i 個位元組 (<code>0 &lt;= i &lt; len(s)</code>)</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s))     <span class="comment">// 12</span></span><br><span class="line">fmt.Println(s[<span class="number">0</span>], s[<span class="number">7</span>]) <span class="comment">// 104 119 (&#x27;h&#x27; and &#x27;w&#x27;)</span></span><br><span class="line"></span><br><span class="line">c := s[<span class="built_in">len</span>(s)]          <span class="comment">// panic</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字串的第 i 個位元組不一定是第 i 字元，因為 UTF-8 編碼對非 ASCII 碼位需要兩個或以上的位元組。</p>
</li>
<li><p>子字串 <code>s[i:j]</code> 可產生從原始字串index i 到 j (不含 j)之間的位元組，結果帶有 j-i 個位元組。若超出範圍或 j &lt; i 則會引發 panic.</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment">// hello</span></span><br></pre></td></tr></table></figure>

<p>  i, j 運算元省略時，會以預設值 0 和 <code>len(s)</code> 代替：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(s[:<span class="number">5</span>])  <span class="comment">// hello</span></span><br><span class="line">fmt.Println(s[<span class="number">7</span>:])  <span class="comment">// world</span></span><br><span class="line">fmt.Println(s[:])   <span class="comment">// hello, world</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可用 <code>+</code> 連接兩字串以產生新字串</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;goodbye&quot;</span> + s[<span class="number">5</span>:]) <span class="comment">// goodbye, world</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可用 <code>==</code>, <code>&lt;</code> 等運算子進行比較，比較是逐位元組進行。</p>
</li>
<li><p>字串值不可變：字串值的位元組序不可改變，但可以指派新值給字串變數</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;left foot&quot;</span></span><br><span class="line">t := s</span><br><span class="line">s += <span class="string">&quot;, right foot&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)  <span class="comment">// left foot, right foot</span></span><br><span class="line">fmt.Println(t)  <span class="comment">// left foot</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可直接修改字串中的位元組</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;L&#x27;</span>      <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-5-1-字串實字"><a href="#3-5-1-字串實字" class="headerlink" title="3.5.1 字串實字"></a>3.5.1 字串實字</h4><ul>
<li><p>字串值可以寫成<strong>字串實字</strong>, Ex. <code>&quot;Hello, 世界&quot;</code></p>
</li>
<li><p>Go 以 UTF-8 編碼，且字串通常以 UTF-8 解譯，我們可以在字串中用 Unicode 碼位，以反斜線 <code>\</code> 開頭的跳脫字符可以用來插入任意位元組值。</p>
<p>  常見的 ASCII 控制碼：</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警告或響鈴</td>
</tr>
<tr>
<td>\b</td>
<td>後退</td>
</tr>
<tr>
<td>\f</td>
<td>跳頁</td>
</tr>
<tr>
<td>\n</td>
<td>換行</td>
</tr>
<tr>
<td>\r</td>
<td>carriage return</td>
</tr>
<tr>
<td>\t</td>
<td>Tab</td>
</tr>
<tr>
<td>\v</td>
<td>垂直 Tab</td>
</tr>
<tr>
<td>\‘</td>
<td>單引號</td>
</tr>
<tr>
<td>\“</td>
<td>雙引號</td>
</tr>
<tr>
<td>\\</td>
<td>反斜線</td>
</tr>
</tbody></table>
<p>  也可以用八進位或十六進位跳脫引入任意字元組：</p>
<ul>
<li><code>\ooo</code>: 八進位數字，包含三個八進位數字 (0~7)，但不能超過 <code>\377</code> (對應一個字元的範圍)</li>
<li><code>\xhh</code>: 十六進位數字，h 表示十六進位數字</li>
</ul>
</li>
<li><p>使用 &#96; 反引號取代雙引號，跳脫字符不會被處理，會採用實際內容，也可以將字串分多行。</p>
</li>
</ul>
<h4 id="3-5-2-Unicode"><a href="#3-5-2-Unicode" class="headerlink" title="3.5.2 Unicode"></a>3.5.2 Unicode</h4><ul>
<li>檔案是 Unicode, 它集合世上所有撰寫系統，加上各種符號與控制碼，並為每一個字符指派一個 Unicode 碼位，在 Go 中稱為 <code>rune</code>.</li>
<li>第八版定義 100 個以上的語言超過 120,000 個字元碼位，保存單一 <code>rune</code> 的自然資料型別為 <code>int32</code>, Go 也是使用它。我們也可以將一系列的 <code>rune</code> 以一系列的 <code>int32</code> 值來表示。</li>
<li>在這種被稱為 UTF-32 或 UCS-4 的表示中，每個 Unicode 碼位的大小均為 32 位元，但由於大部分電腦上可讀的文字都是每個字元只要 8 位元或一個位元組的 ASCII 而比所需佔用了更多。</li>
</ul>
<h4 id="3-5-3-UTF-8"><a href="#3-5-3-UTF-8" class="headerlink" title="3.5.3 UTF-8"></a>3.5.3 UTF-8</h4><ul>
<li><p>UTF-8 是 Unicode 碼位的可變長度位元組編碼。</p>
</li>
<li><p>它使用 1 ~ 4 個位元組來表示每個 rune, 但對於 ASCII 字元只使用一個位元，一般的 rune 也只使用 2 或 3 個位元組。</p>
</li>
<li><p>此編碼的 rune 的第一個位元組的高位位元表示後面有多少個位元組</p>
<ul>
<li><p>高位 0 表示 7 位元的 ASCII, 每個 rune 只佔用一個位元組，與傳統 ASCII 相同</p>
</li>
<li><p>高位 110 表示該 rune 佔用 2 個位元組，第二個位元組以 10 開頭</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>0xxxxxxx</td>
<td>runes 0-127 (ASCII)</td>
</tr>
<tr>
<td>110xxxxx 10xxxxxx</td>
<td>128-2047 (值 &lt; 128 未使用)</td>
</tr>
<tr>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
<td>2048-65535 (值 &lt; 2048 未使用)</td>
</tr>
<tr>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
<td>65536-0x10ffff (其他值未使用)</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>可變長度編碼使得字串的第 n 個字元無法直接以索引存取，但 UTF-8 有許多特性可以補償。</p>
<ul>
<li>它的編碼緊湊，與 ASCII 相容，並自我同步：不超過三個位元組就可以找到字元的開頭位置。</li>
<li>它也是前綴碼，所以可以從左邊開始解碼而沒有混編或前置作業。</li>
<li>rune 的編碼不會有其他子串列或其他序列，所以可以只靠搜尋位元組來找尋 rune, 不用擔心前面的內容。</li>
<li>字典位元組排序與 Unicode 碼位順序相同，因此 UTF-8 的排序一樣自然。</li>
<li>它沒有嵌入 NUL 位元組，對使用 NUL 借數字串的程式語言很方便。</li>
</ul>
</li>
<li><p>Go 原始檔是以 UTF-8 編碼，且 UTF-8 是 Go 程式偏好的文字操作編碼。</p>
</li>
<li><p>Go 的字串實字的 Unicode 跳脫讓我們可以用數值碼位值來指定，有兩種形式：(h 代表十六進位數字)</p>
<ul>
<li><p><code>\uhhhh</code>: 16 位元值</p>
</li>
<li><p><code>\Uhhhhhhhh</code>: 32 位元值 (較罕見)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下值都相同</span></span><br><span class="line"><span class="string">&quot;世界&quot;</span></span><br><span class="line"><span class="string">&quot;\xe4\xb8\x96\xe7\x95\x8c&quot;</span></span><br><span class="line"><span class="string">&quot;\u4e16\u754c&quot;</span></span><br><span class="line"><span class="string">&quot;\U00004e16\U0000754c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;世&#x27;</span></span><br><span class="line"><span class="string">&#x27;\u4e16&#x27;</span></span><br><span class="line"><span class="string">&#x27;\U00004e16&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>因為 UTF-8 的特性，在許多字串操作時不需要解碼，以下範例：</p>
<ul>
<li><p>檢查 Prefix:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s) &gt;= <span class="built_in">len</span>(prefix) &amp;&amp; s[:<span class="built_in">len</span>(prefix)] == prefix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>檢查 Suffix:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, suffix <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s) &gt;= <span class="built_in">len</span>(suffix) &amp;&amp; s[<span class="built_in">len</span>(s) - <span class="built_in">len</span>(suffix):] == suffix</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>檢查子字串:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> HasPrefix(s[i:], substr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>若真的關心個別 Unicode 字元，則可以使用其他處理方式</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;Hello, 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s))                     <span class="comment">// 13</span></span><br><span class="line">fmt.Println(utf8.RuneCountInString(s))  <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">    r, size := utf8.DecodeRuneInString(s[i:])   <span class="comment">// r: rune, size: UTF-8 所佔的位元組數量</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;%d\t%c\n&quot;</span>, i, r)</span><br><span class="line">    i += size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  不過 Go 的 range 迴圈在套用於字串時會解決執行 UTF-8 解碼。</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, r := <span class="keyword">range</span> s &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\t%q\t%d\n&quot;</span>, i, r, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output:</span></span><br><span class="line"><span class="comment">0	&#x27;H&#x27;	72</span></span><br><span class="line"><span class="comment">1	&#x27;e&#x27;	101</span></span><br><span class="line"><span class="comment">2	&#x27;l&#x27;	108</span></span><br><span class="line"><span class="comment">3	&#x27;l&#x27;	108</span></span><br><span class="line"><span class="comment">4	&#x27;o&#x27;	111</span></span><br><span class="line"><span class="comment">5	&#x27;,&#x27;	44</span></span><br><span class="line"><span class="comment">6	&#x27; &#x27;	32</span></span><br><span class="line"><span class="comment">7	&#x27;世&#x27;	19990</span></span><br><span class="line"><span class="comment">10	&#x27;界&#x27;	30028</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>  計算 rune 數量：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, _ = <span class="keyword">range</span> s &#123;</span><br><span class="line">    n++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略不需要的變數</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> s &#123;</span><br><span class="line">    n ++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也能呼叫 utf8.RuneCountInString(s)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-5-4-字串與位元組-slice"><a href="#3-5-4-字串與位元組-slice" class="headerlink" title="3.5.4 字串與位元組 slice"></a>3.5.4 字串與位元組 slice</h4><p>操作字串的四個重要套件：bytes, strings, strconv 和 unicode.</p>
<ul>
<li>strings: 提供許多搜尋、替換、比較、截空白、分割與連接字串的函式。</li>
<li>bytes: 有類似的函式來操作 <code>[]bytes</code> 的位元組 slice, 它與字串有些相同的特性。</li>
<li>strconv: 提供布林、整數以及浮點數值與字串間的轉換，還有加引號和去引號的函式。</li>
<li>unicode: 提供 <code>IsDigit</code>, <code>IsLetter</code>, <code>IsUpper</code> 和 <code>IsLower</code> 等函式。<ul>
<li><code>ToUpper</code> 和 <code>ToLower</code> 將 rune 轉換大小寫。(strings 套件也有類似的函式，也稱為 <code>ToUpper</code> 和 <code>ToLower</code>, 將原始字串的每個字元都做相應的轉換，然後回傳新的字串)</li>
</ul>
</li>
</ul>
<h5 id="範例-Basename"><a href="#範例-Basename" class="headerlink" title="範例: Basename"></a>範例: Basename</h5><p>此範例是實作移除路徑與副檔名，第一版為未使用 library:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    input := bufio.NewScanner(os.Stdin)</span><br><span class="line">    <span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">        fmt.Println(basename(input.Text()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除路徑與副檔名</span></span><br><span class="line"><span class="comment">// e.g., a =&gt; a, a.go =&gt; a, a/b/c.go =&gt; c, a/b.c.go =&gt; b.c</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basename</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">// 移除最後一個 &#x27;/&#x27; 與之前的所有東西</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;/&#x27;</span> &#123;</span><br><span class="line">            s = s[i+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保留最後一個 &#x27;.&#x27; 之前的所有東西</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">            s = s[:i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 strings library:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	input := bufio.NewScanner(os.Stdin)</span><br><span class="line">	<span class="keyword">for</span> input.Scan() &#123;</span><br><span class="line">		fmt.Println(basename(input.Text()))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// <span class="doctag">NOTE:</span> ignoring potential errors from input.Err()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// basename removes directory components and a trailing .suffix.</span></span><br><span class="line"><span class="comment">// e.g., a =&gt; a, a.go =&gt; a, a/b/c.go =&gt; c, a/b.c.go =&gt; b.c</span></span><br><span class="line"><span class="comment">//!+</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">basename</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	slash := strings.LastIndex(s, <span class="string">&quot;/&quot;</span>) <span class="comment">// -1 if &quot;/&quot; not found</span></span><br><span class="line">	s = s[slash+<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">if</span> dot := strings.LastIndex(s, <span class="string">&quot;.&quot;</span>); dot &gt;= <span class="number">0</span> &#123;</span><br><span class="line">		s = s[:dot]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="範例-插入逗號"><a href="#範例-插入逗號" class="headerlink" title="範例: 插入逗號"></a>範例: 插入逗號</h5><p>將整數字串每三個插入逗號：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(os.Args); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;  %s\n&quot;</span>, comma(os.Args[i]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// comma inserts commas in a non-negative decimal integer string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">comma</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(s)</span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">3</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> s</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> comma(s[:n<span class="number">-3</span>]) + <span class="string">&quot;,&quot;</span> + s[n<span class="number">-3</span>:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="範例-Printints"><a href="#範例-Printints" class="headerlink" title="範例: Printints"></a>範例: Printints</h5><ul>
<li><p>字串創建後不可變，相對的 byte slice 可以自由修改。</p>
</li>
<li><p>字串和 byte slice 之間可以互相轉換：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">&quot;abc&quot;</span></span><br><span class="line">b := []<span class="type">byte</span>(s)</span><br><span class="line">s2 := <span class="type">string</span>(b)</span><br></pre></td></tr></table></figure>

<p>概念上，[]byte(s)轉換會分配保存 s 的位元組拷貝的新位元組陣列並產生參考該陣列的 slice。最佳化的編譯器或許能夠在某些情況下避免分配與複製，但一般來說複製是必要的，以確保 s 的位元組在之後 b 被修改時還能維持不變。使用 string(b) 將 byte slice 轉換回字串也會製作拷貝，以確保結果 s2 不可變。</p>
<p>為了避免轉換與不必要的記憶體分配，bytes 套件和 strings 套件同時提供了許多實用函數。下面是strings包中的六個函式：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s <span class="type">string</span>)</span></span> []<span class="type">string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix <span class="type">string</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep <span class="type">string</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(a []<span class="type">string</span>, sep <span class="type">string</span>)</span></span> <span class="type">string</span></span><br></pre></td></tr></table></figure>

<p>bytes 套件中也有相對應的函式：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(b, subslice []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Count</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fields</span><span class="params">(s []<span class="type">byte</span>)</span></span> [][]<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HasPrefix</span><span class="params">(s, prefix []<span class="type">byte</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, sep []<span class="type">byte</span>)</span></span> <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Join</span><span class="params">(s [][]<span class="type">byte</span>, sep []<span class="type">byte</span>)</span></span> []<span class="type">byte</span></span><br></pre></td></tr></table></figure>

<p>它們之間唯一差別是字串被轉換為 byte slice.</p>
</li>
</ul>
<p>bytes 套件提供 Buffer 型別以有效率的操控位元組 slice, 一開始 Buffer 開是空的，但是隨著 string, byte 或 []byte 等型別資料的寫入可以動態增長，<code>bytes.Buffer</code> 變數不需要初始化，因為它的零值可用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Printints demonstrates the use of bytes.Buffer to format a string.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 類似 fmt.Sprint(values) 但加上逗號</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intsToString</span><span class="params">(values []<span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">	buf.WriteByte(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">		<span class="keyword">if</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">			buf.WriteString(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Fprintf(&amp;buf, <span class="string">&quot;%d&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">	buf.WriteByte(<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(intsToString([]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)) <span class="comment">// &quot;[1, 2, 3]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>將 rune 的 UTF-8 編碼加入到 <code>bytes.Buffer</code> 時，最好使用 <code>bytes.Buffer</code> 的 <code>WriteRune</code> 方法，但 <code>WriteByte</code> 對 <code>[</code> 和 <code>]</code> 等 ASCII 字元也沒問題。</p>
<h4 id="3-5-5-字串與數字的轉換"><a href="#3-5-5-字串與數字的轉換" class="headerlink" title="3.5.5 字串與數字的轉換"></a>3.5.5 字串與數字的轉換</h4><ul>
<li><p>數值和字串之間的轉換可透過 <code>strconv</code> 套件</p>
</li>
<li><p>將整數轉換成字串有以下方法：</p>
<ul>
<li><p>透過 <code>fmt.Sprintf</code></p>
</li>
<li><p>使用 <code>strconv.Itoa</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := <span class="number">123</span></span><br><span class="line">y := fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, x)</span><br><span class="line">fmt.Println(y, strconv.Itoa(x)) <span class="comment">// 123 123</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>FormatInt</code> 和 <code>FormatUint</code> 可在不同的底數上格式化數字：(不同進制)</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(strconv.FormatInt(<span class="type">int64</span>(x), <span class="number">2</span>)) <span class="comment">// 1111011</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>fmt.Printf</code> 的 <code>%b</code>, <code>%d</code>, <code>%u</code> 和 <code>%x</code> 通常比 Format 函式更方便，特別是，特別是在需要包含其他資訊時：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := fmt.Sprintf(<span class="string">&quot;x=%b&quot;</span>, x) <span class="comment">// x=1111011</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>要解析字串所代表的數字時，可以使用 <code>strconv</code> 的 <code>Atoi</code> 或 <code>ParseInt</code>, 或無正負號整數的 <code>ParseUint</code>:</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x, err := strconv.Atoi(<span class="string">&quot;123&quot;</span>)             <span class="comment">// x 是整數</span></span><br><span class="line">y, err := strconv.ParseInt(<span class="string">&quot;123&quot;</span>, <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// 10 進位，最多 64 位元</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>ParseInt</code> 的第三個參數指定結果必須符合的整數型別，例如：16 表示 <code>int16</code>, 0 表示 <code>int</code>; 上例表示 y 的型別是 <code>int64</code>.</li>
</ul>
</li>
<li><p>有時候也會使用 <code>fmt.Scanf</code> 來解析單行中混合字串和數字的輸入，但它沒有彈性，特別是在處理不完整或不規律的輸入時。</p>
</li>
</ul>
<h3 id="3-6-常數"><a href="#3-6-常數" class="headerlink" title="3.6 常數"></a>3.6 常數</h3><ul>
<li><p>常數是編譯器已知值的運算式，其求值保證發生在編譯期而非執行期，每個常數的底層型別是基本型別：布林、字串或數字。</p>
</li>
<li><p>用 <code>const</code> 來宣告常數，其值不變，可防止在程式執行期間意外或蓄意修改。例如：常數比變數更適合圓周率等數學常數，因為他的值不會改變：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14159</span>  <span class="comment">// 近似值, math.Pi 是更好的近似值</span></span><br></pre></td></tr></table></figure>

<p>  也可以一次宣告多個常數：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    e  = <span class="number">2.71828182845904523536028747135266249775724709369995957496696763</span></span><br><span class="line">    pi = <span class="number">3.14159265358979323846264338327950288419716939937510582097494459</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>許多長數計算可以完全在編譯期完成，減少執行期的工作，減少執行期的工作，也使其他編譯器最佳化得以執行。</p>
</li>
<li><p>運算元為常數時，除以零、字串索引超出範圍和任何會導致非有限值的浮點數運算等執行期的錯誤也能夠在編譯期被發現。</p>
</li>
<li><p>常數的數學、邏輯運算和比較運算的結果也數常數，轉換與呼叫 len, cap, real, imag, complex 和 unsafe.Sizeof 等特定內建函式的結果也是常數。</p>
</li>
<li><p>因為編譯器知道常數的值，所以常數運算式可以出現在型別，特別是陣列長度：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> IPv4Len = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parseIPv4 parses an IPv4 address (d.d.d.d).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseIPv4</span><span class="params">(s <span class="type">string</span>)</span></span> IP &#123;</span><br><span class="line">    <span class="keyword">var</span> p [IPv4Len]<span class="type">byte</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常數宣告可以指定型別，但沒有明確指定型別時，其型別由運算式右邊決定。例如以下範例，<code>time.Duration</code> 是具名型別，其底層型別為 <code>int64</code>, 而 <code>time.Minute</code> 是該型別的常數，因此底下兩個常數的型別為 <code>time.Duration</code>:</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> noDelay time.Duration = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="number">5</span> * time.Minute</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, noDelay)     <span class="comment">// &quot;time.Duration 0&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, timeout)     <span class="comment">// &quot;time.Duration 5m0s&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T %[1]v\n&quot;</span>, time.Minute) <span class="comment">// &quot;time.Duration 1m0s&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>當一系列的常數一起宣告時，除了第一個之外，右手邊的運算式可以省略，表示重複使用前一個運算式與它的型別：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">    c = <span class="number">2</span></span><br><span class="line">    d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">// &quot;1 1 2 2&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-6-1-iota-常數產生器"><a href="#3-6-1-iota-常數產生器" class="headerlink" title="3.6.1 iota 常數產生器"></a>3.6.1 iota 常數產生器</h4><ul>
<li><p><code>const</code> 宣告可以使用 iota 常數產生器，他建構一系列相關值而無需明確的指定。</p>
</li>
<li><p>在 <code>const</code> 宣告中，iota 值從零開始對序列中的每個元素遞增。以下範例是來自 time 套件，它從 Sunday 的零開始為一週的每一天定義 Weekday 型別的具名常數，這種型別通常稱為列舉 (enumeration), 簡稱 <code>enum</code>.</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Weekday <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday Weekday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以在更複雜的運算式中使用 iota, 以下範例來自 net 套件，讓一個無正負號整數的 5 個啲位元指定不同的名稱與布林解譯：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Flags <span class="type">uint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    FlagUp Flags = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span> <span class="comment">// 位移, 1 &lt;&lt; 0</span></span><br><span class="line">    FlagBroadcast            <span class="comment">// 1 &lt;&lt; 1, 支援 broadcast</span></span><br><span class="line">    FlagLoopback             <span class="comment">// 1 &lt;&lt; 2, loopback interface</span></span><br><span class="line">    FlagPointToPoint         <span class="comment">// 1 &lt;&lt; 3, belongs to a point-to-point link</span></span><br><span class="line">    FlagMulticast            <span class="comment">// 1 &lt;&lt; 4, 支援 multicast access capability</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>  隨著 iota 遞增，每個常數被指派為 1 &lt;&lt; iota 的值，它求出乘以二的值，對應到每一個位元。我們可以在測試、設定或清除這些位元的函式中使用這些常數：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsUp</span><span class="params">(v Flags)</span></span> <span class="type">bool</span>     &#123; <span class="keyword">return</span> v&amp;FlagUp == FlagUp &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TurnDown</span><span class="params">(v *Flags)</span></span>     &#123; *v &amp;^= FlagUp &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetBroadcast</span><span class="params">(v *Flags)</span></span> &#123; *v |= FlagBroadcast &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsCast</span><span class="params">(v Flags)</span></span> <span class="type">bool</span>   &#123; <span class="keyword">return</span> v&amp;(FlagBroadcast|FlagMulticast) != <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">unc main() &#123;</span><br><span class="line">    <span class="keyword">var</span> v Flags = FlagMulticast | FlagUp</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="comment">// &quot;10001 true&quot;</span></span><br><span class="line">    TurnDown(&amp;v)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v)) <span class="comment">// &quot;10000 false&quot;</span></span><br><span class="line">    SetBroadcast(&amp;v)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsUp(v))   <span class="comment">// &quot;10010 false&quot;</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%b %t\n&quot;</span>, v, IsCast(v)) <span class="comment">// &quot;10010 true&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  以下更複雜的 iota 宣告範例，每個常數都是 1024 的的冪次方：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _ = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    KiB <span class="comment">// 1024</span></span><br><span class="line">    MiB <span class="comment">// 1048576</span></span><br><span class="line">    GiB <span class="comment">// 1073741824</span></span><br><span class="line">    TiB <span class="comment">// 1099511627776             (exceeds 1 &lt;&lt; 32)</span></span><br><span class="line">    PiB <span class="comment">// 1125899906842624</span></span><br><span class="line">    EiB <span class="comment">// 1152921504606846976</span></span><br><span class="line">    ZiB <span class="comment">// 1180591620717411303424    (exceeds 1 &lt;&lt; 64)</span></span><br><span class="line">    YiB <span class="comment">// 1208925819614629174706176</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>  不過 iota 有也限制，例如它不能產生 1000 的乘積，因為沒有指數運算子。</p>
</li>
</ul>
<h4 id="3-6-2-無型別常數"><a href="#3-6-2-無型別常數" class="headerlink" title="3.6.2 無型別常數"></a>3.6.2 無型別常數</h4><p>Go 的常數有一點不尋常。雖然常數可以是任何基本資料型別，例如 <code>int</code> 或 <code>float64</code>, 包含 <code>time.Duration</code> 等具名基本型別，許多常數並不屬於特定型別。編譯器將這些無型別常數以比基本型別值更高的數值精確度表示，且對它們的數學運算比機器運算的精確度更高，可以假設致紹有 256 個位元精確度。</p>
<ul>
<li><p>無型別常數有六種：無型別布林、無型別整數、無型別浮點數、無型別複數和無型別字串。</p>
</li>
<li><p>藉由無歸屬型別，無型別常數不只維持高精確度，它還可以參與比有歸屬常數更多的運算式而不需要轉換。例如上面範例的 ZiB 和 YiB 值對任何整數型別來說都太大，但他們是合法的常數，可用於如下運算式：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(YiB/ZiB) <span class="comment">// 1024</span></span><br></pre></td></tr></table></figure>

<p>  另一個例子是浮點數常數 <code>math.Pi</code> 可用於任何需要浮點數或複數的地方：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">float32</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> y <span class="type">float64</span> = math.Pi</span><br><span class="line"><span class="keyword">var</span> z <span class="type">complex128</span> = math.Pi</span><br></pre></td></tr></table></figure>

<p>  如果 <code>math.Pi</code> 屬於 <code>float64</code> 等特定型別，其結果可能不會有此精確度，且在需要 <code>float32</code> 或 <code>complex128</code> 時需要做型別轉換：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi64 <span class="type">float64</span> = math.Pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x <span class="type">float32</span> = <span class="type">float32</span>(Pi64)</span><br><span class="line"><span class="keyword">var</span> y <span class="type">float64</span> = Pi64</span><br><span class="line"><span class="keyword">var</span> z <span class="type">complex128</span> = <span class="type">complex128</span>(Pi64)</span><br></pre></td></tr></table></figure>

<p>  對實字來說，語法決定結果。0, 0.0, 0i 和 \u0000 都表示同一個值的常數，但結果不同：無型別整數、無型別浮點數、無型別複數、無型別 rune. 同樣的， true 和 false 是無型別布林，而字串實字是無型別字串。</p>
</li>
<li><p><code>/</code> 運算符會依據運算元的類型而產生相對應類型的結果，因此實字的選擇可影響常數除法運算式的結果：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="number">212</span></span><br><span class="line">fmt.Println((f - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>)     <span class="comment">// &quot;100&quot;; (f - 32) * 5 is a float64</span></span><br><span class="line">fmt.Println(<span class="number">5</span> / <span class="number">9</span> * (f - <span class="number">32</span>))     <span class="comment">// &quot;0&quot;;   5/9 是無型別整數 0</span></span><br><span class="line">fmt.Println(<span class="number">5.0</span> / <span class="number">9.0</span> * (f - <span class="number">32</span>)) <span class="comment">// &quot;100&quot;; 5.0/9.0 是無型別浮點數</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>只有常數可以是無型別，如下方第一個陳述，無型別常數出現在直接宣告型別的變數的右手邊，或如其他陳述指派給變數時，常數會間接轉換成該變數的型別：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="number">3</span> + <span class="number">0i</span> <span class="comment">// untyped complex -&gt; float64</span></span><br><span class="line">f = <span class="number">2</span>                  <span class="comment">// untyped integer -&gt; float64</span></span><br><span class="line">f = <span class="number">1e123</span>              <span class="comment">// untyped floating-point -&gt; float64</span></span><br><span class="line">f = <span class="string">&#x27;a&#x27;</span>                <span class="comment">// untyped rune -&gt; float64</span></span><br></pre></td></tr></table></figure>

<p>  上面的陳述相當於：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(<span class="number">3</span> + <span class="number">0i</span>)</span><br><span class="line">f = <span class="type">float64</span>(<span class="number">2</span>)</span><br><span class="line">f = <span class="type">float64</span>(<span class="number">1e123</span>)</span><br><span class="line">f = <span class="type">float64</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  無論是直接或間接，常數從一個型別轉換成另一個型別，目標型別必須可以表示原始值。浮點實數和複數允許捨入：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    deadbeef = <span class="number">0xdeadbeef</span> <span class="comment">// 無型別整數值 3735928559</span></span><br><span class="line">    a = <span class="type">uint32</span>(deadbeef)  <span class="comment">// uint32 值 3735928559</span></span><br><span class="line">    b = <span class="type">float32</span>(deadbeef) <span class="comment">// float32 值 3735928576 (rounded up)</span></span><br><span class="line">    c = <span class="type">float64</span>(deadbeef) <span class="comment">// float64 值 3735928559 (精確)</span></span><br><span class="line">    d = <span class="type">int32</span>(deadbeef)   <span class="comment">// compile error: constant overflows int32</span></span><br><span class="line">    e = <span class="type">float64</span>(<span class="number">1e309</span>)    <span class="comment">// compile error: constant overflows float64</span></span><br><span class="line">    f = <span class="type">uint</span>(<span class="number">-1</span>)          <span class="comment">// compile error: uint 常數低溢位</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在沒有明確型別的變數宣告中（包括短變數宣告），無型別常數間接決定該變數的預設值，例如：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i := <span class="number">0</span>      <span class="comment">// untyped integer;        implicit int(0)</span></span><br><span class="line">r := <span class="string">&#x27;\000&#x27;</span> <span class="comment">// untyped rune;           implicit rune(&#x27;\000&#x27;)</span></span><br><span class="line">f := <span class="number">0.0</span>    <span class="comment">// untyped floating-point; implicit float64(0.0)</span></span><br><span class="line">c := <span class="number">0i</span>     <span class="comment">// untyped complex;        implicit complex128(0i)</span></span><br></pre></td></tr></table></figure>

<p>  注意此不對稱：無型別整數轉換成 int, 其大小沒有保證，但無型別浮點數與複數轉換成明確大小的 float64 和 complex128. Go 語言本身沒有無大小的 float 和 complex 型別，因為不知道浮點數資料型別很難寫出正確的數學演算法。</p>
</li>
<li><p>為給變數不同的型別，我們必須明確轉換無型別常數成所需型別或在變數宣告中多表示所需型別，例如：</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="type">int8</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int8</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>  這些預設在轉換無型別常數到介面值時特別重要，因為它們決定它的動態型別。</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0</span>)      <span class="comment">// &quot;int&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0.0</span>)    <span class="comment">// &quot;float64&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="number">0i</span>)     <span class="comment">// &quot;complex128&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, <span class="string">&#x27;\000&#x27;</span>) <span class="comment">// &quot;int32&quot; (rune)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.gopl.io/">The Go Programming Language</a></li>
<li><a href="https://github.com/adonovan/gopl.io/">gopl.io source code</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Golang</tag>
        <tag>精通Go程式設計</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] 開發環境建置</title>
    <url>/posts/78b972a9/</url>
    <content><![CDATA[<p><img src="https://bit.ly/3p1bvZV" alt="Golang"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近正好在學習 Golang, 也參加了 Golang study group, 因此接下來會有一系列的學習筆記~</p>
<span id="more"></span>

<h2 id="環境建置-Mac"><a href="#環境建置-Mac" class="headerlink" title="環境建置(Mac)"></a>環境建置(Mac)</h2><p>首先，需要先安裝 Go 的開發環境，以下步驟以 Mac 環境為主，其他環境可以到 <a href="https://go.dev/doc/install">Go 官方文件</a>查詢。</p>
<ul>
<li>Download Go: <a href="https://go.dev/doc/install">https://go.dev/doc/install</a></li>
<li>Install<ul>
<li>打開已下載的 package 就會開始安裝</li>
<li>安裝完成後，將 <code>/usr/local/go</code> 加入 <code>PATH</code> 環境變數，接著重開 terminal<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Edit ~/.zshrc</span></span><br><span class="line">$ vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># In ~/.zshrc</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">&quot;<span class="variable">$HOME</span>/go&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/go/bin:<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Verify go version<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line"></span><br><span class="line">go version go1.18.4 darwin/amd64</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><p>接著可以使用 <code>go env</code> 來查看目前 go 的環境參數設定，其中比較重要的是 <code>GOROOT</code> 和 <code>GOPATH</code>:</p>
<ul>
<li><code>GOROOT</code>: Go 的安裝目錄 (Linux 環境中通常是 <code>/usr/local/go</code>)</li>
<li><code>GOPATH</code>: Go 的 workspace, 保存 packages 和 binary files (編譯後的執行檔)<ul>
<li>可以設定多個目錄，當有多個目錄時，預設會將 <code>go get</code> 的內容放在第一個目錄下</li>
<li>通常會再細分三個子目錄：<ul>
<li>src: 存放 go code</li>
<li>pkg: 存放 go package</li>
<li>bin: 編譯後的執行檔</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="開發工具"><a href="#開發工具" class="headerlink" title="開發工具"></a>開發工具</h2><p>有許多 IDE 都有支援 Go 開發，像是 <a href="https://www.sublimetext.com/">Sublime Text</a>, <a href="https://atom.io/">Atom</a>, <a href="https://code.visualstudio.com/">VS Code</a>, <a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a>…等，個人比較習慣使用 VS Code 來開發，推薦安裝 <a href="https://marketplace.visualstudio.com/items?itemName=golang.go">Go extension</a>, 有自動提示、自動 format 等功能，開發上非常方便！</p>
<p>基本的環境建置就介紹到這，接下來就可以來開發 Go 了～</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://willh.gitbook.io/build-web-application-with-golang-zhtw/">https://willh.gitbook.io/build-web-application-with-golang-zhtw/</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTML] script tag 屬性 async vs. defer</title>
    <url>/posts/64bd36e6/</url>
    <content><![CDATA[<p>一般的網頁載入流程如下：</p>
<ol>
<li>解析 HTML 結構</li>
<li>載入解析外部資源 (stylesheet or js)</li>
<li>執行載入的 script，此時會暫停網頁的渲染，等執行完 script 後，才會繼續網頁的解析及渲染</li>
<li>HTML DOM 載入完成 (DomContentLoaded、jQuery 中的 <code>ready()</code>)</li>
<li>載入剩下的 stylesheet、image 或 frame</li>
<li>所有資源及頁面載入完成 (load)</li>
</ol>
<p>而在 HTML5 中，<code>&lt;script&gt;</code> tag 多了 async 和 defer 兩種屬性, 這裡比較一下兩者的差別：</p>
<span id="more"></span>

<h2 id="基本-script-tag"><a href="#基本-script-tag" class="headerlink" title="基本 script tag"></a>基本 script tag</h2><p>通常我們在用 script tag 時，會寫成:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>這種方式會讓整個網頁的渲染停下，等 index.js 載入並執行後才會繼續渲染。</p>
<h2 id="async-屬性"><a href="#async-屬性" class="headerlink" title="async 屬性"></a>async 屬性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加上 <code>async</code> 屬性，網頁的渲染和載入 index.js 會同時進行 (非同步)，載入 index.js 之後就會執行，但無法保證每個 script 的執行順序。<br>適合用在不需要操作到 DOM 、獨立的 JS file, 不需要等待其他的 JS 執行完，可以獨立作業的。</p>
<h2 id="defer-屬性"><a href="#defer-屬性" class="headerlink" title="defer 屬性"></a>defer 屬性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加上 <code>defer</code> 屬性，網頁的渲染和載入 index.js 會同時進行 (非同步)，但是 index.js 的執行會等網頁渲染及分析完後再執行。<br>適合用在會操作到 DOM，需要等整個頁面渲染完才能執行的 JS.</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.xuite.net/vexed/tech/61308318-script+tag+%E5%B1%AC%E6%80%A7+async+defer+%E5%B7%AE%E5%88%A5">script tag 屬性 async defer 差別</a></li>
<li><a href="https://segmentfault.com/q/1010000000640869">defer和async的区别</a></li>
</ul>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[Heroku] 佈署網站或 App 到 Heroku</title>
    <url>/posts/351f69fe/</url>
    <content><![CDATA[<p><img src="https://camo.githubusercontent.com/30c7758f9ac63488d3c2814ed2dcd9dbb7e967f3/68747470733a2f2f63646e2e776f726c64766563746f726c6f676f2e636f6d2f6c6f676f732f6865726f6b752d312e737667" alt="Heroku"></p>
<p>最近剛好有機會接觸到 Heroku 這個雲端服務，這篇文章主要是記錄一下如何使用 Heroku 並且將網站或 App 佈署到 Heroku.</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.heroku.com/" title="Heroku">Heroku</a> 是一個支援多種程式語言的 PaaS (平台即服務)，開發者可以在 Heroku 上佈署各種網站或 App，可以減少系統維護的成本，當然免費的帳號會有一些限制:</p>
<ul>
<li>30 分鐘沒有使用的話，會進入睡眠狀態，當之後需要使用時，需要等待一些時間才能恢復運作</li>
<li>512 MB RAM</li>
<li>dyno 運行的時間限制: (dyno是運行和回應請求的應用程序的 Instance)<ul>
<li>已驗證的帳號，所有 dyno 合計的運行時間可以有 1000 小時</li>
<li>未驗證的帳號只有 550 小時</li>
</ul>
</li>
<li>1 web &#x2F; 1 worker</li>
</ul>
<p>一開始可以先使用免費方案，對於一般開發應該很夠用了，如果有更高的需求，可以再升級到其他方案，其他方案可以參考: <a href="https://www.heroku.com/pricing">Pricing | Heroku</a>.</p>
<h2 id="安裝及設定"><a href="#安裝及設定" class="headerlink" title="安裝及設定"></a>安裝及設定</h2><p>首先需要先到 <a href="https://www.heroku.com/" title="Heroku">Heroku</a> 申請帳號，填一些基本資料就可以申請好了~</p>
<p>接著安裝 <a href="https://devcenter.heroku.com/articles/heroku-cli">Heroku CLI</a>，安裝後開啟 cmd 輸入以下指令來測試:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku -h</span><br></pre></td></tr></table></figure>

<p>如果出現 <code>&#39;heroku&#39; 不是內部或外部命令、可執行的程式或批次檔</code>，請將 Heroku CLI 的安裝路徑加到環境變數中，接著再輸入一次 <code>heroku -h</code> 就可以看到以下內容:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">COMMANDS</span><br><span class="line">  access          manage user access to apps</span><br><span class="line">  addons          tools and services for developing, extending, and operating your app</span><br><span class="line">  apps            manage apps on Heroku</span><br><span class="line">  auth            check 2fa status</span><br><span class="line">  authorizations  OAuth authorizations</span><br><span class="line">  autocomplete    display autocomplete installation instructions</span><br><span class="line">  buildpacks      scripts used to compile apps</span><br><span class="line">  certs           a topic for the ssl plugin</span><br><span class="line">  ci              run an application test suite on Heroku</span><br><span class="line">  clients         OAuth clients on the platform</span><br><span class="line">  config          environment variables of apps</span><br><span class="line">  container       Use containers to build and deploy Heroku apps</span><br><span class="line">  domains         custom domains for apps</span><br><span class="line">  drains          forward logs to syslog or HTTPS</span><br><span class="line">  features        add/remove app features</span><br><span class="line">  git             manage local git repository for app</span><br><span class="line">  help            display help for heroku</span><br><span class="line">  keys            add/remove account ssh keys</span><br><span class="line">  labs            add/remove experimental features</span><br><span class="line">  local           run heroku app locally</span><br><span class="line">  logs            display recent log output</span><br><span class="line">  maintenance     enable/disable access to app</span><br><span class="line">  members         manage organization members</span><br><span class="line">  notifications   display notifications</span><br><span class="line">  orgs            manage organizations</span><br><span class="line">  pg              manage postgresql databases</span><br><span class="line">  pipelines       groups of apps that share the same codebase</span><br><span class="line">  plugins         list installed plugins</span><br><span class="line">  ps              Client tools for Heroku Exec</span><br><span class="line">  psql            open a psql shell to the database</span><br><span class="line">  redis           manage heroku redis instances</span><br><span class="line">  regions         list available regions for deployment</span><br><span class="line">  releases        display the releases for an app</span><br><span class="line">  reviewapps      disposable apps built on GitHub pull requests</span><br><span class="line">  run             run a one-off process inside a Heroku dyno</span><br><span class="line">  sessions        OAuth sessions</span><br><span class="line">  spaces          manage heroku private spaces</span><br><span class="line">  status          status of the Heroku platform</span><br><span class="line">  teams           manage teams</span><br><span class="line">  update          update the Heroku CLI</span><br><span class="line">  webhooks        setup HTTP notifications of app activity</span><br></pre></td></tr></table></figure>

<p>再來設定 Heroku 帳號資訊:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku login</span><br><span class="line"></span><br><span class="line">Email: &lt;your_email&gt;</span><br><span class="line">Password: &lt;your_password&gt;</span><br><span class="line">Logged <span class="keyword">in</span> as &lt;your_email&gt;</span><br></pre></td></tr></table></figure>

<p>輸入帳號密碼之後，如果有成功登入就會看到登入成功的訊息 (Line 5).</p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="建立應用程式"><a href="#建立應用程式" class="headerlink" title="建立應用程式"></a>建立應用程式</h3><p>除了可以直接在 Heroku 的網頁中 create app 之外，也可以透過 Heroku CLI 來建立新的新的應用程式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ heroku create &lt;app_name&gt;</span><br></pre></td></tr></table></figure>

<p><code>app_name</code> 是應用程式的名稱，也可以不指定，Heroku 會隨機給一組名稱。</p>
<p>Heroku CLI 大致上就用到這裡，接下來主要是使用 Git 指令來佈署到 Heroku，Git 的使用方式可以參考 <a href="/posts/223ce999/">[Git] Git 安裝及使用</a>.</p>
<h3 id="佈署到-Heroku"><a href="#佈署到-Heroku" class="headerlink" title="佈署到 Heroku"></a>佈署到 Heroku</h3><p>在 Local 的資料夾中新增 git remote 對應到 Heroku repository:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ heroku git:remote -a &lt;app_name&gt; <span class="comment"># app_name: Heroku 應用程式名稱</span></span><br></pre></td></tr></table></figure>

<p>如果是在 VS Code 操作 heroku 指令的話，需要再安裝 Plugin: <a href="https://marketplace.visualstudio.com/items?itemName=pkosta2005.heroku-command">heroku-cli</a>.</p>
<p>接下來簡單撰寫一個 Node.js 程式來做測試:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init</span></span><br><span class="line">$ npm init</span><br><span class="line">$ npm install express --save</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in app.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Listen at post 80&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.16.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>開發完成後，依照一般 push 到 GitHub 的指令就可以佈署到 Heroku 了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git ci -m <span class="string">&#x27;Commit message&#x27;</span></span><br><span class="line">$ git push heroku master</span><br></pre></td></tr></table></figure>

<p>最後開啟 App URL (<code>https://&lt;app_name&gt;.herokuapp.com/</code>) 就可以看到應用程式已經佈署到 Heroku 囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://www.heroku.com/" title="Heroku">Heroku</a></li>
<li><a href="https://ericjhang.github.io/archives/689940fd.html">Heroku安裝使用教學</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10196129">第十八天：發布網站到 Heroku</a></li>
</ul>
]]></content>
      <categories>
        <category>Heroku</category>
      </categories>
      <tags>
        <tag>Heroku</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] Hexo 安裝及使用 (搭配GitHub/Bitbucket Page)</title>
    <url>/posts/255a957f/</url>
    <content><![CDATA[<p><a href="https://oawan.me/2016/easy-hexo-easy-blog/"><img src="http://bit.ly/2nilBVW" alt="Hexo"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前使用過好幾種筆記軟體: <a href="https://www.onenote.com/">OneNote</a>, <a href="https://evernote.com/intl/zh-tw">Evernote</a>, <a href="https://hackmd.io/">HackMD</a>，也用過一些部落格: <a href="https://www.pixnet.net/">Pixnet</a>, <a href="https://www.blogger.com/">Blogger</a>, <a href="https://medium.com/">Medium</a>, 後來持續使用的是OneNote, HackMD 和 Blogger，但是使用比較長一段時間之後發現 OneNote 和 HackMD 也不太符合自己想要的，因為主要用途是要作為學習筆記，所以希望可以很方便的搜尋筆記內容、介面簡潔及方便客製化、對程式碼的支援度好、支援 Markdown 語法，OneNote 沒有內建支援 Markdown 語法(有付費的 plugin 可以使用)，而 HackMD 則是在搜尋筆記內容不太方便。<br>後來發現 <a href="https://hexo.io/zh-tw/">Hexo</a> 這個網誌框架，再搭配佈署到 <a href="https://pages.github.com/">GitHub page</a> 或是 <a href="https://confluence.atlassian.com/bitbucket/publishing-a-website-on-bitbucket-cloud-221449776.html">Bitbucket page</a>，就可以很快速地建立自己的 Blog。它還有許多 Plugins 和主題可以使用，可以客製化自己的 Blog，接下來就稍微紀錄一下 Hexo 使用方式。</p>
<span id="more"></span>

<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，並且可以快速產生靜態檔案，再搭配 GitHub 或 Bitbucket 就可以快速地建立好自己的部落格。</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>在安裝Hexo之前，需要先安裝 <a href="https://nodejs.org/en/download/">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a>.</p>
<p>裝完 Node.js 和 Git 之後，接著安裝 Hexo.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h1 id="建立Blog"><a href="#建立Blog" class="headerlink" title="建立Blog"></a>建立Blog</h1><p>安裝完 Hexo 之後，我們就可以來建立 Hexo 專案，並安裝所需要的 modules:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder_name&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder_name&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>上面指令執行完之後，可以看到專案目錄的架構如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<ul>
<li><code>_config.yml</code>: 網站的 config file, 詳細的配置可以參考官方文件: <a href="https://hexo.io/zh-tw/docs/configuration.html">配置</a>.</li>
<li><code>package.json</code>: 專案資訊，預設已安裝 EJS, Stylus 和 Markdown renderer.</li>
<li><code>scaffolds</code>: 當建立新文章時，Hexo 會根據此資料夾來建立檔案。</li>
<li><code>source</code>: 放置內容的地方，Markdown 和 HTML 檔案會被處理並放到 <code>public</code> 資料夾，而其他檔案會被拷貝過去。</li>
<li><code>themes</code>: 主題資料夾，Hexo 會根據主題來產生靜態檔案。</li>
</ul>
<h1 id="開始使用-Hexo"><a href="#開始使用-Hexo" class="headerlink" title="開始使用 Hexo"></a>開始使用 Hexo</h1><p>基本設定都設定好之後，我們就可以開始使用 Hexo 來寫 Blog，主要流程: <code>建立文章</code> → <code>編輯文章內容</code> → <code>產生靜態檔案</code> → <code>佈署到 GitHub/Bitbucket</code>.</p>
<h2 id="建立文章"><a href="#建立文章" class="headerlink" title="建立文章"></a>建立文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [&lt;layout&gt;] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p><code>layout</code> 有以下三種:</p>
<ul>
<li><code>post</code>: 公開文章, 路徑: <code>source/_posts</code>.</li>
<li><code>page</code>: 頁面, 路徑: <code>source/</code>.</li>
<li><code>draft</code>: 草稿, 路徑: <code>source/_drafts</code>.</li>
</ul>
<p>如果沒有指定 <code>layout</code>，則會使用 <code>_config.yml</code> 中設定的 <code>default_layout</code>.</p>
<p><code>draft</code> 之後要發佈為公開文章，可以使用<code>publish</code>指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish &lt;layout&gt; &lt;title&gt;</span><br></pre></td></tr></table></figure>

<h2 id="編寫內容"><a href="#編寫內容" class="headerlink" title="編寫內容"></a>編寫內容</h2><p>建立新的文章後，我們可以看到在檔案的最上方有類似這樣的內容:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;Hello world.&#x27;</span><br><span class="line">date: 2018-01-22 15:32:52</span><br><span class="line">comments: true</span><br><span class="line">categories: </span><br><span class="line">- Test</span><br><span class="line">tags: </span><br><span class="line">- Test</span><br><span class="line">- Hello</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>這是文章的資訊，各參數說明如下:</p>
<ul>
<li><code>title</code>: 文章標題</li>
<li><code>date</code>: 文章建立日期</li>
<li><code>comments</code>: 是否開啟評論功能 (須設定Disqus)</li>
<li><code>categories</code>: 文章類別, 可以為階層式的類別</li>
<li><code>tags</code>: 文章標籤</li>
</ul>
<p>而文章是Markdown的格式，使用Markdown語法，語法可以參考: <a href="http://markdown.tw/">Markdown語法說明</a>.</p>
<h2 id="產生靜態檔案"><a href="#產生靜態檔案" class="headerlink" title="產生靜態檔案"></a>產生靜態檔案</h2><p>寫完文章後，我們需要先產生靜態的檔案，因為 Blog 會是靜態的網站。<br>為了確保乾淨，可以先清除快取檔案(<code>db.json</code>)和靜態檔案(<code>public</code>)，再重新產生一份靜態檔案。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>清除快取檔案和已產生的靜態檔案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>產生靜態檔案，選項:</p>
<ul>
<li><code>-d</code>, <code>--deploy</code>: 產生完靜態檔案後，直接佈署。</li>
<li><code>-w</code>, <code>--watch</code>: 監看檔案變更。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 縮寫:</span></span><br><span class="line"><span class="comment"># $ hexo g</span></span><br></pre></td></tr></table></figure>

<h2 id="啟動-Hexo-Server"><a href="#啟動-Hexo-Server" class="headerlink" title="啟動 Hexo Server"></a>啟動 Hexo Server</h2><p>在佈署之前，我們可以先啟動伺服器，看一下目前 Blog 的樣子，預設的 URL 是 <code>http://localhost:4000/</code>.</p>
<p>選項:</p>
<ul>
<li><code>-p</code>, <code>--port</code>: 指定port.</li>
<li><code>-s</code>, <code>--static</code>: 只使用靜態檔案。</li>
<li><code>-l</code>, <code>--log</code>: log.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 縮寫:</span></span><br><span class="line"><span class="comment"># $ hexo s</span></span><br></pre></td></tr></table></figure>

<h2 id="佈署到-GitHub-x2F-Bitbucket"><a href="#佈署到-GitHub-x2F-Bitbucket" class="headerlink" title="佈署到 GitHub&#x2F;Bitbucket"></a>佈署到 GitHub&#x2F;Bitbucket</h2><p>接著我們可以將目前的 blog 佈署到 GitHub&#x2F;Bitbucket page, 在佈署之前，我們需要先進行以下動作:</p>
<ul>
<li><p>建立 GitHub&#x2F;Bitbucket repo.<br>  如果是要放在 GitHub page (或Bitbucket page)，需要先建立一個<code>username.github.io</code> (或<code>username.bitbucket.io</code>)的repo, 其中<code>username</code>是你的 GitHub&#x2F;Bitbucket 的帳號。</p>
</li>
<li><p>安裝 <code>hexo-deployer-git</code>.</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>設定網站的<code>_config.yml</code>:</p>
  <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repo</span> <span class="string">URL&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>接著我們就可以佈署到 GitHub&#x2F;Bitbucket page.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 縮寫:</span></span><br><span class="line"><span class="comment"># $ hexo d</span></span><br></pre></td></tr></table></figure>

<h1 id="多台電腦編寫-Blog"><a href="#多台電腦編寫-Blog" class="headerlink" title="多台電腦編寫 Blog"></a>多台電腦編寫 Blog</h1><p>如果需要在多台電腦編寫 Blog，可以再建立一個 repo，用來存放 Hexo 專案的原始內容，需要編輯時再從此 repo pull 最新的內容到新電腦編寫。</p>
<h1 id="Customize"><a href="#Customize" class="headerlink" title="Customize"></a>Customize</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>Hexo 有許多主題，可以到 <a href="https://hexo.io/themes/">Hexo themes</a> 選擇，再安裝所選擇的主題，並修改網站的<code>_config.yml</code>.<br>我選擇使用 <a href="http://theme-next.iissnan.com/">NexT</a>, 因為他的介面很簡潔，而且也有許多開源者貢獻。</p>
<h3 id="使用-NexT"><a href="#使用-NexT" class="headerlink" title="使用 NexT"></a>使用 NexT</h3><p>安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder_name&gt;</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改網站的<code>_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>除了主題之外，Hexo 也有許多 plugins 可以使用，推薦的 plugins:</p>
<ul>
<li><a href="https://github.com/theme-next/theme-next-reading-progress">theme-next-reading-progress</a>: 閱讀進度</li>
<li><a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a>: 統計文章次數及閱讀時間</li>
</ul>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>另外也可以增加其他功能，可以參考:</p>
<ul>
<li><a href="http://ibruce.info/2015/04/04/busuanzi/">統計網站瀏覽次數</a></li>
<li><a href="/posts/34fe70a2/">[Hexo] 增加 Disqus 評論功能</a></li>
<li><a href="/posts/76699f02/">[Hexo] 增加 Local search 的功能</a></li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://hexo.io/zh-tw/docs/index.html">Hexo官方文件</a></li>
<li><a href="https://oawan.me/2016/easy-hexo-easy-blog/">[Hexo] 快速上手 Hexo 網誌框架</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] 增加 Disqus 評論功能</title>
    <url>/posts/34fe70a2/</url>
    <content><![CDATA[<p><a href="http://bit.ly/2rLgJhM"><img src="http://bit.ly/2rLgJhM" alt="Disqus"></a></p>
<h1 id="Disqus-簡介"><a href="#Disqus-簡介" class="headerlink" title="Disqus 簡介"></a>Disqus 簡介</h1><p><a href="https://disqus.com/">Disqus</a> 是一個熱門的網站評論系統，主要為網站提供評論管理服務。</p>
<span id="more"></span>

<h1 id="註冊-Disqus"><a href="#註冊-Disqus" class="headerlink" title="註冊 Disqus"></a>註冊 Disqus</h1><p>首先，先到 <a href="https://disqus.com/">Disqus 首頁</a>註冊帳號。</p>
<p><img src="https://ppt.cc/f6BwXx@.png" alt="註冊頁面"></p>
<p>註冊後點選右上角的<code>settings</code>，選擇<code>Add Disqus To Site</code>.</p>
<p><img src="https://ppt.cc/fAj0Cx@.png" alt="設定"></p>
<p>滑到最下方選擇<code>GET STARTED</code>, 選擇<code>I want to install Disqus on my site.</code></p>
<p><img src="https://ppt.cc/fvpsux@.png" alt="GET STARTED"></p>
<p>接著設定 site:</p>
<p><img src="https://ppt.cc/fgfWXx@.png" alt="設定 site"></p>
<p>這裡的 <code>Website name</code>也就是 <code>Shortname</code>，必須是唯一的，且不能修改，也是之後在設定 Hexo 時會使用到。<br>Disqus 設定好之後，接著設定 Hexo 的 <code>_config.yml</code>.</p>
<h1 id="Hexo-設定-Disqus"><a href="#Hexo-設定-Disqus" class="headerlink" title="Hexo 設定 Disqus"></a>Hexo 設定 Disqus</h1><p>在 Hexo 專案底下的 <code>_config.yml</code> 新增以下內容:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">shortname</span></span><br></pre></td></tr></table></figure>

<p>shortname就是剛才在Disqus設定的，如果忘記了，可以到<code>settings</code> -&gt; <code>Admin</code> 查看。<br>最後，佈署到 GitHub &#x2F; Bitbucket page就可以開始使用評論功能了!</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://blog.ivanwei.co/2016/01/03/2016-01-03-add-disqus-to-blog-by-hexo/">[Hexo] 加入 Disqus 讓 Blog多個留言功能</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] 增加 Local search 的功能</title>
    <url>/posts/76699f02/</url>
    <content><![CDATA[<p>此Blog的主題是使用<a href="http://theme-next.iissnan.com/">NexT</a>，在官方文件中有詳細介紹四種搜尋功能:</p>
<ul>
<li>Swiftype</li>
<li>微搜索</li>
<li>Local Search</li>
<li>Algolia</li>
</ul>
<p>由於此Blog主要用來作為學習筆記，希望可以快速查詢文章內容，所以選擇使用Local Search.</p>
<span id="more"></span>

<h1 id="安裝Plugin"><a href="#安裝Plugin" class="headerlink" title="安裝Plugin"></a>安裝Plugin</h1><p>在Hexo根目錄底下執行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h1 id="設定site-config-yml"><a href="#設定site-config-yml" class="headerlink" title="設定site _config.yml"></a>設定site <code>_config.yml</code></h1><p>在Hexo根目錄底下的<code>_config.yml</code>新增以下內容:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h1 id="設定主題-config-yml"><a href="#設定主題-config-yml" class="headerlink" title="設定主題 _config.yml"></a>設定主題 <code>_config.yml</code></h1><p>啟用Local search功能</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="http://theme-next.iissnan.com/">NexT官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Hexo] 將 Hexo 網站佈署到 Heroku</title>
    <url>/posts/6e4169a2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有介紹過如何使用 Hexo，並佈署到 GitHub 或 Bitbucket page (可參考: <a href="/posts/255a957f/">[Hexo] Hexo 安裝及使用 (搭配GitHub&#x2F;Bitbucket Page)</a>)，最近正好有機會接觸到 Heroku 這個雲端服務，關於 Heroku 詳細的介紹可以參考: <a href="/posts/6e4169a2/">[Heroku] 佈署網站或 App 到 Heroku</a>，這一篇主要紀錄如何將 Hexo 網站佈署到 Heroku.</p>
<span id="more"></span>

<h2 id="佈署"><a href="#佈署" class="headerlink" title="佈署"></a>佈署</h2><p>首先需要先參考 <a href="/posts/6e4169a2/">[Heroku] 佈署網站或 App 到 Heroku</a> 來安裝 Heroku ，並註冊 Heroku 帳號、建立 Heroku app，接著安裝 <a href="https://github.com/hexojs/hexo-deployer-heroku">hexo-deployer-heroku</a>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-heroku --save</span><br></pre></td></tr></table></figure>

<p>再來修改 Hexo 的<code>_config.yml</code>:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">heroku</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure>

<p><code>repository url</code> 可以在 Heroku app 的 Settings 頁面中找到 (<code>Heroku Git URL</code>).<br><code>message</code> 是自訂 commit message 的內容，預設是: <code>Site updated: YYYY-MM-DD HH:mm:ss</code>.</p>
<p>設定好之後，再使用 deploy 指令，就可以佈署到 Heroku:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># generate and deploy</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<p>開啟 App URL (<code>https://&lt;your_app_name&gt;.herokuapp.com/</code>) 就可以看到 Hexo 網站已經佈署到 Heroku 囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://hexo.io/zh-tw/docs/deployment.html">佈署 | Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Heroku</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] Linux 常用指令</title>
    <url>/posts/e491f611/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>這一篇文章主要紀錄 Linux 上常用的指令，方便之後查詢~</p>
<p>包含: </p>
<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4">Linux 常用指令</a><ul>
<li><a href="#%E5%A3%93%E7%B8%AE--%E8%A7%A3%E5%A3%93%E7%B8%AE">壓縮 &amp; 解壓縮</a><ul>
<li><a href="#tar">.tar</a></li>
<li><a href="#gz">.gz</a></li>
<li><a href="#targz--tgz--tartgz">.tar.gz &#x2F; .tgz &#x2F; .tar.tgz</a></li>
<li><a href="#zip">zip</a></li>
</ul>
</li>
<li><a href="#%E6%AA%94%E6%A1%88%E5%82%B3%E8%BC%B8">檔案傳輸</a><ul>
<li><a href="#scp">scp</a></li>
<li><a href="#rsync">rsync</a></li>
</ul>
</li>
<li><a href="#%E6%AA%94%E6%A1%88%E8%99%95%E7%90%86-%E5%88%86%E5%89%B2%E5%90%88%E4%BD%B5%E5%AD%97%E4%B8%B2%E8%99%95%E7%90%86">檔案處理 (分割、合併、字串處理)</a><ul>
<li><a href="#sed">sed</a></li>
<li><a href="#split">split</a></li>
<li><a href="#grep">grep</a></li>
<li><a href="#awk">awk</a></li>
<li><a href="#%E5%88%AA%E9%99%A4%E7%9B%AE%E9%8C%84%E4%B8%8B%E7%9A%84%E7%A9%BA%E6%AA%94%E6%A1%88">刪除目錄下的空檔案</a></li>
</ul>
</li>
<li><a href="#vim-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4">vim 常用指令</a></li>
<li><a href="#%E6%AA%94%E6%A1%88%E7%B7%A8%E7%A2%BC">檔案編碼</a></li>
<li><a href="#%E6%AA%94%E6%A1%88%E6%AC%8A%E9%99%90%E8%A8%AD%E5%AE%9A">檔案權限設定</a></li>
<li><a href="#process">Process</a></li>
<li><a href="#system">System</a></li>
</ul>
</li>
<li><a href="#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99">參考資料</a></li>
</ul>
<span id="more"></span>

<h1 id="Linux-常用指令"><a href="#Linux-常用指令" class="headerlink" title="Linux 常用指令"></a>Linux 常用指令</h1><h2 id="壓縮-amp-解壓縮"><a href="#壓縮-amp-解壓縮" class="headerlink" title="壓縮 &amp; 解壓縮"></a>壓縮 &amp; 解壓縮</h2><h3 id="tar"><a href="#tar" class="headerlink" title=".tar"></a>.tar</h3><p>只有打包，沒有壓縮。</p>
<p><strong>打包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar cvf &lt;fileName.tar&gt; &lt;files&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xvf &lt;fileName.tar&gt;</span><br></pre></td></tr></table></figure>

<h3 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h3><p><strong>壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gzip &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gunzip &lt;fileName.gz&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># or:</span></span><br><span class="line">$ gzip -d &lt;fileName.gz&gt;</span><br></pre></td></tr></table></figure>

<h3 id="tar-gz-x2F-tgz-x2F-tar-tgz"><a href="#tar-gz-x2F-tgz-x2F-tar-tgz" class="headerlink" title=".tar.gz &#x2F; .tgz &#x2F; .tar.tgz"></a>.tar.gz &#x2F; .tgz &#x2F; .tar.tgz</h3><p><strong>壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar zcvf &lt;fileName&gt; &lt;files&gt;	<span class="comment"># --exclude=file: 略過特定檔案</span></span><br></pre></td></tr></table></figure>

<p><strong>解壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar zxvf &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>如果檔案名稱有中文, 要使用 zip 壓縮</p>
<p><strong>壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zip -r &lt;fileName.zip&gt; &lt;files&gt;</span><br></pre></td></tr></table></figure>

<p><strong>解壓縮</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip &lt;fileName.zip&gt;</span><br></pre></td></tr></table></figure>

<h2 id="檔案傳輸"><a href="#檔案傳輸" class="headerlink" title="檔案傳輸"></a>檔案傳輸</h2><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>傳送 local file 到遠端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp &lt;<span class="built_in">local</span> file&gt; &lt;username&gt;@&lt;remote IP&gt;:&lt;path&gt;</span><br></pre></td></tr></table></figure>

<p>從遠端傳檔案到 local</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp &lt;username&gt;@&lt;remote IP&gt;:&lt;file path&gt; &lt;<span class="built_in">local</span> directory&gt;</span><br></pre></td></tr></table></figure>

<p>如果想要不輸入密碼就可以使用 ssh, scp, rsync 到遠端主機，可參考: <a href="/posts/69b8a25e/">[Linux] 設定 SSH 免密碼登入</a></p>
<h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><p>傳送 local file 到遠端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsync -avh &lt;<span class="built_in">local</span> file&gt; &lt;username&gt;@&lt;remote host&gt;:&lt;file path&gt; --progress</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-a</code>: 封裝備份模式，相當於 -rlptgoD，遞迴備份所有子目錄下的目錄與檔案，保留連結檔、檔案的擁有者、群組、權限以及時間戳記</li>
<li><code>-v</code>: verbose mode，輸出較詳細的訊息</li>
<li><code>-h</code>: 將數字轉為易讀的格式</li>
<li><code>-z</code>: 啟用壓縮模式</li>
<li><code>--progress</code>: 顯示傳輸進度</li>
<li><code>--partial</code>: 連線中斷時，保留不完整的檔案</li>
<li><code>--append</code>: 續傳不完整的檔案</li>
</ul>
<h2 id="檔案處理-分割、合併、字串處理"><a href="#檔案處理-分割、合併、字串處理" class="headerlink" title="檔案處理 (分割、合併、字串處理)"></a>檔案處理 (分割、合併、字串處理)</h2><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>將第 1 ~ 1000 行輸出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -n 1,1000p inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<p>去除空行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/^$/d&#x27;</span> inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<p>去除 pattern 開頭的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;/^pattern/d&#x27;</span> inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<p>去除行首空格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/^[ \t]*//g&#x27;</span> inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<p>去除行尾空格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;s/[ \t]*$//g&#x27;</span> inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<p>合併符合 pattern 的行及其下一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;/PATTERN/&#123;N;s/\n/\t/&#125;&#x27;</span> inputFile &gt; outputFile</span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>將檔案分割成多個 n bytes的檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">split</span> -b &lt;nBytes&gt; &lt;inputFile&gt;</span><br></pre></td></tr></table></figure>

<p>將檔案分割成多個 n 行的檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">split</span> -l &lt;nLine&gt; &lt;inputFile&gt;</span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p>-Bx: 輸出符合條件的前x行<br>-Ax: 輸出符合條件的後x行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -Ax -Bx <span class="string">&quot;pattern&quot;</span> inputFile</span><br></pre></td></tr></table></figure>

<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>將字串由長到短排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;&#123;print length($0) &quot; &quot; $0; &#125;&#x27;</span> &lt;inputFile&gt; | <span class="built_in">sort</span> -r -n | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 2- &gt; &lt;outputFile&gt;</span><br></pre></td></tr></table></figure>

<h3 id="刪除目錄下的空檔案"><a href="#刪除目錄下的空檔案" class="headerlink" title="刪除目錄下的空檔案"></a>刪除目錄下的空檔案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find directory/ -size 0 -print0 | xargs -0 <span class="built_in">rm</span></span><br></pre></td></tr></table></figure>

<h2 id="vim-常用指令"><a href="#vim-常用指令" class="headerlink" title="vim 常用指令"></a>vim 常用指令</h2><p>自動排版</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gg=G</span><br></pre></td></tr></table></figure>

<p>設定檔案結尾不自動換行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> binary</span><br><span class="line">:<span class="built_in">set</span> noeol</span><br></pre></td></tr></table></figure>

<p>檢查&amp;去除\r</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> ff=unix</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>取代字串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">:%s/pattern/replace/g</span><br></pre></td></tr></table></figure>

<h2 id="檔案編碼"><a href="#檔案編碼" class="headerlink" title="檔案編碼"></a>檔案編碼</h2><p>查看檔案編碼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ file &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<p>檔案編碼轉換</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ iconv -f &lt;input encoding&gt; -t &lt;output encoding&gt; &lt;inputFile&gt; &gt; &lt;outputFile&gt;</span><br></pre></td></tr></table></figure>

<p>簡轉繁</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cconv -f utf8 -t utf8-tw &lt;inputFile&gt; -o &lt;outputFile&gt;</span><br></pre></td></tr></table></figure>

<h2 id="檔案權限設定"><a href="#檔案權限設定" class="headerlink" title="檔案權限設定"></a>檔案權限設定</h2><p>更改檔案owner</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chown</span> -R &lt;user&gt;:&lt;group&gt; &lt;directory&gt;	<span class="comment"># -R: recursive, 改變目錄底下所有檔案的owner</span></span><br></pre></td></tr></table></figure>

<p>更改檔案權限</p>
<ul>
<li>Linux 檔案的基本權限有 9 個，分別是 owner, group, other 各自的 read&#x2F;write&#x2F;execute 的權限，例如: <code>-rwxrwxrwx</code>, 三個為一組，依序為: owner, group, other 的權限，每組的三個字元分別代表: r (read), w (write), x (execute). 其對應的數字分別是: r &#x3D; 4, w &#x3D; 2, x &#x3D; 1.</li>
<li>檔案權限的數字代表 3 種身分(owner, group, other) 的權限各自加總，例如: owner 可以 read, write and execute, group 可以 read and execute, other 可以 read, 檔案權限的數字就是 <code>754</code>.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> &lt;permission&gt; &lt;fileName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>查看 Process</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | grep &lt;precess name&gt;</span><br></pre></td></tr></table></figure>

<p>終止 Process</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> [options] &lt;pid&gt;</span><br></pre></td></tr></table></figure>

<p>options:</p>
<ul>
<li><code>-1</code>: signal <code>HUP</code>, 控制中的程序中斷</li>
<li><code>-2</code>: signal <code>INT</code>, 等同於 <code>Ctrl+C</code></li>
<li><code>-3</code>: signal <code>QUIT</code>, 等同於 <code>Ctrl+\</code></li>
<li><code>-15</code>: signal <code>TERM</code>, 程序終止指令</li>
<li><code>-9</code>: 強制終止程序</li>
<li><code>-19</code>: signal <code>STOP</code>, 程序的停止指令，等同於 <code>Ctrl+Z</code></li>
</ul>
<h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>查詢系統版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsb_release -a</span><br></pre></td></tr></table></figure>

<p>查看記憶體</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ free</span><br><span class="line"></span><br><span class="line">$ free -m</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="http://note.drx.tw/2008/04/command.html">GNU &#x2F; Linux 各種壓縮與解壓縮指令</a></li>
<li><a href="https://blog.gtwang.org/linux/rsync-local-remote-file-synchronization-commands/">Linux 使用 rsync 遠端檔案同步與備份工具教學與範例</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>commands</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] Shell script 取得日期</title>
    <url>/posts/bfaa062d/</url>
    <content><![CDATA[<p>這裡紀錄一下如何用 shell script 取得日期時間:</p>
<h2 id="取得今天的日期時間"><a href="#取得今天的日期時間" class="headerlink" title="取得今天的日期時間"></a>取得今天的日期時間</h2><p>主要使用 <code>date</code> 指令，後面加上 <code>+FORMAT</code> 即可取得指定格式的日期時間:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TODAY=`<span class="built_in">date</span> <span class="string">&#x27;+%Y-%m-%d %H:%M:%S&#x27;</span>`	<span class="comment"># 取得格式為: YYYY-mm-dd HH:MM:SS 的日期時間</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="取得昨天的日期"><a href="#取得昨天的日期" class="headerlink" title="取得昨天的日期"></a>取得昨天的日期</h2><p>使用 <code>-d</code> 參數，後面一樣可以加上 <code>+FORMAT</code> 來指定日期格式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YESTERDAY=`<span class="built_in">date</span> -d<span class="string">&#x27;-1 day&#x27;</span> +%Y%m%d`</span><br></pre></td></tr></table></figure>

<h2 id="取得明天的日期"><a href="#取得明天的日期" class="headerlink" title="取得明天的日期"></a>取得明天的日期</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TOMORROW=`<span class="built_in">date</span> -d<span class="string">&#x27;1 day&#x27;</span> +%Y%m%d`</span><br></pre></td></tr></table></figure>

<h2 id="取得上星期的日期"><a href="#取得上星期的日期" class="headerlink" title="取得上星期的日期"></a>取得上星期的日期</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LAST_WEEK=`<span class="built_in">date</span> -d<span class="string">&#x27;-1 week&#x27;</span> +%Y%m%d`</span><br></pre></td></tr></table></figure>

<h2 id="取得上個月的日期"><a href="#取得上個月的日期" class="headerlink" title="取得上個月的日期"></a>取得上個月的日期</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LAST_MONTH=`<span class="built_in">date</span> -d<span class="string">&#x27;-1 month&#x27;</span> +%Y%m%d`</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://mark528.pixnet.net/blog/post/7267328-shell-script%EF%BC%9A%E9%81%8B%E7%94%A8-date-%E6%8C%87%E4%BB%A4%E5%8F%96%E5%BE%97%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93%28linux%29">Shell Script：運用 date 指令取得日期時間(Linux)</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell script</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] tmux 工具</title>
    <url>/posts/7bf615ad/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>tmux 是一個 Terminal Multiplexer, 它可以在一個 terminal 中開啟多個視窗、切割視窗區塊，讓我們在一個 terminal 中就能完成許多操作。它還可以保存 session 狀態，我們可以隨時離開(detach)這個連線 session, 也能夠隨時回到(attach)上次離開時的 session 狀態, 可以避免操作內容因為網路斷線而未儲存或是被中斷。而 tmux 會一直維持這個 session 直到被 delete 或是機器重新啟動。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>On Ubuntu:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install tmux</span><br></pre></td></tr></table></figure>

<p>裝完之後可以執行 <code>tmux</code> 指令，就會看到 terminal 下方會有一條綠色的狀態列:</p>
<p><img src="https://i.imgur.com/2wzCZjg.png" alt="image"></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>接下來介紹一下 tmux 中的基本概念:</p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>一個 terminal 中可以有多個 session, 每次使用 <code>tmux</code> 指令之後就會產生一個新的 session, 每個 session 是各自獨立的。</p>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>一個 session 中可以開啟多個 window (視窗)，讓多個程式在不同視窗中執行。</p>
<h3 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h3><p>一個 window 中可以切割成多個 pane (區塊)，方便在同一個視窗中直接觀察多個 pane 中的內容。</p>
<p><img src="https://i.imgur.com/oPZx2gd.png" alt="tmux2"></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="未開啟-tmux-之前的操作"><a href="#未開啟-tmux-之前的操作" class="headerlink" title="未開啟 tmux 之前的操作"></a>未開啟 tmux 之前的操作</h3><ul>
<li><p>建立新的 session</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux</span><br></pre></td></tr></table></figure>
</li>
<li><p>回到已存在的 session</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux a [session name]</span><br></pre></td></tr></table></figure>

<p>若未輸入 session name, 則會連到最近使用的 session.</p>
</li>
<li><p>查看目前的 session list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="開啟-tmux-後的操作"><a href="#開啟-tmux-後的操作" class="headerlink" title="開啟 tmux 後的操作"></a>開啟 tmux 後的操作</h3><p>開啟 tmux 之後, 大部分指令都需要先按 <code>Ctrl + b</code> 之後再按快捷鍵進行操作: (以下以 <code>&lt;prefix&gt;</code> 表示 <code>Ctrl + b</code>)</p>
<h4 id="session-1"><a href="#session-1" class="headerlink" title="session"></a>session</h4><ul>
<li><code>&lt;prefix&gt;</code> + d: Detach current session</li>
<li><code>&lt;prefix&gt;</code> + $: Rename session</li>
<li>Ctrl + f: Find the session name and switch to the specified session</li>
</ul>
<h4 id="window-1"><a href="#window-1" class="headerlink" title="window"></a>window</h4><ul>
<li><code>&lt;prefix&gt;</code> + c: Create new window</li>
<li><code>&lt;prefix&gt;</code> + p: Change to previous window</li>
<li><code>&lt;prefix&gt;</code> + n: Change to next window</li>
<li><code>&lt;prefix&gt;</code> + 0 ~ 9: Change to the specified window</li>
<li><code>&lt;prefix&gt;</code> + w: List all windows</li>
<li><code>&lt;prefix&gt;</code> + ,: Rename the current window</li>
<li><code>&lt;prefix&gt;</code> + .: Renumber the current window</li>
<li><code>&lt;prefix&gt;</code> + &amp;: Close the current window</li>
<li><code>&lt;prefix&gt;</code> + f: Find the window name and switch to the specified window</li>
</ul>
<h4 id="pane-1"><a href="#pane-1" class="headerlink" title="pane"></a>pane</h4><ul>
<li><code>&lt;prefix&gt;</code> + t: Clock mode</li>
<li><code>&lt;prefix&gt;</code> + x: Close the current pane</li>
<li><code>&lt;prefix&gt;</code> + %: Vertical split the window</li>
<li><code>&lt;prefix&gt;</code> + “: Horizontal split the window</li>
<li><code>&lt;prefix&gt;</code> + arrow keys: move between panes</li>
</ul>
<p>另外也附上我比較常使用的 config 及 tmux theme: <a href="https://github.com/wshs0713/myConfig">Github - myConfig</a></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://larrylu.blog/tmux-33a24e595fbc">終端機 session 管理神器 — tmux</a></li>
<li><a href="https://github.com/wshs0713/myConfig">Github - myConfig</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] 使用 crontab 排程</title>
    <url>/posts/d661a182/</url>
    <content><![CDATA[<p><a href="https://code.kpman.cc/2015/02/11/%E5%88%A9%E7%94%A8-crontab-%E4%BE%86%E5%81%9A-Linux-%E5%9B%BA%E5%AE%9A%E6%8E%92%E7%A8%8B/"><img src="http://i.imgur.com/kcFpx34.png" alt="Crontab"></a></p>
<h1 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h1><p>Crontab 是 Linux 系統內建的工作排程機制，可以依照設定的時間執行例行性工作。</p>
<span id="more"></span>

<h2 id="格式說明"><a href="#格式說明" class="headerlink" title="格式說明"></a>格式說明</h2><p>在 crontab 文件中，最上方可以設定 crontab 參數:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash                         <span class="comment"># 使用的 shell</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin      <span class="comment"># 執行檔搜尋路徑</span></span><br><span class="line">MAILTO=<span class="string">&quot;your_email&quot;</span>                     <span class="comment"># 如果有額外的 stdout, 會 email 到此信箱</span></span><br></pre></td></tr></table></figure>

<p>接著設定工作排程內容，一行是一項工作排程，每行包含 6 個參數，依序是<code>分</code>、<code>時</code>、<code>日</code>、<code>月</code>、<code>星期</code>以及<code>要執行的 command</code>，詳細說明如下:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">* * * * * &lt;command to be executed&gt;</span><br><span class="line">│ │ │ │ └ 星期 (0-7, 0 和 7 都是星期天)</span><br><span class="line">│ │ │ └── 月 (1-12)</span><br><span class="line">│ │ └──── 日 (1-31)</span><br><span class="line">│ └────── 時 (0-23)</span><br><span class="line">└──────── 分 (0-59)</span><br></pre></td></tr></table></figure>

<h2 id="參數特殊符號意義"><a href="#參數特殊符號意義" class="headerlink" title="參數特殊符號意義"></a>參數特殊符號意義</h2><ul>
<li><code>*</code>: 代表任何時刻都接受。</li>
<li><code>,</code>: 代表分隔時段。例如: <code>0 6,18 * * * command</code>, 代表 6 點和 18 點都會執行 command。</li>
<li><code>-</code>: 代表一段時間範圍。例如: <code>30 12-15 * * * command</code>, 代表從 12 點到 15 點的每個 30 分都會執行 command。</li>
<li><code>/n</code>: 代表每隔 n 單位間隔，n 為一個數字。例如: <code>*/10 * * * * command</code>, 代表每隔 10 分鐘執行一次 command。</li>
</ul>
<p>另外還有一些更方便的參數，可以取代前面 5 個參數:</p>
<ul>
<li><code>@reboot</code>: 只在開機時執行一次。</li>
<li><code>@yearly</code>: 每年執行一次，等同於 <code>0 0 1 1 * command</code>.</li>
<li><code>@annually</code>: 和 <code>@yearly</code> 一樣。</li>
<li><code>@monthly</code>: 每月執行一次，等同於 <code>0 0 1 * * command</code>.</li>
<li><code>@weekly</code>: 每周執行一次，等同於 <code>0 0 * * 0 command</code>.</li>
<li><code>@daily</code>: 每天執行一次，等同於 <code>0 0 * * * command</code>.</li>
<li><code>@midnight</code>: 和 <code>@daily</code> 一樣。</li>
<li><code>@hourly</code>: 每小時執行一次，等同於 <code>0 * * * * command</code>.</li>
</ul>
<h2 id="設定-crontab"><a href="#設定-crontab" class="headerlink" title="設定 crontab"></a>設定 crontab</h2><p>了解 crontab 文件的內容後，接著撰寫要排程的內容，其中的 <code>command</code> 請使用 <strong>絕對路徑</strong> 避免錯誤。<br>通常我會另外寫一個 crontab file, 再透過以下指令來設定 crontab:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab &lt;crontab_file&gt;</span><br></pre></td></tr></table></figure>

<p>但是要注意此方式會完全覆蓋原本的 crontab 內容，如果不想要另外寫一個 crontab file，也可以執行 <code>$ crontab -e</code> 直接編輯此使用者的 crontab 內容，編輯後存檔即可設定好 crontab 排程。</p>
<h2 id="crontab-相關指令"><a href="#crontab-相關指令" class="headerlink" title="crontab 相關指令"></a>crontab 相關指令</h2><ul>
<li><code>$ crontab -l</code>: 列出使用者的 crontab 內容。</li>
<li><code>$ crontab -e</code>: 編輯使用者的 crontab 內容。</li>
<li><code>$ crontab -r</code>: 完全清除使用者的 crontab. (<strong>要小心使用!</strong>)</li>
</ul>
<h2 id="crontab-範例"><a href="#crontab-範例" class="headerlink" title="crontab 範例"></a>crontab 範例</h2><p>這裡附上 crontab 的範例提供參考:</p>
<p>Ex. 每天 1 點執行 <code>report.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># crontab_file.txt</span></span><br><span class="line"></span><br><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">MAILTO=<span class="string">&quot;your_email&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分 時 日 月 星期 指令</span></span><br><span class="line">0 1 * * * sh /home/user/crontab/report.sh</span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://code.kpman.cc/2015/02/11/%E5%88%A9%E7%94%A8-crontab-%E4%BE%86%E5%81%9A-Linux-%E5%9B%BA%E5%AE%9A%E6%8E%92%E7%A8%8B/">利用 crontab 來做 Linux 固定排程</a></li>
<li><a href="http://linux.vbird.org/linux_basic/0430cron.php#crontab">鳥哥的 Linux 私房菜 例行性工作排程(crontab)</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] 使用者帳號管理</title>
    <url>/posts/4128a650/</url>
    <content><![CDATA[<p>這篇文章主要是紀錄一下如何新增、刪除使用者以及設定使用者的 root 權限。</p>
<span id="more"></span>

<h2 id="建立使用者帳號"><a href="#建立使用者帳號" class="headerlink" title="建立使用者帳號"></a>建立使用者帳號</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立帳號</span></span><br><span class="line">$ sudo useradd &lt;username&gt; -m -s /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-m</code>: 建立家目錄，預設路徑是 <code>/home/&lt;username&gt;</code>，若想要更改家目錄路徑，可使用 <code>-d</code> 參數</li>
<li><code>-d</code>: 指定家目錄路徑，參數後方接路徑 (<code>-d &lt;path&gt;</code>)</li>
<li><code>-M</code>: 若不需要自動建立家目錄，則使用此參數</li>
<li><code>-s</code>: 指定登入的 shell</li>
</ul>
<p>新增帳號之後，需要再設定密碼才能開始使用此帳號:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 設定密碼</span></span><br><span class="line">$ sudo passwd &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="設定使用者-root-權限"><a href="#設定使用者-root-權限" class="headerlink" title="設定使用者 root 權限"></a>設定使用者 root 權限</h2><p>若使用者需要擁有 root 權限，可依照以下步驟做設定:  </p>
<ul>
<li>使用 visudo 編輯 &#x2F;etc&#x2F;sudoers 檔案</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo visudo</span><br></pre></td></tr></table></figure>

<ul>
<li>找到以下內容, 確認群組名稱及取消該行的註解 (此例的群組名稱為 sudo)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Allow members of group sudo to execute any command</span></span><br><span class="line">%sudo   ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>

<ul>
<li>新增使用者至該群組</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG &lt;group_name&gt; &lt;username&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>測試權限是否設定成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切換帳號</span></span><br><span class="line">$ su &lt;username&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所在群組</span></span><br><span class="line">$ <span class="built_in">groups</span></span><br><span class="line">&lt;username&gt; sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試 sudo 指令</span></span><br><span class="line">$ sudo <span class="built_in">whoami</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> &lt;username&gt;:</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h2 id="刪除使用者帳號"><a href="#刪除使用者帳號" class="headerlink" title="刪除使用者帳號"></a>刪除使用者帳號</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo deluser -remove-home &lt;username&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-remove-home</code>: 刪除使用者的家目錄</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.gtwang.org/linux/linux-useradd-command-tutorial-examples/">Linux 新增使用者 useradd 指令用法教學與範例</a></li>
<li><a href="http://claire-chang.com/2019/10/04/%E7%B5%A6%E4%BA%88%E4%BD%BF%E7%94%A8%E8%80%85%E5%B8%B3%E8%99%9Fsudo%E6%AC%8A%E9%99%90/">給予使用者帳號sudo權限</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] 設定 SSH 免密碼登入</title>
    <url>/posts/69b8a25e/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用 scp, rsync 等工具傳送檔案時，需要手動輸入密碼才可進行操作，但如果我們想要使用 crontab 排程定時備份資料時，就無法手動輸入密碼再進行備份，因此這一篇文章主要紀錄如何設定 SSH 不需要密碼即可登入。</p>
<span id="more"></span>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>首先，我們需要有兩台主機的使用者，以下稱兩台主機分別為 <code>local</code> 及 <code>remote</code>，<code>local</code> 的使用者為 <code>user1</code>, <code>remote</code> 的使用者則是 <code>user2</code>.</p>
<h3 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h3><p>接著我們在 <code>local</code> 透過 <code>ssh-keygen</code> 來建立 private key 和 public key.</p>
<p>先切換到 <code>.ssh/</code>, 並確認資料夾權限為 <code>700</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh/</span><br></pre></td></tr></table></figure>

<p>執行 <code>ssh-keygen</code> 指令，建立 private key 和 public key, 演算法可以選擇 <code>rsa</code> 或 <code>dsa</code>，預設是 <code>rsa</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa     <span class="comment"># 過程中一直按 Enter 即可</span></span><br></pre></td></tr></table></figure>

<p>執行完後，會在 <code>~/.ssh/</code> 中看到以下檔案:</p>
<ul>
<li>id_rsa: private key, 權限必須是 <code>600</code>.</li>
<li>id_rsa.pub: public key, 權限為 <code>644</code>.</li>
</ul>
<p>將 public key 傳送到 <code>remote</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scp id_rsa.pub user2@remote:~/</span><br></pre></td></tr></table></figure>

<h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><p>登入 <code>remote</code> 主機後，先確認是否有 <code>~/.ssh/</code>，如果沒有則需要自行建立，並將權限設為 <code>700</code>.</p>
<p>接著將剛才傳來的 public key <code>id_rsa.pub</code> append to <code>~/.ssh/authorized_keys</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>: <code>authorized_keys</code>的權限必須是 <code>644</code>.</p>
<p>完成後就不需要密碼就可以從 <code>local</code> 的 <code>user1</code> 用戶登入 <code>remote</code> 的 <code>user2</code> 用戶囉~ </p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.longwin.com.tw/2005/12/ssh_keygen_no_passwd/">ssh keygen 免輸入密碼</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>[Linux] 設定系統時區和時間</title>
    <url>/posts/7c844aef/</url>
    <content><![CDATA[<h1 id="設定時區"><a href="#設定時區" class="headerlink" title="設定時區"></a>設定時區</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Taipei /etc/localtime</span><br></pre></td></tr></table></figure>

<h1 id="設定時間"><a href="#設定時間" class="headerlink" title="設定時間"></a>設定時間</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式: MMDDhhmmYYYY</span></span><br><span class="line">$ sudo <span class="built_in">date</span> <span class="string">&quot;101213002018&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://jerrynest.io/ubuntu-set-time/">[Ubuntu] 設定時區與時間</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[Logstash] Multiple Elasticsearch outputs</title>
    <url>/posts/722452db/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果我們希望可以依照不同的 Input 做不同的 Output 處理，可以參考此文章來做設定。</p>
<span id="more"></span>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>我們在設定 Logstash 時，可以設定 Input 的 <code>type</code>, 之後在 Filter 或是 Output 的部分可以利用 <code>type</code> 來做不同的處理。設定範例如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;/home/user/test.log&quot;</span>]</span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;test_log&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;home/user/logs/server.log&quot;</span>]</span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;server_log&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;home/user/logs/dev.log&quot;</span>]</span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;dev_log&quot;</span></span><br><span class="line">  &#125;<span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;home/user/logs/tmp.log&quot;</span>]</span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;sys_log&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">  <span class="string">grok</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;\[(?&lt;date&gt;.+?)\] <span class="template-variable">%&#123;LOGLEVEL:level&#125;</span> <span class="template-variable">%&#123;DATA:logger&#125;</span> - client:<span class="template-variable">%&#123;IPV4:client_ip&#125;</span>, <span class="template-variable">%&#123;DATA:message&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">if</span> [<span class="string">type</span>] <span class="string">in</span> [<span class="string">&quot;test_log&quot;</span>, <span class="string">&quot;server_log&quot;</span>] &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;type&#125;</span>&quot;</span>            <span class="comment"># index 名稱 = type value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">else</span> <span class="string">if</span> [<span class="string">type</span>] <span class="string">==</span> <span class="string">&quot;sys_log&quot;</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;syslog&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">else</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的範例是只有做 Multiple outputs, 依據 <code>type</code> 不同輸出到不同的 Elasticsearch index.</p>
<p>依照範例設定好之後，重新啟動 Logstash 就可以在 Kibana 看到新的 Log 資料囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://gist.github.com/jhmartin/c09e450853e273ee88f2">Multiple Elasticsearch outputs in logstash</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Logstash</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>[Logstash] 修改 timestamp</title>
    <url>/posts/f772c178/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果我們希望讓 Elasticsearch 的 <code>timestamp</code> 和 Log 的時間是一樣的，我們可以在 Filter 的部分做 <code>timestamp</code> 替換的動作，替換之後可以更清楚地了解系統狀態，我們可以方便地切換時間區間，觀察每個時段的系統狀態、成長趨勢等等，下圖範例是本周的系統狀態：</p>
<p><img src="https://i.imgur.com/UtidMF7.png" alt="Kibana (@timestamp per 3 hour)"></p>
<span id="more"></span>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><p>我們接下來看一下要如何修改 Logstash config, 替換 <code>timestamp</code>:</p>
<p>Logstash config:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">  <span class="string">file</span> &#123;</span><br><span class="line">    <span class="string">path</span> <span class="string">=&gt;</span> [<span class="string">&quot;/home/user/test.log&quot;</span>]</span><br><span class="line">    <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;test_log&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">  <span class="string">grok</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;\[(?&lt;date&gt;.+?)\] <span class="template-variable">%&#123;LOGLEVEL:level&#125;</span> <span class="template-variable">%&#123;DATA:logger&#125;</span> - client:<span class="template-variable">%&#123;IPV4:client_ip&#125;</span>, <span class="template-variable">%&#123;DATA:message&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;localhost:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;log-test&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Filter 中，我們先利用 <code>grok</code> 取出所需要的欄位資料，再將 <code>date</code> 利用 <a href="https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date-match">date filter</a> 來替換掉目前的 <code>timestamp</code>, 其中第 15 行的 match array 的格式是: <code>match =&gt; [field, formats...]</code>，第 0 個元素是欄位名稱，以此範例來說就是 <code>date</code>，而第 1 個元素以後都是 <code>date</code> 的日期格式，如果有多種日期格式，可以寫在 match array 中，例如:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">  <span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>, <span class="string">&quot;MMM dd yyy HH:mm:ss&quot;</span>, <span class="string">&quot;ISO8601&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改好 Logstash config 之後重新啟動 Logstash, 就可以在 Kibana 中看到新的 Log 資料，也可以輕鬆地調整時間範圍來觀察系統狀態囉!</p>
<p><img src="https://i.imgur.com/yHY2f9f.png" alt="Kibana (Hourly)"></p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10187741">Day12 - Reformate timestamp</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
        <category>Logstash</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>[MAC] 基礎建置(Homebrew, iTerm2, oh-my-zsh)</title>
    <url>/posts/8078f16/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://i.imgur.com/iX23ixa.png" alt="Terminal"></p>
<p>因為在開發時都會使用 command line 來做事，這篇文章主要紀錄一下如何做基礎設置，並把 Terminal 設定得漂亮一點~</p>
<span id="more"></span>

<h2 id="Install-Homebrew"><a href="#Install-Homebrew" class="headerlink" title="Install Homebrew"></a>Install Homebrew</h2><p><a href="https://brew.sh/index_zh-tw.html">Homebrew</a> 是 Mac OSX 上的套件管理工具，安裝方式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>接著可以輸入以下指令確認是否有安裝成功:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew --version</span><br></pre></td></tr></table></figure>

<p>如果出現 <code>brew command not found</code> 之類的錯誤訊息，須將 homebrew 路徑加入至 <code>PATH</code> 環境變數:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/opt/homebrew/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-git"><a href="#Install-git" class="headerlink" title="Install git"></a>Install git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<p>另外可以參考 <a href="https://github.com/wshs0713/myConfig/blob/master/.gitconfig">myConfig - .gitconfig</a> 做一些 git general config.</p>
<h2 id="Install-iTerm2"><a href="#Install-iTerm2" class="headerlink" title="Install iTerm2"></a>Install iTerm2</h2><p><a href="https://iterm2.com/features.html">iTerm2</a> 是一個可以用來取代 MAC 原生 terminal 的工具，它有許多更方便的功能:</p>
<ul>
<li>方便客製化</li>
<li>介面美觀，有很多主題可以下載、安裝</li>
<li>可以開多個分頁</li>
</ul>
<p>安裝方式可以直接到官網下載即可。</p>
<h3 id="Install-iTerm2-themes"><a href="#Install-iTerm2-themes" class="headerlink" title="Install iTerm2 themes"></a>Install iTerm2 themes</h3><p>iTerm2 有非常多主題可以下載，可以到 <a href="https://iterm2colorschemes.com/">iterm2 color schemes</a> 找自己喜歡的配色，右上角也能夠直接下載全部主題。</p>
<p>找到喜歡的主題後，打開 iTerm2 後按 <code>cmd + i</code>, 選擇 <code>color</code> tab, 從右下角選擇 <code>Presets</code> -&gt; <code>import</code> 匯入喜歡的主題後並套用。這裡我使用的是: Adventure.</p>
<p><img src="https://i.imgur.com/pxivAmb.png" alt="Color tab"></p>
<h3 id="Install-fonts"><a href="#Install-fonts" class="headerlink" title="Install fonts"></a>Install fonts</h3><p>設定好之後可能會發現有些亂碼，這時我們需要安裝一些字型才能夠正確顯示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/cask-fonts</span><br><span class="line">$ brew install --cask font-sauce-code-pro-nerd-font</span><br></pre></td></tr></table></figure>

<p>也可以使用以下指令來搜尋更多 nerd 字型，再挑選自己喜歡的來安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew search --cask nerd</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/WRjGRkh.png" alt="Nerd fonts"></p>
<p>安裝完後記得要再去設定字型: <code>cmd + i</code> &gt; <code>Text</code></p>
<p><img src="https://i.imgur.com/RbU8rIr.png" alt="Text tab"></p>
<h2 id="Install-ZSH"><a href="#Install-ZSH" class="headerlink" title="Install ZSH"></a>Install ZSH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install zsh</span><br></pre></td></tr></table></figure>

<p>並把 zsh 設為預設的 shell:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&quot;echo <span class="subst">$(which zsh)</span> &gt;&gt; /etc/shells&quot;</span> </span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure>

<p>接著重開 terminal, 並輸入以下指令確認是否成功設定為 ZSH:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-Oh-My-ZSH"><a href="#Install-Oh-My-ZSH" class="headerlink" title="Install Oh My ZSH"></a>Install Oh My ZSH</h2><p><a href="https://ohmyz.sh/">Oh My Zsh</a> 是一個用來管理 ZSH 設定檔的框架，提供了很多 plugin 和 theme 可以選擇。</p>
<p>安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>接著要套用主題，輸入以下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>接著會打開 zsh 的設定檔，找到 <code>ZSH_THEME=&quot;...&quot;</code>，將這段的內容改成以下內容並存檔(<code>cmd + s</code>):</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br></pre></td></tr></table></figure>

<p>依照以上步驟設定完之後，terminal 會長這樣:</p>
<p><img src="https://i.imgur.com/iX23ixa.png" alt="Terminal"></p>
<p>這樣就比原本的美觀很多了!</p>
<p>另外順便推薦一個好用的 application: <a href="https://webcatalog.io/webcatalog/">WebCatalog</a>, 它可以將許多常用的網站打包成 application, 就不用一直在多個瀏覽器標籤之間切換，非常方便～</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://medium.com/statementdog-engineering/prettify-your-zsh-command-line-prompt-3ca2acc967f">超簡單！十分鐘打造漂亮又好用的 zsh command line 環境</a></li>
<li><a href="https://pjchender.blogspot.com/2017/02/mac-terminal-iterm-2-oh-my-zsh.html">為 MAC 的 Terminal 上色 - 透過 iTerm 2 和 Oh My Zsh 高亮你的終端機</a></li>
</ul>
]]></content>
      <categories>
        <category>MAC</category>
      </categories>
      <tags>
        <tag>MAC</tag>
        <tag>Homebrew</tag>
        <tag>iTerm2</tag>
        <tag>oh-my-zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] Nginx proxy 處理特定 HTTP 錯誤</title>
    <url>/posts/e061d168/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用 Nginx 當作 proxy 時，可以設定 Nginx 作為 failover 機制，但是 Nginx 判斷 node 失敗預設是以 connection refuse 和 timeout 為主，而不是以 HTTP 錯誤狀態來做判斷，因為 HTTP 只要可以回傳狀態，代表該 node 可以正常連接，因此 Nginx 會判斷該 node 是正常的。如果想要針對特定的 HTTP 錯誤來做處理，可以使用 <code>proxy_next_upstream</code> 參數來設定。</p>
<span id="more"></span>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><h3 id="proxy-next-upstream"><a href="#proxy-next-upstream" class="headerlink" title="proxy_next_upstream"></a>proxy_next_upstream</h3><p>Syntax: <code>proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;</code><br>Default: <code>proxy_next_upstream error timeout;</code>  </p>
<p>設定範例如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">api</span> &#123;</span><br><span class="line">    <span class="string">server</span> <span class="string">server1.com:8000</span> <span class="string">fail_timeout=60s</span> <span class="string">max_fails=1;</span></span><br><span class="line">    <span class="string">server</span> <span class="string">server2.com:8080</span> <span class="string">backup;</span></span><br><span class="line">    <span class="string">keepalive</span> <span class="number">256</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">6000</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">        <span class="string">proxy_pass</span>          <span class="string">http://api;</span></span><br><span class="line">        <span class="string">proxy_http_version</span>  <span class="number">1.1</span><span class="string">;</span></span><br><span class="line">        <span class="string">proxy_connect_timeout</span>   <span class="string">15s;</span></span><br><span class="line">        <span class="string">proxy_read_timeout</span>  <span class="string">15s;</span></span><br><span class="line">        <span class="string">proxy_next_upstream</span> <span class="string">error</span> <span class="string">timeout</span> <span class="string">http_500</span> <span class="string">http_502</span> <span class="string">http_503</span> <span class="string">http_504</span> <span class="string">non_idempotent;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">proxy_set_header</span>    <span class="string">Connection</span>  <span class="string">&quot;&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">proxy_set_header</span>    <span class="string">Host</span>    <span class="string">$http_host;</span></span><br><span class="line">        <span class="string">proxy_set_header</span>    <span class="string">X-Real-IP</span>   <span class="string">$remote_addr;</span></span><br><span class="line">        <span class="string">proxy_set_header</span>    <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要處理 connection refuse, timeout, 500, 502, 503 和 504 的錯誤，而加上 <code>non_idempotent</code> 則是因為 Nginx 預設是不會重試 non-idempotent method (POST, LOCK, PATCH), 如果要重試就需要加上此設定。</p>
<p>最後重新啟動 Nginx 就可以囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream">Module ngx_http_proxy_module</a></li>
<li><a href="https://linuxscriptshub.com/nginxupstream%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E9%94%99/">NGINX的upstream容错</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/35803906">nginx的proxy_next_upstream使用中的一个坑</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] Nginx 安裝及設定</title>
    <url>/posts/6a171975/</url>
    <content><![CDATA[<p><img src="https://www.nginx.com/wp-content/uploads/2018/08/NGINX-logo-rgb-large.png" alt="Nginx"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx 是一個 Web Server, 也可以用來作為 Reverse Proxy, Load Balancer 和 HTTP cache.<br>這一篇文章主要紀錄如何安裝以及設定 Nginx。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 測試 Nginx config</span></span><br><span class="line">$ sudo nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 Nginx</span></span><br><span class="line">$ sudo nginx -c &lt;config_path&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 關閉 Nginx</span></span><br><span class="line">$ sudo nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reload</span></span><br><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="Nginx-設定"><a href="#Nginx-設定" class="headerlink" title="Nginx 設定"></a>Nginx 設定</h2><h3 id="資料夾結構"><a href="#資料夾結構" class="headerlink" title="資料夾結構"></a>資料夾結構</h3><p>Nginx 主要的設定內容放在 <code>/etc/nginx</code>，資料夾結構如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/etc/nginx/</span><br><span class="line">├─ conf.d/</span><br><span class="line">├─ fastcgi.conf</span><br><span class="line">├─ fastcgi_params</span><br><span class="line">├─ koi-utf</span><br><span class="line">├─ koi-win</span><br><span class="line">├─ mime.types</span><br><span class="line">├─ nginx.conf</span><br><span class="line">├─ proxy.conf</span><br><span class="line">├─ proxy_params</span><br><span class="line">├─ scgi_params</span><br><span class="line">├─ sites-available/</span><br><span class="line">├─ sites-enabled/</span><br><span class="line">├─ uwsgi_params</span><br><span class="line">└─ win-utf</span><br></pre></td></tr></table></figure>

<p>其中:</p>
<ul>
<li><code>/etc/nginx/sites-available</code>: 用來存放每個服務的設定檔</li>
<li><code>/etc/nginx/sites-enabled</code>: 用來放要啟用的服務的設定檔，在此資料夾底下建立 symbolic link 連結到 <code>/etc/nginx/sites-available</code> 底下的設定檔</li>
</ul>
<h3 id="設定檔說明"><a href="#設定檔說明" class="headerlink" title="設定檔說明"></a>設定檔說明</h3><p>Nginx 主要的設定檔是 <code>/etc/nginx/nginx.conf</code>，基本結構如下:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global block: 設定 Nginx server 運行的相關配置，ex. worker_processes, pid</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment"># events block: 設定 Nginx server 和 client 的網路連結</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># http block: 包含 proxy, cache, log...等功能都在此區塊設定</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># server block: 通常會設定 server name, listen port...等</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># location block: 設定針對不同路徑做不同的處理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本範例:</p>
<p><code>/etc/nginx/nginx.conf</code>:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nginx user</span></span><br><span class="line"><span class="comment">#user   nobody;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定 worker process 的數量，通常會設定成 CPU 的核心數，或是也可以設成 auto 讓 Nginx 自動偵測</span></span><br><span class="line"><span class="attribute">worker_processes</span>    <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pid    /var/run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment"># 允許同一時間連線總數量</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 epoll 效能較好</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/proxy.conf;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不顯示 Nginx 版本，避免暴露出伺服器可能的弱點</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log settings</span></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log main;</span><br><span class="line">    <span class="attribute">error_log</span>   /var/log/nginx/<span class="literal">error</span>.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>      <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>     <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip 壓縮, 預設是不啟動</span></span><br><span class="line">    <span class="attribute">gzip</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_vary</span>       <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span>    <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">gzip_proxied</span>    expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">    <span class="attribute">gzip_types</span>      text/plain text/css text/javascript application/json</span><br><span class="line">                    application/javascript application/x-javascript</span><br><span class="line">                    text/xml application/xml image/png image/x-icon</span><br><span class="line">                    image/x-jng image/svg+xml image/webp image/gif image/jpeg;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 載入設定檔</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>/etc/nginx/proxy.conf</code>:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_http_version</span>  <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_set_header</span>    Connection  <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>    X-Real-IP   <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>    X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>    Host    <span class="variable">$http_host</span>;</span><br></pre></td></tr></table></figure>

<p>載入的 Server 設定檔(<code>/etc/nginx/sites-available/api.conf</code>)範例:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">root</span>    /home/user/web;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 預設編碼，若未設定，讓網頁中 meta 或 header 會自行定義</span></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Access log 存放位置</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/localhost.access.log;</span></span><br><span class="line">    <span class="comment">#error_log   /var/log/nginx/localhost.error.log;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Cache 靜態檔案</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(ico|jpg|jpeg|png|gif|js|css|svg)$</span> &#123;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">expires</span> <span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, no-transform&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span>   index.html index.htm;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">$uri</span>.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁止存取隱藏檔案</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /\.</span> &#123;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Location-syntax"><a href="#Location-syntax" class="headerlink" title="Location syntax"></a>Location syntax</h3><p>Location 有以下兩種語法:</p>
<ul>
<li><code>location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</code></li>
<li><code>location @name &#123; ... &#125;</code></li>
</ul>
<p>這裡我們先以第一種語法為主，它的優先順序及說明如下:</p>
<ol>
<li><code>location = /url</code>: Exactly matching<ul>
<li>比對成功後，會停止比對後面的規則</li>
</ul>
</li>
<li><code>location ^~ /url</code>: The url must start with the specified pattern.<ul>
<li>一般字串比對</li>
<li>比對成功後，會停止比對後面的規則</li>
</ul>
</li>
<li><code>location ~ /url</code> 或 <code>location ~* /url</code>: Regex matching<ul>
<li><code>~</code>: case sensitive matching</li>
<li><code>~*</code>: case insensitive matching</li>
</ul>
</li>
<li><code>location /url</code>: The url must start with the specified pattern.</li>
<li><code>location /</code>: 所有 request 都會比對到此規則</li>
</ol>
<p>以上就是 location 的基本語法，另外可以到 <a href="https://nginx.viraptor.info/">Nginx location match tester</a> 去測試 location 的設定~</p>
<h3 id="Proxy-設定範例"><a href="#Proxy-設定範例" class="headerlink" title="Proxy 設定範例"></a>Proxy 設定範例</h3><p>此範例是由 localhost:6000 接收到 request 後, 轉發到設定的 api server.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> api &#123;</span><br><span class="line">    <span class="attribute">server</span> server.com:<span class="number">8000</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">6000</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP authentication</span></span><br><span class="line">    <span class="attribute">auth_basic</span>  <span class="string">&quot;Auth&quot;</span>;</span><br><span class="line">    <span class="attribute">auth_basic_user_file</span>    /path/to/password/file;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 設定 body 長度限制</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span>    <span class="number">100M</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(ico|jpg|jpeg|png|gif|js|css|svg)$</span> &#123;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">expires</span> <span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public, no-transform&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>          http://api;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>   <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>      <span class="number">60s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 禁止存取隱藏檔案</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /\.</span> &#123;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>其中 <code>upstream</code> block 定義了要將 request proxy 過去的 application, <code>keepalive</code> 是設定閒置的連線最大數量，當超過此上限時，將會關閉最近使用最少的連線，假設目前有100個閒置的連線，而我們設定 <code>keepalive=64</code>，所以最近最少使用的36個連線會被關閉，這個參數要小心設定，如果設太小，會造成 Nginx 一直關閉、開啟和後端的連線，會出現大量的 TIME_WAIT 的情況。另外要讓 Nginx 可以使用 <code>keepalive</code> 和後端連線必須要使用 HTTP 1.1，因此需要設定 <code>proxy_http_version 1.1</code>，同時也記得設定 <code>proxy_set_header Connection &quot;&quot;</code> 清理 header.</p>
<p><code>auth_basic</code> 和 <code>auth_basic_user_file</code> 則是設定 Nginx 使用 HTTP authentication, <code>auth_basic_user_file</code> 為 password file.</p>
<p><code>client_max_body_size</code> 設定 Body 最大長度限制，超過限制則會出現 <code>HTTP ERROR: 413 Request Entity Too Large</code> 的錯誤訊息。</p>
<p>最後使用 <code>proxy_pass</code> 設定轉發到 updstream api server.</p>
<h3 id="Proxy-as-failover-設定範例"><a href="#Proxy-as-failover-設定範例" class="headerlink" title="Proxy as failover 設定範例"></a>Proxy as failover 設定範例</h3><p>在此設定範例中，如果第一個 server fail(<code>proxy_connect_timeout</code>)次數超過 <code>max_fails</code> (預設為1), 第二個 server 將會用來取代 server1，持續的時間為 <code>fail_timeout</code>。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> api &#123;</span><br><span class="line">    <span class="attribute">server</span> server1.com:<span class="number">8000</span> fail_timeout=<span class="number">60s</span> max_fails=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> server2.com:<span class="number">8080</span> backup;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">256</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">6000</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>          http://api;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>   <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>      <span class="number">60s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Load-balancing-設定範例"><a href="#Load-balancing-設定範例" class="headerlink" title="Load balancing 設定範例"></a>Load balancing 設定範例</h3><p>Nginx 提供以下三種 load balancing 方法:</p>
<ul>
<li>round-robin: 會將請求輪流平均分配到每台伺服器上 (預設)</li>
<li>least_conn: 將請求分配到目前連線數最少的伺服器上</li>
<li>ip-hash: 利用 hash function 來決定使用者要被分配到哪個伺服器，此方法可以達到同一使用者(IP address)每次連結的伺服器是相同的</li>
</ul>
<p>此範例是將 Nginx 作為 Load Balancer, 並設定 load balancing 方式為 <code>least_conn</code>，將 request 分配至使用連線數最少的 server:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> api &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> server1.com;</span><br><span class="line">    <span class="attribute">server</span> server2.com;</span><br><span class="line">    <span class="attribute">server</span> server3.com;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">6000</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://api;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>   <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>      <span class="number">60s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外也可以設定分配的權重(weight)，weight 預設為 1，以下範例表示如果有 5 個新的請求，則會有 3 次被分配到 server1, server2 和 server3 各一次:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> api &#123;</span><br><span class="line">    <span class="attribute">server</span> server1.com weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> server2.com;</span><br><span class="line">    <span class="attribute">server</span> server3.com;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">6000</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://api;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>   <span class="number">10s</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>      <span class="number">60s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>現在多數的服務都會使用 HTTPS，在設定 HTTPS 之前，需要先申請 SSL 憑證，可以參考: <a href="/posts/d4a319ec/">[SSL] Nginx + Let’s encrypt SSL 憑證</a>，依照此文章設定完成後，可以在 <code>nginx.conf</code> 的 http block 中加上以下內容:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SSL settings</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span>   TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>   <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDH+AESGCM:EDCH+AES256:ECDH+AES128:!MD5:!aNULL;</span><br><span class="line">    <span class="comment"># Enable SSL cache</span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">30m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_tickets</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1h</span>;</span><br><span class="line">    <span class="comment"># Enable OCSP stapling</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://blog.gtwang.org/linux/nginx-php-fpm-configuration-optimization/">Nginx 與 PHP-FPM 最佳化效能設定教學與技巧</a></li>
<li><a href="https://www.maxlist.xyz/2020/06/18/flask-nginx/">淺談 Nginx 基本配置、負載均衡、緩存和反向代理</a></li>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">Nginx Location</a></li>
<li><a href="https://www.fatalerrors.org/a/common-nginx-regular-expressions.html">Common Nginx regular expressions</a></li>
<li><a href="https://smalltowntechblog.wordpress.com/2014/10/25/nginx-location-regex%E7%AD%86%E8%A8%98/">Nginx Location REGEX 比對語法和設定</a></li>
<li><a href="https://stackoverflow.com/questions/59846238/guide-on-how-to-use-regex-in-nginx-location-block-section">Guide on how to use regex in Nginx location block section?</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] 使用 Nginx 代理動態 IP 的服務</title>
    <url>/posts/4c986e0c/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近發現 Nginx 運行一段時間之後，就會出現以下幾種 error:</p>
<ul>
<li>connect() failed (111: Connection refused) while connecting to upstream</li>
<li>upstream timed out (110: Connection timed out) while connecting to upstream</li>
</ul>
<p>本來一直以為是 config 少設定了一些參數，後來才發現是 <strong>動態IP</strong> 的問題。<br>Nginx 在啟動時會向 DNS server 查詢 Domain 對應的 IP，之後就會 cache IP，直到下次重新載入 config 才會再更新，所以當我們服務的 IP 改變之後，Nginx 就會開始出現 Connect failed, Connection timeout 等 error.</p>
<span id="more"></span>

<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>以下有幾種解決方式:</p>
<ol>
<li>寫 cronjob, 偵測服務的 IP, 當 IP 有變動時, reload nginx.</li>
<li>在商業版的 Nginx 中，可以在 upstream 中使用 <code>resolve</code>.</li>
<li>在一般版的 Nginx 中，不使用 upstream，改用 set 將 url 設為變數，再傳遞給 proxy_pass.</li>
<li>使用 <a href="https://github.com/GUI/nginx-upstream-dynamic-servers">nginx-upstream-dynamic-servers</a>  module, 可以在 upstream 中使用 <code>resolve</code>.</li>
</ol>
<p>其中第一個方式算是比較應急的做法，建議還是要設定 Nginx 更新 IP 比較好。<br>第二個方式是可以付費購買 <a href="https://www.nginx.com/products/nginx">Nginx Plus</a>，接著修改 <code>nginx.conf</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  resolver 8.8.8.8 valid=30s;</span><br><span class="line"></span><br><span class="line">  upstream backend &#123;</span><br><span class="line">    zone upstream_dynamic 64k;</span><br><span class="line">    server server1.com.tw fail_timeout=60s max_fails=1 resolve;</span><br><span class="line">    server server2.com.tw backup resolve;</span><br><span class="line">    keepalive 256;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen      3000;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass  http://backend;</span><br><span class="line"></span><br><span class="line">      # ... 以下省略其他設定 ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是在 <code>http &#123;&#125;</code> 中設定 <code>resolver</code>, 以及在 <code>upstream &#123;&#125;</code> 中加上 <code>resolve</code>.<br><code>resolver</code> 是設定 DNS server, <code>valid</code> 是指 DNS server 回傳的 IP 會被 chache 的時間，在這個時間內不會再向 DNS server 詢問 IP.<br>設定完之後，resolver 就會按照 DNS server 的 TTL 來做更新。</p>
<p>第三個方式是將 url 設為變數，再傳給 proxy_pass:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  resolver 8.8.8.8 valid=30s;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen      3000;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    set $backend http://server1.com.tw;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass $backend;</span><br><span class="line"></span><br><span class="line">      # ... 以下省略其他設定 ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最後一個方式則是使用 <a href="https://github.com/GUI/nginx-upstream-dynamic-servers">nginx-upstream-dynamic-servers</a> module, 依照以下方式安裝:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Clone nginx-upstream-dynamic-servers</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/GUI/nginx-upstream-dynamic-servers.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加 Nginx module</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;NGINX_DIR&gt;</span><br><span class="line">$ ./configure --prefix=/home/&lt;user&gt;/nginx --add-module=/path/to/nginx-upstream-dynamic-servers</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>再來修改 <code>nginx.conf</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  resolver 8.8.8.8 valid=30s;</span><br><span class="line"></span><br><span class="line">  upstream backend &#123;</span><br><span class="line">    zone upstream_dynamic 64k;</span><br><span class="line">    server server1.com.tw fail_timeout=60s max_fails=1 resolve;</span><br><span class="line">    server server2.com.tw backup resolve;</span><br><span class="line">    keepalive 256;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen      3000;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass  http://backend;</span><br><span class="line"></span><br><span class="line">      # ... 以下省略其他設定 ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>設定的內容和第二個方式一樣，resolver 就會按照 DNS server 的 TTL 來做更新了!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver">Nginx Module ngx_http_core_module</a></li>
<li><a href="https://github.com/GUI/nginx-upstream-dynamic-servers">nginx-upstream-dynamic-servers</a></li>
<li><a href="https://shazi.info/%E7%95%B6-aws-%E7%9A%84-elbalb-%E8%A2%AB-nginx-%E4%BB%A3%E7%90%86%E5%BE%8C%E7%9A%84%E5%8B%95%E6%85%8B-ip-%E5%95%8F%E9%A1%8C/">當 AWS 的 ELB&#x2F;ALB 被 Nginx 代理後的動態 IP 問題</a></li>
<li><a href="https://www.jibing57.com/2018/11/27/nginx-with-dynamic-upstreams-to-ELB/">如何配置Nginx的Dynamic Upstream指向ELB</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] 解決 1024 worker_connections are not enough</title>
    <url>/posts/4fd84b79/</url>
    <content><![CDATA[<p>Nginx 可同時處理的連線數上限是 <code>worker_processes * worker_connections</code>, <code>worker_processes</code> 是 worker 的行程數，通常會設定成 CPU 核心數，或是也可以設定成 auto，讓 Nginx 自動偵測可用的 CPU 核心數。而<code>worker_connections</code> 是同一時間允許的連線總數量。</p>
<span id="more"></span>

<p> 如果遇到 <code>1024 worker_connections are not enough</code> 的問題，可以調整 <code>worker_processes</code> 或是 <code>worker_connections</code> 來增加 Nginx 同時可處理的連線數上限:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">worker_processes</span>    <span class="number">4</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> &#123;</span><br><span class="line">    <span class="string">worker_connections</span>  <span class="number">2048</span><span class="string">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] 解決 HTTP ERROR: 413 Request Entity Too Large</title>
    <url>/posts/f8ec6a24/</url>
    <content><![CDATA[<p>會出現 HTTP Error 413 是因為傳送的 Request 大小超過限制，我們可以透過設定 <code>client_max_body_size</code> 來調整 Request 的大小限制。</p>
<span id="more"></span>

<p>修改 <code>&lt;NGINX_DIR&gt;/conf/nginx.conf</code>, 可以在 http, server 或 location 其中一個 block 加入以下設定:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">client_max_body_size    100M;</span><br></pre></td></tr></table></figure>

<p>接著重新啟動 Nginx 就可以囉!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] 解決 Too many open files error</title>
    <url>/posts/975fb730/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用 Nginx 時, 發現一段時間後就會遇到 <code>24: Too many open files</code> 的 error, 這裡記錄一下查到的解決方法。</p>
<span id="more"></span>

<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>查看目前系統的設定:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure>

<p>接著編輯 <code>/etc/security/limits.conf</code>, 設定 nofile (max number of open files)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加或修改以下內容</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure>

<p>再來重新登入後, 輸入以下指令確認是否有設定成功:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure>

<p>如果沒有出現新的設定值的話，可以用 <code>ulimit -n 65536</code> 來強制設定，再用 <code>ulimit -n</code> 檢查看看。</p>
<h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul>
<li><a href="https://blog.longwin.com.tw/2011/05/nginx-worker-many-file-fix-2011/">Nginx 出現 500 Error 修復 (too many open file, connection)</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Nginx] 解決 connect() failed (111: Connection refused) while connecting to upstream</title>
    <url>/posts/8c1276a7/</url>
    <content><![CDATA[<p>在使用 Nginx 作為 Reverse proxy 時，有可能會遇到 <code>connect() failed (111: Connection refused) while connecting to upstream</code> 的問題，這個問題需要檢查 Nginx config 是否有正確設定 <code>proxy_http_version</code>。</p>
<span id="more"></span>

<p>這邊我們用 Nginx 作為 Elasticsearch 的 reverse proxy 來當作範例，設定檔如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">elasticsearch</span> &#123;</span><br><span class="line">  <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9200;</span></span><br><span class="line">  <span class="string">keepalive</span> <span class="number">64</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span>  <span class="number">8080</span><span class="string">;</span></span><br><span class="line">  <span class="string">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">    <span class="comment"># Proxy</span></span><br><span class="line">    <span class="string">proxy_pass</span>          <span class="string">http://elasticsearch;</span></span><br><span class="line">    <span class="string">proxy_redirect</span>      <span class="string">off;</span></span><br><span class="line">    <span class="string">proxy_http_version</span>  <span class="number">1.1</span><span class="string">;</span></span><br><span class="line">  </span><br><span class="line">    <span class="string">proxy_set_header</span>    <span class="string">Connection</span>  <span class="string">&quot;&quot;</span><span class="string">;</span></span><br><span class="line">    <span class="string">proxy_set_header</span>    <span class="string">X-Real-IP</span>   <span class="string">$remote_addr;</span></span><br><span class="line">    <span class="string">proxy_set_header</span>    <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">    <span class="string">proxy_set_header</span>    <span class="string">Host</span>    <span class="string">$http_host;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最重要的是 <code>proxy_http_version</code> 這個設定，要讓 Nginx 作為 proxy 可以和 upstream backend service 之間也使用 <code>keepalive</code>，必須使用 http 1.1，但預設值是 1.0，因此必須在 config 中加上此設定，同時也記得設定 <code>proxy_set_header Connection &quot;&quot;;</code></p>
<p>參考資料:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23909960/elasticsearch-connection-refused-while-connecting-to-upstream">Elasticsearch : Connection refused while connecting to upstream</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] 使用 SSL/TLS 憑證</title>
    <url>/posts/819b05c6/</url>
    <content><![CDATA[<p><a href="https://qph.fs.quoracdn.net/main-qimg-177d322e7f90f0d53f075bee8b17e25e"><img src="https://qph.fs.quoracdn.net/main-qimg-177d322e7f90f0d53f075bee8b17e25e" alt="TLS/SSL"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>SSL 全名是 Secure Sockets Layer (安全通訊端層)，是一種標準的技術，用來保持網路連線安全，防止敏感資料被竊取或傳輸的資料被修改。此技術可使用加密演算法來混淆傳輸的資料，防止資料被竊取。</p>
<span id="more"></span>

<h2 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h2><p>TLS (Transport Layer Security, 傳輸層安全協議) 是 IETF 將 SSL 標準化，並將名稱改為 TLS.</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS (Hyper Text Transfer Protocol Secure, 超文字傳輸安全協定) 是一種安全的網路傳輸協議，經由 HTTP 進行通訊，但利用 SSL&#x2F;TLS 來加密封包，保障資料傳輸的安全性及完整性。</p>
<h1 id="產生-SSL-x2F-TLS-憑證"><a href="#產生-SSL-x2F-TLS-憑證" class="headerlink" title="產生 SSL&#x2F;TLS 憑證"></a>產生 SSL&#x2F;TLS 憑證</h1><p>產生憑證有以下方式:</p>
<h2 id="申請免費-SSL-憑證"><a href="#申請免費-SSL-憑證" class="headerlink" title="申請免費 SSL 憑證"></a>申請免費 SSL 憑證</h2><p>詳細步驟可以參考: <a href="/posts/d4a319ec/">[SSL] Nginx + Let’s encrypt SSL 憑證</a>。</p>
<h2 id="自行簽署憑證"><a href="#自行簽署憑證" class="headerlink" title="自行簽署憑證"></a>自行簽署憑證</h2><p>使用 triple DES 演算法加密，產生長度為 2048 bits 的 RSA key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -des3 -out server.enc.key 2048</span><br></pre></td></tr></table></figure>

<p>產生 csr file:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl req -new -key server.enc.key -out server.csr</span><br></pre></td></tr></table></figure>

<p>產生未加密的 key:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> server.enc.key -out server.key</span><br></pre></td></tr></table></figure>

<p>最後，自行簽屬憑證:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure>

<h1 id="使用-SSL-x2F-TLS-憑證"><a href="#使用-SSL-x2F-TLS-憑證" class="headerlink" title="使用 SSL&#x2F;TLS 憑證"></a>使用 SSL&#x2F;TLS 憑證</h1><p>整合到目前的 Express app, 取代原本的 HTTP server:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增憑證 options</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">   key  : fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./ssl/server.key&#x27;</span>),</span><br><span class="line">   cert : fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./ssl/server.crt&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">https.<span class="title function_">createServer</span>(options, app).<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Started!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://www.websecurity.symantec.com/zh/hk/security-topics/what-is-ssl-tls-https">什麼是 SSL、TLS 以及 HTTPS？</a></li>
<li><a href="http://jade.logdown.com/posts/233332-nodejs-express-4x-using-https-ssl">Node.js - Express 4.x 使用 HTTPS&#x2F;SSL</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] 使用 mocha 做單元測試</title>
    <url>/posts/e7656e62/</url>
    <content><![CDATA[<p><a href="https://cldup.com/xFVFxOioAU.svg"><img src="https://cldup.com/xFVFxOioAU.svg" alt="mocha"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在開發專案的過程中，很重要的一個部份是測試。在開發時常常會遇到某次修改之後，原本正常的功能突然不能用了，透過單元測試可以確保每次修改後，沒有造成其他地方出問題。</p>
<p>Javascript 有許多單元測試框架，例如：<a href="https://mochajs.org/" title="mocha">mocha</a>, <a href="https://jestjs.io/" title="Jest">Jest</a>, <a href="https://jasmine.github.io/" title="Jasmine">Jasmine</a>…等，這篇文章主要是使用 mocha 測試框架。此外，我們還需要斷言庫來幫助我們判斷測試結果是否符合預期，這裡我們使用 <a href="https://www.chaijs.com/" title="chai">chai</a> 斷言庫。另外還可以搭配 <a href="https://github.com/visionmedia/supertest" title="supertest">supertest</a> 來測試 Node.js API, supertest 是一個提供輕量級的 HTTP Request 測試的套件，通常會用來測試 Node.js API.</p>
<p>接下來就記錄一下如何使用 mocha, chai 和 supertest 來做單元測試。</p>
<span id="more"></span>

<h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2><p>首先，要先安裝所需套件: mocha, chai, supertest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install mocha chai supertest --save</span><br></pre></td></tr></table></figure>

<h2 id="撰寫測試內容"><a href="#撰寫測試內容" class="headerlink" title="撰寫測試內容"></a>撰寫測試內容</h2><p>先在專案目錄底下建立 <code>test</code> 目錄，將測試的內容都放在此目錄底下，再來建立 <code>test_query.js</code> 就可以來撰寫測試內容了。</p>
<h3 id="語法簡介"><a href="#語法簡介" class="headerlink" title="語法簡介"></a>語法簡介</h3><ul>
<li><code>describe()</code>: 描述測試的區塊，可以當作一個測試群組，區塊中可以執行多個測試。</li>
<li><code>it()</code>: 每個測試的內容。</li>
<li><code>before()</code>: 在所有測試開始前，會執行此區塊的內容。</li>
<li><code>after()</code>: 在所有測試結束後，會執行此區塊的內容。</li>
<li><code>beforeEach()</code>: 在每個測試開始前，會執行此區塊的內容。</li>
<li><code>afterEach()</code>: 在每個測試結束後，會執行此區塊的內容。</li>
</ul>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>這裡的範例是做一些 API 的基本測試:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>).<span class="property">assert</span>;</span><br><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&#x27;../app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = supertest(<span class="string">&#x27;http://localhost:3000&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Basic test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;API status should be 200&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">        api.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            .<span class="title function_">expect</span>(<span class="number">200</span>, done);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;The result should be an object with keys&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">        api.<span class="title function_">get</span>(<span class="string">&#x27;/query?keyword=Apple&#x27;</span>)</span><br><span class="line">            .<span class="title function_">expect</span>(<span class="number">200</span>)</span><br><span class="line">            .<span class="title function_">end</span>(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">                assert.<span class="title function_">notExists</span>(err);</span><br><span class="line"></span><br><span class="line">                res.<span class="property">body</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    assert.<span class="title function_">hasAllKeys</span>(item, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>]);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="title function_">done</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>一開始先 require modules, 其中還有 require <code>app.js</code>, <code>app.js</code> 是 Epress.js entry point, 執行 mocha 測試後，會啟動 API server，並開始執行測試。</p>
<p>再來 <code>const api = supertest(&#39;http://localhost:3000&#39;);</code> 這部分是設定 API 路徑，使用 supertest 對 API 發出 request.</p>
<p>最後 <code>describe()</code> 區塊內容就是要測試的 case:</p>
<ul>
<li>測試 API 是否正常運作，stauts code 須為 200</li>
<li>測試 API 回傳的結果，必須為 object 且包含指定的 key</li>
</ul>
<p>這裡我們使用 chai 的 assert 來驗證結果是否符合，另外 chai 也有 expect&#x2F;should 的方式，詳細用法可以參考<a href="https://www.chaijs.com/api/bdd/">官方說明文件</a>。</p>
<h2 id="執行測試"><a href="#執行測試" class="headerlink" title="執行測試"></a>執行測試</h2><p>寫好測試內容，最後就是執行測試囉!<br>可以直接在家目錄底下執行 <code>mocha</code>，或是把測試指令加到 <code>package.json</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mocha --exit&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>指令中加上 <code>--exit</code> 是因為有遇到測試結束後，測試程式沒有終止的情況，所以加上此參數來終止程式。<br>接著執行 <code>npm test</code> 就會自動執行 <code>test/</code> 底下的測試。<br>如果測試成功，會看到以下內容:</p>
<p><img src="https://i.imgur.com/Tc6xqjF.png" alt="Success"></p>
<p>失敗的話就會出現:</p>
<p><img src="https://i.imgur.com/kYXneXu.png" alt="Failed"></p>
<p>這樣我們就完成了使用 mocha 來做測試囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://andy51002000.blogspot.com/2018/02/nodejs-unit-test.html">十分鐘搞懂Node.js Unit test(單元測試)</a></li>
<li><a href="https://medium.com/@wilsonhuang/using-chai-mocha-and-expect-to-write-some-rest-api-server-tests-28c1359a8f9">Using Chai, Mocha, and Expect to write some REST API Server tests.</a></li>
<li><a href="https://ithelp.ithome.com.tw/articles/10197286">[Day-36] 使用mocha來做單元測試</a></li>
<li><a href="https://larrylu.blog/nodejs-mocha-travis-ci-unit-test-e859a9446e16">[Node.js] 用 mocha 做單元測試並整合 Travis-CI</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>mocha</tag>
        <tag>chai</tag>
        <tag>supertest</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] 使用 nvm 建立 Node.js 開發環境</title>
    <url>/posts/c6c40ce1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有時候，我們不一定有開發環境的 root 權限，例如: 在公司的 server 上開發，通常只有機器的管理者會有 root 權限，而且每個開發者在開發不同產品時，所使用的 Node.js 版本也可能不同，如果更新 General 的 Node.js, 很有可能會影響到其他人開發的產品，所以我們需要在 Local 建立 Node.js 的開發環境，以確保自己需要更新 Node.js 時，不會影響到其他人。此外，在開發過程中也有可能會需要切換 Node.js 版本的需求，這時候我們就可以用 nvm 來管理 Node.js 版本並在不同版本間切換。所以這篇文章主要是紀錄如何使用 nvm 建立 Node.js 的開發環境。</p>
<span id="more"></span>

<h1 id="安裝-nvm"><a href="#安裝-nvm" class="headerlink" title="安裝 nvm"></a>安裝 nvm</h1><p>下載 nvm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>接著重新登入一次，並在 <code>.bashrc</code> 中加入以下內容 (設定 nvm 環境變數) :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<p>套用新的 <code>.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>

<p>接著就可以使用 <code>nvm</code> 了~</p>
<h1 id="nvm-指令"><a href="#nvm-指令" class="headerlink" title="nvm 指令"></a>nvm 指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm ls-remote                        <span class="comment"># 查詢目前node所有版本</span></span><br><span class="line">$ nvm install &lt;node version&gt;           <span class="comment"># 安裝Node.js</span></span><br><span class="line">$ nvm <span class="built_in">alias</span> default &lt;node version&gt;     <span class="comment"># 設定預設使用版本，否則每次登入都要先查詢安裝版本再下use</span></span><br><span class="line">$ nvm <span class="built_in">alias</span> &lt;name&gt; &lt;node version&gt;      <span class="comment"># 版本使用別名，只要下nvm use name 就等於使用該版本</span></span><br><span class="line">$ nvm current                          <span class="comment"># 目前正在使用哪個版本的node</span></span><br><span class="line">$ nvm <span class="built_in">ls</span>                               <span class="comment"># 查看已安裝可使用的版本</span></span><br><span class="line">$ nvm use &lt;node version&gt;               <span class="comment"># 選擇使用版本</span></span><br><span class="line">$ nvm run &lt;node version&gt; &lt;JSfilename&gt;  <span class="comment"># 使用特定版本來執行檔案</span></span><br></pre></td></tr></table></figure>

<h1 id="安裝-Node-js"><a href="#安裝-Node-js" class="headerlink" title="安裝 Node.js"></a>安裝 Node.js</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install &lt;node version&gt;</span><br></pre></td></tr></table></figure>

<p>建議設定預設使用的 Node.js 版本，否則每次登入就要重新下一次 <code>nvm use</code> 的指令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm <span class="built_in">alias</span> default &lt;node version&gt;</span><br></pre></td></tr></table></figure>

<p>這樣我們的 Node.js 開發環境就建立好了，可以開始使用 <code>node</code>, <code>npm</code> 的指令~</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://github.com/creationix/nvm">nvm</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] 在 crontab 中使用 pm2</title>
    <url>/posts/bd51a3a8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用 crontab 執行 pm2 時，發現會無法成功運行，但是手動執行 script 又可以成功，這裡紀錄一下解決方式。</p>
<span id="more"></span>

<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>解決方式是將 Node 的路徑加到 crontab <code>PATH</code> 中:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=.:/home/&lt;user&gt;/bin:/bin:/sbin:/usr/bin:/usr/sbin:/home/&lt;user&gt;/.nvm/versions/node/&lt;node_version&gt;/bin</span><br><span class="line">HOME=/home/&lt;user&gt;</span><br><span class="line">MAILTO=&quot;&quot;</span><br><span class="line"></span><br><span class="line">@reboot pm2 start -n app $HOME/app/app.js</span><br></pre></td></tr></table></figure>

<p>範例中，我們設定 crontab 在 reboot 後執行 pm2 來啟動 application, 將 Node 路徑(<code>/home/&lt;user&gt;/.nvm/versions/node/&lt;node_version&gt;/bin</code>)加入至<code>PATH</code>，接著重啟機器就可以看到 application 成功被啟動囉!</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://claude-ray.github.io/2019/01/03/pm2-crontab/">crontab 中使用 pm2</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>crontab</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>[Node.js] 發佈 NPM package</title>
    <url>/posts/32220ab9/</url>
    <content><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10191670"><img src="https://juststickers.in/wp-content/uploads/2014/08/NPM.jpg" alt="NPM"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><a href="https://www.npmjs.com/">NPM</a> 全名是 Node Package Manager, 是 Node.js 的套件管理工具，讓開發者方便地安裝及管理所需要的第三方套件，也可以讓開發者發佈自己的 packages.</p>
<span id="more"></span>

<h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>首先，我們需要先註冊 <a href="https://www.npmjs.com/signup">NPM</a> 帳號，才能發佈自己的 packages.</p>
<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>設定 Node.js project 中的 <code>package.json</code>, 通常在一開始建立專案時，會執行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure>

<p>這步驟就已經完成了 package 的基本設定，當然隨時也可以再修改設定內容~</p>
<h1 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h1><p>開發完成後，如果是第一次發佈，需要先註冊:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm adduser       <span class="comment"># 輸入 npm 的帳號密碼即可</span></span><br></pre></td></tr></table></figure>

<p>接著就可以執行以下指令來發佈我們的 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>

<p>完成後，我們就可以方便地安裝自己的 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<p>之後有更新 package 的話，只要修改 <code>package.json</code> 並再執行一次 <code>npm publish</code> 指令，即可更新 package.</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://blog.toright.com/posts/4874/%E5%A6%82%E4%BD%95%E7%99%BC%E4%BD%88%E4%BD%A0%E7%9A%84%E3%80%8C%E5%8C%85%E3%80%8D%E5%88%B0-npm-repository.html">如何發佈你的「包」到 NPM Repository</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Deal with Chinese in Cookie</title>
    <url>/posts/9c9bf6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flask 中設定 cookie 時，若其值含有中文，會被轉換為 8 進位 (Ex. <code>\344\270\255\346\226\207\346\270\254\350\251\246</code> )，在前端顯示時就無法正確顯示，這一篇文章來記錄一下解決方式。</p>
<span id="more"></span>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>目前有以下兩個解法:</p>
<ul>
<li>Solution 1: 前端將 8 進位轉為 16 進位，再將 16 進位轉成 UTF-8 字串</li>
<li>Solution 2: 後端將其值做 Base64 encode, 前端再做 Base64 decode</li>
</ul>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>前端將 8 進位轉為 16 進位，再將 16 進位轉成 UTF-8 字串:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert hex to string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; hexStr Hex string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">UTF</span>-8 string </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">convertHexToStr</span> = (<span class="params">hexStr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hexStr.<span class="property">length</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        content += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="built_in">parseInt</span>(hexStr.<span class="title function_">substr</span>(i, <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURI</span>(<span class="built_in">escape</span>(content));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert octal to string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; octStr Octal string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> <span class="variable">UTF</span>-8 string </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">convertOctToStr</span> = (<span class="params">octStr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> octalList = octStr.<span class="title function_">split</span>(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> octalGroup = [];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; octalList.<span class="property">length</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        octalGroup.<span class="title function_">push</span>(octalList.<span class="title function_">slice</span>(i, i+<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    octalGroup.<span class="title function_">forEach</span>(<span class="function">(<span class="params">group</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        group.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> hexStr = <span class="built_in">parseInt</span>(item, <span class="number">8</span>).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">            word += hexStr;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        result += <span class="title function_">convertHexToStr</span>(word);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">convertOctToStr</span>(cookies.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>後端將 cookie 值做 Base64 encode:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># In app.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># User authentication</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set cookie</span></span><br><span class="line">    response = jsonify(status=<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    response.set_cookie(</span><br><span class="line">        key=<span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">        value=base64.b64encode(<span class="string">&#x27;中文名稱&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  app.run()</span><br></pre></td></tr></table></figure>

<p>前端再做 Base64 decode:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="built_in">escape</span>(<span class="title function_">atob</span>(cookies.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>))))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] 《Fluent Python》 - 資料模型 閱讀筆記</title>
    <url>/posts/c4d04666/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cf-assets1.tenlong.com.tw/images/99559/original/A422.jpg" alt="Fluent Python"></p>
<p>這一篇文章是《Fluent Python》- 第一章「資料模型」的閱讀筆記。</p>
<span id="more"></span>

<h2 id="Ch1-Python-資料模型"><a href="#Ch1-Python-資料模型" class="headerlink" title="Ch1. Python 資料模型"></a>Ch1. Python 資料模型</h2><ul>
<li>可以將資料模型想像成 Python 描述成框架的東西，他決定這個語言本身 building blocks 的接口，像是 sequences, functions, iterators, coroutines, classes, context managers…等。</li>
<li>當我們使用任何框架來編寫程式時，會花許多時間來撰寫要被框架呼叫的方法，在使用 Python data model 也是如此，Python interpreter(解譯器)會呼叫特殊的方法來執行基本的物件操作，通常是由特殊的語法觸發。</li>
<li>特殊方法的名稱是以雙底線 “__” 作為開頭與結尾，例如： <code>__getitem__</code>, <code>obj[key]</code> 語法是 <code>__getitem__</code> 特殊方法提供的。</li>
<li>當我們希望物件可以支持基本的語言結構並對它做操作時，我們可以實作特殊方法，例如：<ul>
<li>Iteration (including asynchronous iteration using async for) 迭代</li>
<li>Collections 集合</li>
<li>存取 Attribute</li>
<li>Operator overloading 運算子多載</li>
<li>Function and method invocation 函式與方法呼叫</li>
<li>String representation and formatting 字串字串表示與格式化</li>
<li>Object creation and destruction 物件的建構與解構</li>
<li>Managed contexts using the with or async with statements 受管理的情境（即with區塊）</li>
</ul>
</li>
<li>特殊方法俗稱魔術方法，也稱 dunder 方法，例如： <code>__getitem__</code> 讀成 “dunder-getitem”.</li>
</ul>
<h3 id="Python-風格的撲克牌組"><a href="#Python-風格的撲克牌組" class="headerlink" title="Python 風格的撲克牌組"></a>Python 風格的撲克牌組</h3><p>Example 1-1. 撲克牌序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">Card = collections.namedtuple(<span class="string">&#x27;Card&#x27;</span>, [<span class="string">&#x27;rank&#x27;</span>, <span class="string">&#x27;suit&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FrenchDeck</span>:</span><br><span class="line">    ranks = [<span class="built_in">str</span>(n) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>)] + <span class="built_in">list</span>(<span class="string">&#x27;JQKA&#x27;</span>)</span><br><span class="line">    suits = <span class="string">&#x27;spades diamonds clubs hearts&#x27;</span>.split()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._cards = [Card(rank, suit) <span class="keyword">for</span> suit <span class="keyword">in</span> self.suits</span><br><span class="line">                                        <span class="keyword">for</span> rank <span class="keyword">in</span> self.ranks]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self._cards)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, position</span>):</span><br><span class="line">        <span class="keyword">return</span> self._cards[position]</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>collections.namedtuple</code> 來建立簡單的類別，並使用它來表示每張卡牌<ul>
<li><code>namedtuple</code> 是 <code>tuple</code> 的擴展<ul>
<li><code>tuple</code> 是 immutable, 建立後就不可更改</li>
<li>在使用 <code>tuple</code> 時，我們可以利用 index 來存取 tuple 中指定位置的值，但這個 index 只是代表位置，沒有實質的意義，當欄位越來越多時，可讀性也會越來越差，而透過 <code>namedtuple</code> 讓我們可以利用名稱來取代 index 值，增加可讀性</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; beer_card = Card(<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;diamonds&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; beer_card</span><br><span class="line">Card(rank=<span class="string">&#x27;7&#x27;</span>, suit=<span class="string">&#x27;diamonds&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>範例的重點是 FrenchDeck class, 我們可以使用 <code>len</code> 來取得牌組中的卡片數量：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deck = FrenchDeck()</span><br><span class="line">&gt;&gt;&gt; len(deck)</span><br><span class="line">52</span><br></pre></td></tr></table></figure>

<ul>
<li>讀取牌組中的特定卡牌，也正是 <code>__getitem__</code> 特殊方法提供的功能：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; deck[0]</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; deck[-1]</span><br><span class="line">Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>隨機選取卡牌： <code>random.choice</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from random import choice</span><br><span class="line">&gt;&gt;&gt; choice(deck)</span><br><span class="line">Card(rank=<span class="string">&#x27;3&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; choice(deck)</span><br><span class="line">Card(rank=<span class="string">&#x27;K&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; choice(deck)</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;clubs&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Python data model 優點：</p>
<ul>
<li>類別的使用者不需要去記各種標準動作的方法名稱<ul>
<li>如何取得項目數量？ <code>.size()</code> , <code>.length()</code> or … ?</li>
</ul>
</li>
<li>有豐富的 Python 標準函式庫，避免重複造輪子</li>
</ul>
<p>但他有更多好處。</p>
<p>以上的 <code>__getitem__</code> 代表 <code>self._cards</code> 的 <code>[]</code> 運算子，所以牌組會自動支援 slicing, for example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得最上面三張牌</span></span><br><span class="line">&gt;&gt;&gt; deck[:3]</span><br><span class="line">[Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>), Card(rank=<span class="string">&#x27;3&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>), Card(rank=<span class="string">&#x27;4&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 從 index 為 12 開始取 ACE, 並跳過 13 張牌</span></span><br><span class="line">&gt;&gt;&gt; deck[12::13]</span><br><span class="line">[Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>), Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;diamonds&#x27;</span>), Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;clubs&#x27;</span>), Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<p>只要實作 <code>__getitem__</code> 就可以讓牌組變成可迭代的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> card <span class="keyword">in</span> deck: <span class="comment"># doctest: +ELLIPSIS </span></span><br><span class="line">...     <span class="built_in">print</span>(card)</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;3&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;4&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>反向迭代：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> card <span class="keyword">in</span> reversed(deck): <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line">...     <span class="built_in">print</span>(card)</span><br><span class="line">Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;K&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;Q&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>如果某個集合沒有 <code>__contains__</code> 方法， <code>in</code> 運算子就會進行循序掃描。我們可以在 FrenchDeck 中使用 <code>in</code> :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Card(<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;hearts&#x27;</span>) <span class="keyword">in</span> deck</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; Card(<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;beasts&#x27;</span>) <span class="keyword">in</span> deck</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<p>排序：以下範例是按照規則定義撲克牌大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">suit_values = <span class="built_in">dict</span>(spades=<span class="number">3</span>, hearts=<span class="number">2</span>, diamonds=<span class="number">1</span>, clubs=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">spades_high</span>(<span class="params">card</span>):</span><br><span class="line">	rank_value = FrenchDeck.ranks.index(card.rank)</span><br><span class="line">	<span class="keyword">return</span> rank_value * <span class="built_in">len</span>(suit_values) + suit_values[card.suit]</span><br></pre></td></tr></table></figure>

<p>按照大小依序列出牌組：(遞增)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> card <span class="keyword">in</span> <span class="built_in">sorted</span>(deck, key=spades_high): <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(card)</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;clubs&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;diamonds&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;2&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>(<span class="number">46</span> cards omitted)</span><br><span class="line">Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;diamonds&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;hearts&#x27;</span>)</span><br><span class="line">Card(rank=<span class="string">&#x27;A&#x27;</span>, suit=<span class="string">&#x27;spades&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="特殊方法的用法"><a href="#特殊方法的用法" class="headerlink" title="特殊方法的用法"></a>特殊方法的用法</h3><ul>
<li>特殊方法是要讓 Python 解譯器呼叫的，而不是開發者，所以不能寫 <code>my_obj.__len__()</code>，而是要用 <code>len(my_obj)</code>. 如果 <code>my_obj</code> 是自定義的類別，Python會呼叫你寫的 <code>__len__</code> 方法.</li>
<li>一般情況下，不應該直接呼叫特殊方法，而是呼叫相關的內建函式比較好(例如：len, iter, str 等)。通常開發者比較常呼叫的只有 <code>__init__</code>, 目的是呼叫自己寫的 initializer.</li>
<li>解譯器會對內建的型態採取較簡便的做法(例如：list, str, bytearray…等)，CPython 的 <code>len()</code> 會回傳 PyVarObject C結構內的 ob_size, 表示記憶體中變數大小的所有內建物件，比呼叫方法快很多。</li>
<li>特殊方法通常是私下呼叫的，例如： <code>for i in x</code> 其實會呼叫 <code>iter(x)</code>, 接著可以的話會呼叫 <code>x.__iter__()</code>。</li>
<li>要避免使用 dunder function 來任意建立自訂的屬性，因為雖然目前他不是保留字，但未來有可能具有特殊含義。</li>
</ul>
<h4 id="模擬數值型態"><a href="#模擬數值型態" class="headerlink" title="模擬數值型態"></a>模擬數值型態</h4><p>首先定義一個 Vector class:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> hypot</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Vector(%r, %r)&#x27;</span> % (self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__abs__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> hypot(self.x, self.y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bool__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(<span class="built_in">abs</span>(self))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        x = self.x + other.x</span><br><span class="line">        y = self.y + other.y</span><br><span class="line">        <span class="keyword">return</span> Vector(x, y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, scalar</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(self.x * scalar, self.y * scalar)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/GRjVWlk.png" alt=" vector"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; v1 = Vector(2, 4)</span><br><span class="line">&gt;&gt;&gt; v2 = Vector(2, 1)</span><br><span class="line">&gt;&gt;&gt; v1 + v2 </span><br><span class="line">Vector(4, 5)</span><br></pre></td></tr></table></figure>

<p>這裡使用 + 運算子，Python 解譯器會去呼叫 <code>__add__()</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; v = Vector(3, 4)</span><br><span class="line">&gt;&gt;&gt; abs(v)</span><br><span class="line">5.0</span><br></pre></td></tr></table></figure>

<p>這裡使用 <code>abs()</code>, Python 解譯器會去呼叫 <code>__abs__()</code>.</p>
<p>也可以使用 * 來執行向量乘法，Python 解譯器會呼叫 <code>__mul__()</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; v * 3</span><br><span class="line">Vector(9, 12)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; abs(v * 3)</span><br><span class="line">15.0</span><br></pre></td></tr></table></figure>

<h4 id="字串表示方式"><a href="#字串表示方式" class="headerlink" title="字串表示方式"></a>字串表示方式</h4><ul>
<li><code>__repr__</code> 特殊方法是讓內建 <code>repr</code> 呼叫的，取得物件的字串表示方式，如果沒有實作這個方法，console 中會顯示成 <code>&lt;Vector object at 0x10e100070&gt;</code>.</li>
<li>互動式的 console 或 debug 程式會對運算式的結果呼叫 <code>repr</code>, 這裡使用 <code>%r</code> 來 format string.</li>
<li><code>__str__</code> 則是讓 <code>str()</code> 呼叫的，並讓 <code>print()</code> 私下使用，他會回傳方便觀看的格式。</li>
<li>如果只想實作其中一種，可以選擇 <code>__repr__</code>, 因為如果沒有自訂的 <code>__str__</code>, Python 會呼叫 <code>__repr__</code> 來提供結果。</li>
</ul>
<h4 id="算術運算子"><a href="#算術運算子" class="headerlink" title="算術運算子"></a>算術運算子</h4><ul>
<li>上面的範例使用到 + and *, 以展示 <code>__add__</code> 和 <code>__mul__</code> 的基本用法。在這個情況下，方法會回傳新的 Vector instance, 不會修改他們的運算元。</li>
<li>在上面的範例中，我們可以將 Vector 乘上數字，但無法將數字乘上 Vector, 這違法乘法的交換特性，會在第十三章的特殊方法 <code>__rmul__</code> 修正這個問題。</li>
</ul>
<h4 id="自訂類型的布林值"><a href="#自訂類型的布林值" class="headerlink" title="自訂類型的布林值"></a>自訂類型的布林值</h4><ul>
<li>Python 有 bool type, 但他接受任何 Boolean context 的任何 object, 像是控制 if 或 while 的 expression, 或 and, or, not 運算元。</li>
<li><code>bool(x)</code> 只會回傳 True or False.</li>
<li>預設情況下，使用者自訂的 class instance 都會被視為 True, 除非他實作了 <code>__bool__</code> 或 <code>__len__</code>.<ul>
<li><code>bool(x)</code> 會呼叫 <code>x.__bool__()</code> 並使用它的結果，如果沒有實作 <code>__bool__</code>, Python 就會試著呼叫 <code>x.__len__()</code>, 如果它回傳 0, bool 就會回傳 False.</li>
</ul>
</li>
</ul>
<h3 id="特殊方法概觀"><a href="#特殊方法概觀" class="headerlink" title="特殊方法概觀"></a>特殊方法概觀</h3><p>The Python Language Reference 的 Data model (<a href="https://docs.python.org/3/reference/datamodel.html">https://docs.python.org/3/reference/datamodel.html</a>) 中列出了 83 個特殊方法名稱，其中有 47 個的用途是實作算術、位元及比較運算子。</p>
<p><img src="https://i.imgur.com/weehm4H.png" alt="magic_method_1"></p>
<p><img src="https://i.imgur.com/zs88dGJ.png" alt="magic_method_2"></p>
<p><img src="https://i.imgur.com/pzLdvq1.png" alt="magic_method_3"></p>
<h3 id="為什麼-len-不是一種方法？"><a href="#為什麼-len-不是一種方法？" class="headerlink" title="為什麼 len 不是一種方法？"></a>為什麼 len 不是一種方法？</h3><ul>
<li>在前面的「特殊方法的用法」有提到：如果 x 是內建的型態，CPython 不需要呼叫任何方法，只需要從 C 結構內的欄位讀取。取得集合的長度是蠻常見的動作，因此必須要有效率的操作這種基本類型或其他類型，例如：str, list 或 memoryview.</li>
<li><code>len</code> 不會被當成方法來呼叫，因為他身為 Python 資料模型的一部份，會受到特殊對待， <code>abs</code> 也是一樣的原理。但是拜特殊方法 <code>__len__</code> 所賜，我們也可以讓自訂的物件使用 <code>len</code>.</li>
</ul>
<h3 id="本章摘要"><a href="#本章摘要" class="headerlink" title="本章摘要"></a>本章摘要</h3><ul>
<li>藉由實作特殊方法，讓我們的物件的行為可以像內建類型一樣，讓我們的程式撰寫風格被認為符合 Python 慣例。</li>
<li>特殊方法 <code>__repr__</code> and <code>__str__</code>, 一個用來進行 debug 和記錄，另一個用來顯示給使用者看，是 Python 物件的基本需求。</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://github.com/fluentpython/example-code-2e">https://github.com/fluentpython/example-code-2e</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Fluent Python</tag>
        <tag>資料模型</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] read() vs. readline() vs. readlines()</title>
    <url>/posts/f2a436d6/</url>
    <content><![CDATA[<p>在 Python 中讀取檔案有三種常用的方法: <code>read()</code>, <code>readline()</code> 和 <code>readlines()</code>, 這裡紀錄一下這三種方法的差別及使用方式。</p>
<span id="more"></span>

<h2 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h2><p><code>read([size])</code>這個方法是從檔案當前位置起讀取 <code>size</code> 個字，若沒有參數 <code>size</code>，則表示讀取到檔案結束為止。</p>
<p>範例文件 (test.txt) :</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Hi, 123</span><br><span class="line">Hello world</span><br><span class="line">中文</span><br></pre></td></tr></table></figure>

<p>使用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">content = fp.read()</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(content))</span><br></pre></td></tr></table></figure>

<p>輸出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 test.py</span><br><span class="line">Hi, 123</span><br><span class="line">Hello world</span><br><span class="line">中文</span><br><span class="line"></span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h2><p>每次讀出<strong>一行</strong>內容，讀取時占用的記憶體較小，比較適合大檔案。</p>
<p>使用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">line = fp.readline()</span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(line))</span><br><span class="line">    line = fp.readline()</span><br><span class="line"></span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>輸出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 test.py</span><br><span class="line">Hi, 123</span><br><span class="line"></span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">中文</span><br><span class="line"></span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<h2 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h2><p>一次讀取整個檔案的<strong>所有行</strong>，保存在一個 list 中，每行作為一個元素，讀取大檔案會比較占記憶體。</p>
<p>使用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">lines = fp.readlines()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(lines))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<p>輸出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 test.py</span><br><span class="line">&lt;class <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line">Hi, 123</span><br><span class="line"></span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line">中文</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>FileIO</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] 使用 Flask-Migrate 做資料庫版本控管</title>
    <url>/posts/c8be8ac6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flask application 中，我們通常會使用 Flask-SQLAlchemy (或 SQLAlchemy) 套件來操作資料庫，但它們只會在 table 不存在時才會建立新的 table, 若是之後 table 欄位有變動就需要整個 table 刪掉重建或是直接使用 SQL command 去更新 table schema，但是這兩種方式都不適合用於正式 production 的服務，而且若是直接使用 SQL command 去更新 table schema 會無法控管資料庫變更的紀錄，因此我們就需要 <code>Flask-Migrate</code> 這個套件來做資料庫的版控，這一篇文章就來紀錄一下使用方式。</p>
<span id="more"></span>

<h2 id="Flask-Migrate"><a href="#Flask-Migrate" class="headerlink" title="Flask-Migrate"></a>Flask-Migrate</h2><p>Flask-Migrate 是基於 <a href="https://alembic.sqlalchemy.org/en/latest/">alembic</a> 再去做擴展的，能夠讓開發者更方便的整合 Flask 和 Flask-SQLAlchemy.</p>
<p><strong>NOTE</strong>: 這一篇文章是以 Flask application 為主，若是使用其他框架 (Django, FastAPI) 也有相對應的 migration 方式，請參考 <a href="https://docs.djangoproject.com/en/3.2/topics/migrations/">Django Migration</a> 和 <a href="https://fastapi.tiangolo.com/tutorial/sql-databases/#migrations">FastAPI  SQL Database Migration</a>.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install flask-migrate</span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>假設目錄架構如下: (Application factories)</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">flask-migration-example/</span><br><span class="line">├─ app/</span><br><span class="line">|    ├─ __init__.py</span><br><span class="line">|    ├─ extensions.py</span><br><span class="line">|    └─ models.py</span><br><span class="line">└─ wsgi.py</span><br></pre></td></tr></table></figure>

<p>In <code>app/extensions.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">migrate = Migrate()</span><br></pre></td></tr></table></figure>

<p>In <code>app/models.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .extensions <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">128</span>))</span><br></pre></td></tr></table></figure>

<p>In <code>app/__init__.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> .extensions <span class="keyword">import</span> db, migrate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql+pymysql://user:password@host:port/database?charset=utf8&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    db.init_app(app)</span><br><span class="line">    migrate.init_app(app, db)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>

<p>In <code>wsgi.py</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>

<p>設定好 Flask application 後，接著執行 init 指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db init</span><br></pre></td></tr></table></figure>

<p>執行後會看到專案目錄底下會出現 <code>migrations</code> 資料夾:</p>
<p><img src="https://i.imgur.com/xb61Eg3.png" alt="db init"></p>
<p>接著執行以下指令來產生 migration scripts:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -m: Migration message</span></span><br><span class="line">$ flask db migrate -m <span class="string">&#x27;DB init&#x27;</span></span><br></pre></td></tr></table></figure>

<p>最後執行 upgrade 指令將 migration script apply to database:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db upgrade</span><br></pre></td></tr></table></figure>

<p>之後若是有更動，只要再執行 <code>migrate</code> 和 <code>upgrade</code> 指令即可~</p>
<p>若是需要降回以前版本，可以使用以下指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db downgrade &lt;revision&gt;</span><br></pre></td></tr></table></figure>

<p>其他更多指令可使用 <code>flask db --help</code> 查看。</p>
<h2 id="在現有專案中加入-Flask-Migrate"><a href="#在現有專案中加入-Flask-Migrate" class="headerlink" title="在現有專案中加入 Flask-Migrate"></a>在現有專案中加入 Flask-Migrate</h2><p>如果是要在現有專案且資料庫已存在的情況下，想要產生 initial migration，依照上述步驟執行之後會出現以下訊息:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">INFO  [alembic.env] No changes in schema detected.</span><br></pre></td></tr></table></figure>

<p>因為現有的資料庫對 Flask-Migrate 來說是沒有變動的，可以再依照以下步驟來產生 initial migration:</p>
<p>一樣先 initialize, 建立 <code>migrations</code> 資料夾:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db init</span><br></pre></td></tr></table></figure>

<p>接著需要讓 Flask-Migrate 認為資料庫是空的，有兩種方式:</p>
<ul>
<li>將現有的資料庫重新命名，並再建立一個一樣名稱的空資料庫</li>
<li>建立一個新的空資料庫，暫時讓 application 使用該資料庫</li>
</ul>
<p>再來執行 <code>migrate</code> 指令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db migrate</span><br></pre></td></tr></table></figure>

<p>這樣就可以 initial migration, 接著就可以將資料庫回復到原本正確的狀態或使用回原本的資料庫，並把現有資料庫標記為 updated:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flask db stamp <span class="built_in">head</span></span><br></pre></td></tr></table></figure>

<p>之後若是有更新 table schema, 一樣再使用 <code>migrate</code> 和 <code>upgrade</code> 指令即可。</p>
<div class="note info">

<p><strong>NOTE</strong>:</p>
<ul>
<li>記得要將 <code>migrations</code> 加入 Git 版控</li>
<li>記得將所有環境(dev, test, production)的資料庫標記為 updated (<code>flask db stamp head</code>)，之後就可以依照正常步驟來做 migration</li>
</ul>
</div>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://flask-migrate.readthedocs.io/en/latest/">Flask-Migrate</a></li>
<li><a href="https://stackoverflow.com/questions/42992256/how-do-you-add-migrate-an-existing-database-with-alembic-flask-migrate-if-you-di">How do you add migrate an existing database with alembic&#x2F;flask-migrate if you did not start off with it?</a></li>
<li><a href="https://stackoverflow.com/questions/59490965/using-flask-migration-in-development-and-deployment">Using Flask-Migration in development and deployment</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flask</tag>
        <tag>Database</tag>
        <tag>Flask-Migration</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] 使用 conda 建立及管理虛擬環境</title>
    <url>/posts/e9216f2f/</url>
    <content><![CDATA[<p><img src="https://docs.conda.io/en/latest/_images/conda_logo.svg" alt="Conda"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在開發 Python 程式時，我都是使用 pip 來做套件管理，使用 virtualenv 來建立虛擬環境，後來發現 Conda 這個工具，Conda 是一個開源的套件及虛擬環境管理工具，支援多種程式語言(Python, R…等)，這邊來記錄一下它的使用方式，以下的指令是以 Windows 環境為主，Linux 或 MacOS 的指令可以參考官方文件。</p>
<span id="more"></span>

<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>Conda 的安裝方式可以透過安裝 <a href="https://www.anaconda.com/products/individual">Anaconda</a> 或是 <a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a> 來取得，Anaconda 是一個比較完整的套件，它同時也會安裝一些常用的套件，例如：Pandas、Matplotlib、SciPy…等，如果有足夠的硬碟空間，可以直接安裝 Anaconda，如果硬碟空間不夠或是不想要安裝太多不一定會用到的套件，就可以安裝 Miniconda 就好。</p>
<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="虛擬環境操作"><a href="#虛擬環境操作" class="headerlink" title="虛擬環境操作"></a>虛擬環境操作</h3><h4 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h4><ul>
<li><code>-n</code>, <code>--name</code>: 設定環境名稱</li>
<li><code>-f</code>, <code>--file</code>: 由檔案建立虛擬環境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -n &lt;env_name&gt; &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝包含 Anaconda 發行版的套件</span></span><br><span class="line">$ conda create -n &lt;env_name&gt; anaconda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 Python 版本</span></span><br><span class="line">$ conda create -n &lt;env_name&gt; python=3.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由檔案建立虛擬環境</span></span><br><span class="line">$ conda <span class="built_in">env</span> create -f &lt;dependency.yml&gt;</span><br></pre></td></tr></table></figure>

<h4 id="顯示虛擬環境列表"><a href="#顯示虛擬環境列表" class="headerlink" title="顯示虛擬環境列表"></a>顯示虛擬環境列表</h4><ul>
<li><code>-e</code>, <code>--envs</code>: 列出已建立的環境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda info -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用以下指令</span></span><br><span class="line">$ conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure>

<h4 id="切換至虛擬環境"><a href="#切換至虛擬環境" class="headerlink" title="切換至虛擬環境"></a>切換至虛擬環境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda activate &lt;env_name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="離開虛擬環境"><a href="#離開虛擬環境" class="headerlink" title="離開虛擬環境"></a>離開虛擬環境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda deactivate</span><br></pre></td></tr></table></figure>

<h4 id="刪除虛擬環境"><a href="#刪除虛擬環境" class="headerlink" title="刪除虛擬環境"></a>刪除虛擬環境</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda remove -n &lt;env_name&gt; --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用以下指令</span></span><br><span class="line">$ conda <span class="built_in">env</span> remove -n &lt;env_name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="套件管理"><a href="#套件管理" class="headerlink" title="套件管理"></a>套件管理</h3><h4 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda install &lt;package&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-c</code>: channel, 如果找不到，可以到 <code>conda-forge</code> 搜尋:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda install -c conda-forge &lt;package&gt;</span><br></pre></td></tr></table></figure>

<p>或是也可以直接在設定中增加 channel:</p>
<ul>
<li><code>--add</code>, <code>--prepend</code>: 增加在 channel list 最上方，priority 最高</li>
<li><code>--append</code>: 增加在 channel list 最下方，priority 最低</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda config --append channels conda-forge</span><br></pre></td></tr></table></figure>

<h4 id="查詢套件"><a href="#查詢套件" class="headerlink" title="查詢套件"></a>查詢套件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda search &lt;package&gt;</span><br></pre></td></tr></table></figure>

<h4 id="顯示套件列表"><a href="#顯示套件列表" class="headerlink" title="顯示套件列表"></a>顯示套件列表</h4><ul>
<li><code>-n</code>: 查看指定環境的套件列表</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda list [-n &lt;env_name&gt;]</span><br></pre></td></tr></table></figure>

<h4 id="移除套件"><a href="#移除套件" class="headerlink" title="移除套件"></a>移除套件</h4><ul>
<li><code>-n</code>: 刪除指定環境中的套件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda remove &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除指定環境中的套件</span></span><br><span class="line">$ conda remove -n &lt;env_name&gt; &lt;package&gt;</span><br></pre></td></tr></table></figure>

<h4 id="更新套件"><a href="#更新套件" class="headerlink" title="更新套件"></a>更新套件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda update &lt;package&gt;</span><br></pre></td></tr></table></figure>

<h3 id="匯出環境"><a href="#匯出環境" class="headerlink" title="匯出環境"></a>匯出環境</h3><h4 id="匯出已安裝套件"><a href="#匯出已安裝套件" class="headerlink" title="匯出已安裝套件"></a>匯出已安裝套件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda list -e &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用此檔案建立新的環境</span></span><br><span class="line">$ conda create -n &lt;env_name&gt; -f requirements.txt</span><br></pre></td></tr></table></figure>

<h4 id="匯出-environment-yml"><a href="#匯出-environment-yml" class="headerlink" title="匯出 environment.yml"></a>匯出 environment.yml</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda <span class="built_in">env</span> <span class="built_in">export</span> -n &lt;env_name&gt; -f environment.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用此檔案建立環境</span></span><br><span class="line">$ conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure>

<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="CondaHTTPError-HTTP-000"><a href="#CondaHTTPError-HTTP-000" class="headerlink" title="CondaHTTPError HTTP 000"></a>CondaHTTPError HTTP 000</h3><p>如果有遇到 <code>CondaHTTPError HTTP 000</code> 的 Error 時，有可能是防火牆阻擋安裝，也有可能是環境變數沒有設定好，必須要添加 <code>C:\Users\&lt;user&gt;\anaconda3\Library\bin</code>，添加之後通常就沒問題了!</p>
<h3 id="Activate-not-work-on-Windows"><a href="#Activate-not-work-on-Windows" class="headerlink" title="Activate not work on Windows"></a>Activate not work on Windows</h3><p>如果建立好虛擬環境，但是無法 activate，需要先檢查系統的環境變數 Path 是否有以下內容:</p>
<ul>
<li><code>C:\Users\&lt;user&gt;\anaconda3</code></li>
<li><code>C:\Users\&lt;user&gt;\anaconda3\Library\bin</code></li>
<li><code>C:\Users\&lt;user&gt;\anaconda3\Scripts</code></li>
</ul>
<p>確定都設定好之後，要再執行 <code>conda init</code> 指令，接著就可以使用 <code>conda activate &lt;env_name&gt;</code> 切換至虛擬環境。</p>
<h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul>
<li><a href="https://medium.com/datainpoint/python-essentials-conda-quickstart-1f1e9ecd1025">輕鬆學習 Python：conda 的核心功能</a></li>
<li><a href="https://medium.com/python4u/%E7%94%A8conda%E5%BB%BA%E7%AB%8B%E5%8F%8A%E7%AE%A1%E7%90%86python%E8%99%9B%E6%93%AC%E7%92%B0%E5%A2%83-b61fd2a76566">用conda建立及管理python虛擬環境</a></li>
<li><a href="https://titangene.github.io/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a></li>
<li><a href="http://corettainformation.blogspot.com/2019/10/condacondahttperror-http-000.html">[教學]解決使用conda時CondaHTTPError HTTP 000的錯誤</a></li>
<li><a href="https://github.com/conda/conda/issues/8428">Conda environment activation not working in PowerShell</a></li>
<li><a href="https://medium.com/%E6%95%B8%E6%93%9A%E4%B8%8D%E6%AD%A2-not-only-data/anaconda-anjupyter-54144e75318f">快速上手 Anaconda 與 Jupyter 的虛擬環境與核心設定</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Conda</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] 發佈 Python package</title>
    <url>/posts/7a8d674c/</url>
    <content><![CDATA[<p><a href="https://pypi.org/static/images/logo-large.72ad8bf1.svg"><img src="https://pypi.org/static/images/logo-large.72ad8bf1.svg" alt="Python package"></a></p>
<p>這裡一篇文章主要紀錄一下如何發佈 Python package.</p>
<span id="more"></span>

<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>首先，我們需要先註冊 <a href="https://pypi.python.org/pypi" title="PyPI">PyPI</a> 帳號，這樣才能發佈自己的 package.</p>
<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><h3 id="檔案結構範例"><a href="#檔案結構範例" class="headerlink" title="檔案結構範例"></a>檔案結構範例</h3><p>假設此專案底下有兩個 package (<code>pkgA</code>, <code>pkgB</code>)，每個 package 目錄底下必須有一個 <code>__init__.py</code> 的檔案，package 底下又分別有一些模組，檔案結構範例如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">MyProject/</span><br><span class="line">    ├─ docs/</span><br><span class="line">    │    ├─ README.md</span><br><span class="line">    │    ├─ LICENSE.txt</span><br><span class="line">    │    └─ CHANGELOG.md</span><br><span class="line">    ├─ pkgA/</span><br><span class="line">    │    ├─ __init__.py</span><br><span class="line">    │    ├─ modA_1.py</span><br><span class="line">    │    └─ modA_2.py</span><br><span class="line">    ├─ pkgB/</span><br><span class="line">    │    ├─ __init__.py</span><br><span class="line">    │    └─ modB.py</span><br><span class="line">    ├─ MANIFEST.in</span><br><span class="line">    └─ setup.py</span><br></pre></td></tr></table></figure>

<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li><p>確認每個 package 目錄底下必須有一個 <code>__init__.py</code> 的檔案。</p>
</li>
<li><p>如果沒有 <code>script</code>，則不需要 <code>bin/</code> 資料夾。</p>
</li>
<li><p>建立 <code>CHANGELOG.md</code>，記錄更新內容。</p>
</li>
<li><p>建立 <code>LICENSE.txt</code>，內容為開源協議。</p>
</li>
<li><p>建立 <code>README.md</code>，介紹並說明 package 如何使用。</p>
</li>
<li><p>將文件檔放在 <code>docs/</code>.</p>
</li>
<li><p>建立 <code>MANIFEST.in</code>，設定 PyPI 要包含哪些檔案，預設不包含<code>.txt</code>, <code>MANIFEST.in</code> 範例:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MANIFEST.in</span></span><br><span class="line"><span class="comment"># 包含docs底下的所有檔案</span></span><br><span class="line">graft docs</span><br></pre></td></tr></table></figure>

<p> <code>MANIFEST.in</code> 常用指令:<br> <img src="https://i.imgur.com/0KJWh3u.png" alt="MANIFEST.in 指令"></p>
</li>
<li><p>建立 <code>setup.py</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&#x27;package name&#x27;</span>,</span><br><span class="line">    version = <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    description = <span class="string">&#x27;Description for this package.&#x27;</span>,</span><br><span class="line">    long_description = codecs.<span class="built_in">open</span>(<span class="string">&#x27;docs/README.md&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).read(),</span><br><span class="line">    long_description_content_type=<span class="string">&#x27;text/markdown&#x27;</span>,</span><br><span class="line">    author = <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    author_email = <span class="string">&#x27;your_email&#x27;</span>,</span><br><span class="line">    url = <span class="string">&#x27;url for this package&#x27;</span>,</span><br><span class="line">    packages = [<span class="string">&#x27;pkgA&#x27;</span>, <span class="string">&#x27;pkgB&#x27;</span>],</span><br><span class="line">    keywords = [<span class="string">&#x27;keyword for this package&#x27;</span>],</span><br><span class="line">    license = <span class="string">&#x27;docs/LICENSE.txt&#x27;</span>,</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&#x27;requests &gt;= 2.13.0&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>name: package 的名稱</li>
<li>version: 版本</li>
<li>author: 作者</li>
<li>author_email: 作者 email</li>
<li>packages: 此 package 包含的所有 package，以範例來說就是 <code>pkgA</code>, <code>pkgB</code></li>
<li>script: 可執行的 <code>script</code>，如果沒有可省略</li>
<li>url: package 連結，可連結到 GitHub</li>
<li>license: 開源協議</li>
<li>description: package 簡單的描述</li>
<li>long_description: 詳細的描述，上述範例是讀取 <code>docs/README.md</code></li>
<li>long_description_content_type: 設定 long_description content type, 這裡我們設定為 markdown 格式</li>
<li>install_requires: 依賴的項目</li>
</ul>
</li>
</ol>
<h3 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h3><p>依照上面步驟設定好 package 之後，需要再安裝以下套件才能發佈 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install setuptools wheel twine</span><br></pre></td></tr></table></figure>

<p>新版已經不需要先註冊 package, 如果執行註冊指令會看到以下訊息: <code>Registering is deprecated, use twine to upload instead</code>. 所以直接產生 package，並使用 <code>twine</code> 上傳 package 即可。</p>
<p>產生 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure>

<p>上傳 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ twine upload dist/*</span><br></pre></td></tr></table></figure>

<p>這樣就成功發佈自己的 package 囉!</p>
<p>之後我們就可以方便地安裝和使用 package:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://www.cnblogs.com/numbbbbb/p/3584539.html">如何将你自己的Python package发布到PyPI上</a></li>
<li><a href="http://dokelung-blog.logdown.com/posts/238050-collation-and-publishing-of-the-project-from-github-to-pypi">專案整理與發佈-從Github到PyPI</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[Redis] Redis 安裝及使用</title>
    <url>/posts/654d6d96/</url>
    <content><![CDATA[<p><a href="https://medium.com/@chathuranga94/introduction-to-redis-348d9ccbfd0d"><img src="http://bit.ly/2ErDhqC" alt="Redis"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><a href="https://redis.io/" title="Redis">Redis</a> 是一個由 <a href="https://github.com/antirez">Salvatore Sanfilippo</a> 開發，以 ANSI C 編寫的開源、In-memory 的 Key-value database, 常被用在需要做快取的地方，以減輕後端伺服器的 loading. </p>
<span id="more"></span>

<h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul>
<li>In-memory data structure store</li>
<li>以 Key-value 形式儲存資料</li>
<li>支援多種資料型態:<ul>
<li>String</li>
<li>Hash</li>
<li>List</li>
<li>Set </li>
<li>Sorted set (有序集合)</li>
</ul>
</li>
<li>Persistence<ul>
<li>可以每隔一段時間，把資料儲存到disk，或者增加每條命令到log檔來持久化(persistence).</li>
</ul>
</li>
<li>支援主從式的非同步複製<ul>
<li>資料可以從主伺服器向任意數量的從伺服器上同步，從伺服器可以是關聯其他從伺服器的主伺服器。</li>
<li>它是 non-blocking 的，在同步資料的同時，master 也可以繼續做其他事。</li>
</ul>
</li>
<li>Transactions<ul>
<li>可以保證一串命令，中間不會被任何操作打斷。</li>
<li>保證一個 client 發起的 Transactions 中的命令可以連續的執行，而中間不會插入其他 client 的命令。</li>
</ul>
</li>
<li>Publish&#x2F;Subscribe</li>
<li>支援 Lua scripting</li>
<li>可以設定 Key expire time.</li>
<li>支援LRU演算法來替換掉舊的key值</li>
<li>Automatic failover<ul>
<li>當 master 發生問題，Sentinel 會自動啟動 failover 程序，其中一個 slave 會提升為 master，其他的 slaves 會重新設定，以使用新的 master.</li>
</ul>
</li>
</ul>
<h2 id="資料型態"><a href="#資料型態" class="headerlink" title="資料型態"></a>資料型態</h2><p>Redis 提供的資料型態有: String, List, Hash, Set and Sorted set, 接下來將分別介紹一下每個型態。</p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li>String 是 Redis 中的基本型態，他是 Binary safe, 也就是說可以包含任何數據，像是 jpg 圖檔。</li>
<li>String 最大的長度限制為 512 MB.</li>
</ul>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul>
<li>Redis 的 List 是簡單的字串列表，依照插入的順序排序，在插入時可以選擇要插入到 head (left) 或 tail (right).</li>
<li>List 最大的長度限制是2<sup>32</sup> - 1 (超過40億個元素).</li>
</ul>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><ul>
<li>Redis 的 Hash 是 String 類型的 field &amp; value 的 mapping, 適合用來儲存 object.</li>
<li>每個 Hash 可以儲存 2<sup>32</sup> - 1 個 field-value pairs. (超過40億)</li>
</ul>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul>
<li>Redis 的 Set 是沒有順序的字串集合。</li>
<li>集合是透過 Hash table 來實現，不論集合中的元素有多少，新增、移除、檢查元素是否存在的時間複雜度都是 O(1).</li>
<li>Redis 的 Set 不允許重複的元素，多次增加同一個元素到集合中，也只會有一個元素存在集合中，所以在加入時不需要特別檢查元素是否存在。</li>
<li>支援很多 Server side 指令，可以在短時間內計算多個集合的交集、並集或差集。</li>
<li>每個集合的元素最大限制是 2<sup>32</sup> - 1.</li>
</ul>
<h3 id="Sorted-set"><a href="#Sorted-set" class="headerlink" title="Sorted set"></a>Sorted set</h3><ul>
<li>Sorted set 和 Set 很像，一樣不允許有重複的元素。</li>
<li>不同的是，Sorted set 中的元素都有一個關聯的 score, 排序是依照 score 高低，雖然元素是唯一的，但分數可以重複。</li>
<li>由於元素是有序的，可以透過分數或者排名(位置) 很快地取得一個範圍內的元素。</li>
</ul>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>作業系統支援 Linux, OSX, OpenBSD, NetBSD, FreeBSD.</p>
<ul>
<li><p><a href="https://redis.io/download">下載</a>, 解壓縮 and compile</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-4.0.7.tar.gz</span><br><span class="line">$ tar zxvf redis-4.0.7.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.7/</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
</li>
<li><p>設定 <code>redis.conf</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># port</span></span><br><span class="line">port &lt;port&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 綁定IP</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 &lt;IP&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定密碼</span></span><br><span class="line">requirepass &lt;<span class="built_in">pwd</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>執行並使用自訂設定檔</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./src/redis-server redis.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="開始使用-Redis"><a href="#開始使用-Redis" class="headerlink" title="開始使用 Redis"></a>開始使用 Redis</h1><h2 id="Connect-to-Redis-server"><a href="#Connect-to-Redis-server" class="headerlink" title="Connect to Redis server"></a>Connect to Redis server</h2><h3 id="Via-Redis-cli"><a href="#Via-Redis-cli" class="headerlink" title="Via Redis-cli"></a>Via Redis-cli</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./src/redis-cli [-h &lt;host&gt;] [-p &lt;port&gt;] [-a &lt;password&gt;]</span><br></pre></td></tr></table></figure>

<h3 id="Via-Node-js"><a href="#Via-Node-js" class="headerlink" title="Via Node.js"></a>Via Node.js</h3><ul>
<li><p>安裝 <a href="http://redis.js.org/" title="REDIS - A NODE.JS REDIS CLIENT">node_redis</a></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用範例</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> opts = &#123;<span class="attr">auth_pass</span>:conf.<span class="property">pwd</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> client = redis.<span class="title function_">createClient</span>(config.<span class="property">port</span>, config.<span class="property">host</span>, opts);</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: &#x27;</span> + err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.<span class="title function_">llen</span>(<span class="string">&#x27;urlQueue&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    client.<span class="title function_">quit</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Via-Python"><a href="#Via-Python" class="headerlink" title="Via Python"></a>Via Python</h3><ul>
<li><p>安裝 <a href="https://github.com/andymccurdy/redis-py" title="redis-py">redis-py</a></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用範例</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = redis.Redis(</span><br><span class="line">    host = settings[<span class="string">&#x27;REDIS_SERVER&#x27;</span>],</span><br><span class="line">    port = settings[<span class="string">&#x27;REDIS_PORT&#x27;</span>],</span><br><span class="line">    password = settings[<span class="string">&#x27;REDIS_PWD&#x27;</span>]</span><br><span class="line">)</span><br><span class="line">item = client.blpop(key, timeout=timeout)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>連線到 Redis server 之後，就可以依照需求來選擇不同的資料型態，並且進行不同的指令操作，由於指令非常多，這裡就不多作介紹，相關的指令文件可以參考:</p>
<ul>
<li>Command line: <a href="https://redis.io/commands">Redis commands</a></li>
<li>Node.js: <a href="http://redis.js.org/" title="REDIS - A NODE.JS REDIS CLIENT">node_redis</a></li>
<li>Python: <a href="https://github.com/andymccurdy/redis-py" title="redis-py">redis-py</a></li>
<li>其他語言可以參考: <a href="https://redis.io/clients">Redis clients</a></li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://redis.io/" title="Redis">Redis</a></li>
<li><a href="https://github.com/andymccurdy/redis-py" title="redis-py">redis-py</a></li>
<li><a href="http://redis.js.org/" title="REDIS - A NODE.JS REDIS CLIENT">node_redis</a></li>
<li><a href="https://www.tutorialspoint.com/redis/index.htm">Redis Tutorial</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/redis-guide/">Redis 3.0 中文版</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[SSL] Nginx + Let&#39;s encrypt SSL 憑證</title>
    <url>/posts/d4a319ec/</url>
    <content><![CDATA[<p><img src="https://media.sustatu.eus/media/argazkiak/doa/kandadoa.png" alt="https"></p>
<p>我們可以透過以下兩個網站申請免費的 SSL 憑證:</p>
<ul>
<li><a href="https://letsencrypt.org/" title="Let′s encrypt">Let′s encrypt</a>: 是一個提供免費 SSL 服務的網站，可以手動申請 SSL 憑證，也可以串接它的 API，讓申請憑證的流程自動化，詳細的內容可以參考<a href="https://letsencrypt.org/">官方網站</a>。</li>
<li><a href="https://www.cloudflare.com/" title="CloudFlare">CloudFlare</a>: 主要提供 CDN 的服務，多了一層的代理，可以保護網站受到攻擊，同時也能提升網站效能，另外 CloudFlare 也有提供免費的 SSL 服務。</li>
</ul>
<span id="more"></span>

<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>在申請 SSL 憑證之前，需要先有自己的 domain，如果是使用 Heroku 的話，他預設有提供免費的 domain: <code>&lt;app_name&gt;.herokuapp.com</code>，如果服務是在其他地方的話，網路上也有很多地方有提供免費申請網域的網站(例如: <a href="https://freenom.com/">freenom</a>、<a href="https://www.noip.com/">No-IP</a>)，或是也可以付費購買自己喜歡的 domain.</p>
<p>不過要注意的是：如果是想要申請 CloudFlare 的 SSL 憑證，domain 不能是以下幾個:</p>
<ul>
<li>example.tumblr.com</li>
<li>example.appspot.com</li>
<li>example.wordpress.com</li>
<li>example.weebly.com</li>
<li>example.herokuapp.com</li>
<li>example.webs.com</li>
<li>example.blogspot.com</li>
<li>example.webs.com</li>
<li>example.ning.com</li>
<li>example.no-ip.com</li>
</ul>
<p>詳細的說明可以參考: <a href="https://support.cloudflare.com/hc/en-us/articles/200167926-What-does-ERROR-Unfortunately-you-can-not-add-that-domain-to-Cloudflare-mean-">What does “ERROR Unfortunately, you can not add that domain to Cloudflare” mean?</a></p>
<p>這裡就預設我們已經有自己的 domain 了，接下來主要記錄如何申請 Let′s encrypt 的 SSL 憑證並搭配 Nginx 做設定。</p>
<p>我們的執行環境是 Ubuntu 16.04，搭配 Nginx 做設定，如果是要搭配 Apache 或是其他 Web server，取得憑證的步驟會不太一樣，可以參考<a href="https://certbot.eff.org/lets-encrypt/ubuntuxenial-other" title="Certbot">官方網站</a>.</p>
<h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><p>首先，需要先安裝 Nginx，可以選擇使用 <code>apt-get</code> 來安裝，或是自行編譯:</p>
<h4 id="使用-apt-get-安裝"><a href="#使用-apt-get-安裝" class="headerlink" title="使用 apt-get 安裝"></a>使用 apt-get 安裝</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nginx</span><br></pre></td></tr></table></figure>

<p>啟動 Nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<h4 id="自行編譯-Nginx"><a href="#自行編譯-Nginx" class="headerlink" title="自行編譯 Nginx"></a>自行編譯 Nginx</h4><p>下載 Nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">tar zxf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure>

<p>安裝 with-http_ssl_module 所需要的 OpenSSL Library:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p>加上 SSL Module:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 進入 NGINX 原始碼目錄</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.18.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定要添加的 module</span></span><br><span class="line">./configure --prefix=/home/&lt;user&gt;/nginx --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始編譯</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>啟動 Nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">home/&lt;user&gt;/nginx/sbin/nginx -c home/&lt;user&gt;/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="安裝-certbot"><a href="#安裝-certbot" class="headerlink" title="安裝 certbot"></a>安裝 certbot</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:certbot/certbot   <span class="comment"># 載入 certbot 的 ppa</span></span><br><span class="line">sudo apt-get update                           <span class="comment"># 更新 apt-get</span></span><br><span class="line">sudo apt-get install -y python-certbot-nginx  <span class="comment"># 安裝 python 的 certbot for nginx</span></span><br></pre></td></tr></table></figure>

<h3 id="設定-Nginx"><a href="#設定-Nginx" class="headerlink" title="設定 Nginx"></a>設定 Nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># file: /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    # ...</span><br><span class="line">    </span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># file: /etc/nginx/sites-available/web-ssl.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name  mydomain.com;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create link to <code>/etc/nginx/sites-available/web-ssl.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled</span><br><span class="line">sudo <span class="built_in">ln</span> -s ../sites-available/web-ssl.conf .</span><br></pre></td></tr></table></figure>

<p>Reload Nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="申請-Let′s-encrypt-SSL-憑證"><a href="#申請-Let′s-encrypt-SSL-憑證" class="headerlink" title="申請 Let′s encrypt SSL 憑證"></a>申請 Let′s encrypt SSL 憑證</h2><p>以上前置作業都完成後，就可以來申請憑證:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo certbot --nginx -d mydomain.com</span><br></pre></td></tr></table></figure>

<p>接著可以選擇要不要自動轉址:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class="line">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class="line">new sites, or if you&#x27;re confident your site works on HTTPS. You can undo this</span><br><span class="line">change by editing your web server&#x27;s configuration.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Select the appropriate number [1-2] then [enter] (press &#x27;c&#x27; to cancel):</span><br></pre></td></tr></table></figure>

<p>如果還沒設定 http 自動轉 https 可以選 2.</p>
<p>最後出現以下訊息就是完成了:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Congratulations! You have successfully enabled https://mydomain.com</span><br><span class="line"></span><br><span class="line">You should test your configuration at:</span><br><span class="line">https://www.ssllabs.com/ssltest/analyze.html?d=mydomain.com</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/mydomain.com/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/mydomain.com/privkey.pem</span><br><span class="line">   Your cert will expire on 2021-06-30. To obtain a new or tweaked</span><br><span class="line">   version of this certificate in the future, simply run certbot again</span><br><span class="line">   with the &quot;certonly&quot; option. To non-interactively renew *all* of</span><br><span class="line">   your certificates, run &quot;certbot renew&quot;</span><br><span class="line"> - If you like Certbot, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let&#x27;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>

<h2 id="檢查-config-是否有被自動添加內容"><a href="#檢查-config-是否有被自動添加內容" class="headerlink" title="檢查 config 是否有被自動添加內容"></a>檢查 config 是否有被自動添加內容</h2><p>檢查 Nginx config 是否有被自動增加 listen 443 及憑證:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 443 ssl; # managed by Certbot</span><br><span class="line">ssl_certificate /etc/letsencrypt/live/mydomain.com/fullchain.pem; # managed by Certbot</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/mydomain.com/privkey.pem; # managed by Certbot</span><br><span class="line">include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br></pre></td></tr></table></figure>

<p>如果申請憑證時有選擇自動轉址，再檢查以下內容是否有被設定:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($host = mydomain.com) &#123;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125; # managed by Certbot</span><br><span class="line">listen       80;</span><br><span class="line">server_name  mydomain.com;</span><br><span class="line">return 404; # managed by Certbot</span><br></pre></td></tr></table></figure>

<p>如果沒有選擇自動轉址，也可以自行設定:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># file: /etc/nginx/site-available/default-http-to-https.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name mydomain.com;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重啟-Nginx"><a href="#重啟-Nginx" class="headerlink" title="重啟 Nginx"></a>重啟 Nginx</h2><p>確認完後，只要再重啟 Nginx, 就可以囉!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nginx -s stop</span><br><span class="line">sudo nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>最後就可以測試看看 <a href="https://mydomain.com/">https://mydomain.com</a> 是否可以使用~</p>
<h2 id="更新憑證"><a href="#更新憑證" class="headerlink" title="更新憑證"></a>更新憑證</h2><p>要注意的是，Let’s encrypt 憑證的有效期限只有 90 天，可以使用以下指令更新憑證:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --dry-run: For testing</span></span><br><span class="line">sudo certbot renew --nginx [--dry-run]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 過期的話, 要使用以下指令來強制更新已過期的憑證</span></span><br><span class="line">sudo certbot --nginx --force-renew</span><br></pre></td></tr></table></figure>

<p>也可以透過排程設定自動更新憑證:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>

<p>加上以下內容即可:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SHELL=/bin/sh</span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line"></span><br><span class="line">@daily /usr/bin/certbot renew --nginx --quiet</span><br></pre></td></tr></table></figure>

<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://letsencrypt.org/" title="Let′s encrypt">Let′s encrypt</a></li>
<li><a href="https://www.cloudflare.com/" title="CloudFlare">CloudFlare</a></li>
<li><a href="https://certbot.eff.org/lets-encrypt/ubuntuxenial-other" title="Certbot">Certbot</a></li>
<li><a href="https://blog.hellojcc.tw/setup-https-with-letsencrypt-on-nginx/">設定 Let’s Encrypt HTTPS nginx certbot SSL 憑證自動更新 教學</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-16-04">How To Secure Nginx with Let’s Encrypt on Ubuntu 16.04</a></li>
</ul>
]]></content>
      <categories>
        <category>SSL</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>SSL</tag>
        <tag>Let&#39;s Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>[VS Code] VS Code Plugins</title>
    <url>/posts/5b00a1ae/</url>
    <content><![CDATA[<p><a href="http://bit.ly/2FcMbaC"><img src="http://bit.ly/2FcMbaC" alt="VS Code"></a></p>
<p>最近從 Sublime 跳槽到 Visual Studio Code(VS Code)，雖然在開啟速度上，會明顯地感覺到比 Sublime 慢，但是 VS Code 有很多的 plugin 可以讓開發效率更好，雖然 Sublime 也有不少 plugin，但是有些很基本的功能還要另外安裝，有點麻煩(例如: SideBarEnhancements，這大概是裝完 Sublime 之後第一個裝的 plugin XD)，再加上常常在儲存檔案時出現提醒視窗也很煩，最後就決定跳槽到 VS Code，在這裡紀錄一下自己在開發時常用的 plugins.</p>
<span id="more"></span>

<h2 id="Themes-amp-Icon"><a href="#Themes-amp-Icon" class="headerlink" title="Themes &amp; Icon"></a>Themes &amp; Icon</h2><h3 id="Flatland-Monokai-Theme"><a href="#Flatland-Monokai-Theme" class="headerlink" title="Flatland Monokai Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=gerane.Theme-FlatlandMonokai">Flatland Monokai Theme</a></h3><p><img src="https://i.imgur.com/r1R0oau.png"></p>
<ul>
<li>更多主題: <a href="http://orta.io/vscode-themes/">Themes</a></li>
</ul>
<h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></h3><h4 id="File-icon"><a href="#File-icon" class="headerlink" title="File icon"></a>File icon</h4><p><img src="https://i.imgur.com/4h2jTzp.png"></p>
<h4 id="Folder-icon"><a href="#Folder-icon" class="headerlink" title="Folder icon"></a>Folder icon</h4><p><img src="https://i.imgur.com/kZW2AAN.png"></p>
<h3 id="Vscode-Terminal-Themes"><a href="#Vscode-Terminal-Themes" class="headerlink" title="Vscode Terminal Themes"></a><a href="https://marketplace.visualstudio.com/items?itemName=ctf0.vscode-terminal-themes">Vscode Terminal Themes</a></h3><p>Terminal Themes for Visual Studio Code.</p>
<ul>
<li>All theme preview: <a href="https://glitchbone.github.io/vscode-base16-term/#/">https://glitchbone.github.io/vscode-base16-term/#/</a></li>
</ul>
<hr>
<h2 id="Linter"><a href="#Linter" class="headerlink" title="Linter"></a>Linter</h2><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></h3><p>Integrates ESLint into VS Code.</p>
<ul>
<li>常見的規則有<a href="https://github.com/airbnb/javascript">Airbnb</a>、<a href="https://github.com/google/eslint-config-google">Google</a></li>
</ul>
<h3 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a><a href="https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint">stylelint</a></h3><p>Linter for CSS, SCSS, Less.</p>
<h3 id="markdownlint"><a href="#markdownlint" class="headerlink" title="markdownlint"></a><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a></h3><p>Linter for Markdown.</p>
<h3 id="cornflakes-linter"><a href="#cornflakes-linter" class="headerlink" title="cornflakes-linter"></a><a href="https://marketplace.visualstudio.com/items?itemName=kevinglasson.cornflakes-linter">cornflakes-linter</a></h3><p>Wrapper for Python flake8 linter and associated plugins.</p>
<hr>
<h2 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h2><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></h3><p>Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.</p>
<ul>
<li>JavaScript, TypeScript, Flow, JSX, JSON</li>
<li>CSS, SCSS, Less</li>
<li>HTML, Vue, Angular HANDLEBARS, Ember, Glimmer</li>
<li>GraphQL, Markdown, YAML</li>
</ul>
<h3 id="Prettier-ESLint"><a href="#Prettier-ESLint" class="headerlink" title="Prettier ESLint"></a><a href="https://marketplace.visualstudio.com/items?itemName=rvest.vs-code-prettier-eslint">Prettier ESLint</a></h3><p>A Visual Studio Extension to format JavaScript and Typescript code using prettier-eslint package.</p>
<hr>
<h2 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h2><h3 id="JavaScript-ES6-code-snippets"><a href="#JavaScript-ES6-code-snippets" class="headerlink" title="JavaScript (ES6) code snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></h3><p>This extension contains code snippets for JavaScript in ES6 syntax for Vs Code editor (supports both JavaScript and TypeScript).</p>
<h3 id="jQuery-Code-Snippets"><a href="#jQuery-Code-Snippets" class="headerlink" title="jQuery Code Snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.jquerysnippets">jQuery Code Snippets</a></h3><p>Over 130 jQuery Code Snippets for JavaScript code.</p>
<p><img src="https://i.imgur.com/O56prvv.png"></p>
<h3 id="Vue-3-Snippets"><a href="#Vue-3-Snippets" class="headerlink" title="Vue 3 Snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue 3 Snippets</a></h3><p>This extension adds Vue 2 Snippets and Vue 3 Snippets into Visual Studio Code.</p>
<h3 id="ES7-React-x2F-Redux-x2F-React-Native-snippets"><a href="#ES7-React-x2F-Redux-x2F-React-Native-snippets" class="headerlink" title="ES7+ React&#x2F;Redux&#x2F;React-Native snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7+ React&#x2F;Redux&#x2F;React-Native snippets</a></h3><p>JavaScript and React&#x2F;Redux snippets in ES7+ with Babel plugin features for VS Code.</p>
<h2 id="Auto-completes"><a href="#Auto-completes" class="headerlink" title="Auto-completes"></a>Auto-completes</h2><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></h3><p>自動 rename 對應的 tag.</p>
<p><img src="https://i.imgur.com/2aryGDX.gif"></p>
<h3 id="npm-Intellisense"><a href="#npm-Intellisense" class="headerlink" title="npm Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></h3><p>Autocompletes npm modules in import statements.</p>
<p><img src="https://i.imgur.com/8Ays7uD.gif"></p>
<h3 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h3><p>Autocompletes file path.</p>
<p><img src="https://i.imgur.com/LWS51GN.gif"></p>
<hr>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><h3 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one">Markdown All in One</a></h3><p>All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more).</p>
<h3 id="Markdown-Preview-Enhanced"><a href="#Markdown-Preview-Enhanced" class="headerlink" title="Markdown Preview Enhanced"></a><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview Enhanced</a></h3><p>Preview markdown file, 且支援許多好用的功能，例如: 插入&#x2F;上傳圖片、將 markdown file 轉為 PDF 等功能。</p>
<p><img src="https://user-images.githubusercontent.com/1908863/28495106-30b3b15e-6f09-11e7-8eb6-ca4ca001ab15.png"></p>
<h3 id="Markdown-PDF"><a href="#Markdown-PDF" class="headerlink" title="Markdown PDF"></a><a href="https://marketplace.visualstudio.com/items?itemName=yzane.markdown-pdf">Markdown PDF</a></h3><p>Convert Markdown to PDF.</p>
<hr>
<h2 id="Frontend"><a href="#Frontend" class="headerlink" title="Frontend"></a>Frontend</h2><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></h3><p>Vue tooling for VS Code, powered by vue-language-server.</p>
<h3 id="Vue-Language-Features-Volar"><a href="#Vue-Language-Features-Volar" class="headerlink" title="Vue Language Features (Volar)"></a><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue Language Features (Volar)</a></h3><p>Language support for Vue 3.</p>
<h3 id="Easy-LESS"><a href="#Easy-LESS" class="headerlink" title="Easy LESS"></a><a href="https://marketplace.visualstudio.com/items?itemName=mrcrowl.easy-less">Easy LESS</a></h3><p>在儲存時，自動將 Less 轉為 css.</p>
<h3 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></h3><p>Launch a development local Server with live reload feature for static &amp; dynamic pages.</p>
<h3 id="Color-Picker"><a href="#Color-Picker" class="headerlink" title="Color Picker"></a><a href="https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color">Color Picker</a></h3><p>調色盤，快速選取顏色:</p>
<ul>
<li>快捷鍵: Ctrl+C P</li>
<li>如果無法顯示調色盤，須修改 VS code config (<code>settings.json</code>):</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;colorHelper.disableGpu&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.imgur.com/99GvHD7.gif"></p>
<hr>
<h2 id="Diagram"><a href="#Diagram" class="headerlink" title="Diagram"></a>Diagram</h2><h3 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a><a href="https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml">PlantUML</a></h3><p>Rich PlantUML support for Visual Studio Code.</p>
<h3 id="Draw-io-Integration"><a href="#Draw-io-Integration" class="headerlink" title="Draw.io Integration"></a><a href="https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio">Draw.io Integration</a></h3><p>在 VS code 中使用 draw.io.</p>
<h3 id="ERD-Editor"><a href="#ERD-Editor" class="headerlink" title="ERD Editor"></a><a href="https://marketplace.visualstudio.com/items?itemName=dineug.vuerd-vscode">ERD Editor</a></h3><p>ERD Editor vscode extension.</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python</a></h3><p>Python 開發必裝套件, features:</p>
<ul>
<li>IntelliSense: Edit your code with auto-completion, code navigation, syntax checking and more</li>
<li>Linting: Get additional code analysis with Pylint, Flake8 and more</li>
<li>Code formatting: Format your code with black, autopep or yapf</li>
<li>Debugging: Debug your Python scripts, web apps, remote or multi-threaded processes</li>
<li>Testing: Run and debug tests through the Test Explorer with unittest or pytest.</li>
<li>Jupyter Notebooks: Create and edit Jupyter Notebooks, add and run code cells, render plots, visualize variables through the variable explorer, visualize dataframes with the data viewer, and more</li>
<li>Environments: Automatically activate and switch between virtualenv, venv, pipenv, conda and pyenv environments</li>
<li>Refactoring: Restructure your Python code with variable extraction and method extraction. Additionally, there is componentized support to enable additional refactoring, such as import sorting, through extensions including isort and Ruff.</li>
</ul>
<h3 id="Pylance"><a href="#Pylance" class="headerlink" title="Pylance"></a><a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance">Pylance</a></h3><p>Python 開發必裝套件，提供許多 Python 相關的實用功能，例如：靜態語法分析，詳細可參考套件頁面。</p>
<h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a><a href="https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter">Jupyter</a></h3><p>Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.</p>
<h3 id="autoDocstring-Python-Docstring-Generator"><a href="#autoDocstring-Python-Docstring-Generator" class="headerlink" title="autoDocstring - Python Docstring Generator"></a><a href="https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring">autoDocstring - Python Docstring Generator</a></h3><p>自動產生 Python docstrings.</p>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Go-1"><a href="#Go-1" class="headerlink" title="Go"></a><a href="https://marketplace.visualstudio.com/items?itemName=golang.Go">Go</a></h3><p>Rich Go language support for Visual Studio Code.</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Extension-Pack-for-Java"><a href="#Extension-Pack-for-Java" class="headerlink" title="Extension Pack for Java"></a><a href="https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack">Extension Pack for Java</a></h3><p>Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven&#x2F;Gradle support, project management and more.</p>
<h2 id="Infra"><a href="#Infra" class="headerlink" title="Infra"></a>Infra</h2><h3 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a><a href="https://marketplace.visualstudio.com/items?itemName=4ops.terraform">Terraform</a></h3><p>Terraform configuration language support (includes Terragrunt).</p>
<h3 id="HashiCorp-Terraform"><a href="#HashiCorp-Terraform" class="headerlink" title="HashiCorp Terraform"></a><a href="https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform">HashiCorp Terraform</a></h3><p>Syntax highlighting and autocompletion for Terraform.</p>
<h3 id="Serverless-IDE"><a href="#Serverless-IDE" class="headerlink" title="Serverless IDE"></a><a href="https://marketplace.visualstudio.com/items?itemName=ThreadHeap.serverless-ide-vscode">Serverless IDE</a></h3><p>Enhanced support for AWS SAM, CloudFormation and Serverless Framework.</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">Docker</a></h3><p>Makes it easy to create, manage, and debug containerized applications.</p>
<h2 id="Other-useful-plugins"><a href="#Other-useful-plugins" class="headerlink" title="Other useful plugins"></a>Other useful plugins</h2><h3 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a><a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager">Project Manager</a></h3><p>Easily switch between projects.</p>
<h3 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></h3><p>Run code snippet or code file for multiple languages: C, C++, Java, JavaScript, PHP, Python, Perl, Perl 6, Ruby, Go, Lua, Groovy, PowerShell, BAT&#x2F;CMD, BASH&#x2F;SH, F# Script, F# (.NET Core), C# Script, C# (.NET Core), VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml Script, R, AppleScript, Elixir, Visual Basic .NET, Clojure, Haxe, Objective-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Free Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, and custom command.</p>
<h3 id="Code-Spell-Checker"><a href="#Code-Spell-Checker" class="headerlink" title="Code Spell Checker"></a><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">Code Spell Checker</a></h3><p>自動檢查拼字是否錯誤。</p>
<h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a><a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash">Dash</a></h3><p>方便快速查找 API 資料。</p>
<h3 id="DotENV"><a href="#DotENV" class="headerlink" title="DotENV"></a><a href="https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv">DotENV</a></h3><p>Support for dotenv file syntax.</p>
<h3 id="Debugger-for-chrome"><a href="#Debugger-for-chrome" class="headerlink" title="Debugger for chrome"></a><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for chrome</a></h3><p>Debug JavaScript code in Chrome browser.</p>
<p><img src="https://i.imgur.com/cK8iE5E.gif"></p>
<h3 id="ejs"><a href="#ejs" class="headerlink" title=".ejs"></a><a href="https://marketplace.visualstudio.com/items?itemName=QassimFarid.ejs-language-support">.ejs</a></h3><p>支援 EJS.</p>
<h3 id="Git-History-git-log"><a href="#Git-History-git-log" class="headerlink" title="Git History(git log)"></a><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">Git History(git log)</a></h3><p>查看 Git history, git log.</p>
<p><img src="https://i.imgur.com/4vpyOZY.gif"></p>
<p><img src="https://i.imgur.com/KUVHydP.png"></p>
<h3 id="GitHub-Copilot"><a href="#GitHub-Copilot" class="headerlink" title="GitHub Copilot"></a><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot">GitHub Copilot</a></h3><p>Your AI pair programmer.</p>
<h3 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a></h3><p>GitLens supercharges Git inside VS Code and unlocks untapped knowledge within each repository. It helps you to visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more.</p>
<h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a><a href="https://marketplace.visualstudio.com/items?itemName=techer.open-in-browser">open in browser</a></h3><p>在 browser 中開啟目前的檔案:</p>
<ul>
<li>Alt+B: Open in default browser</li>
<li>Alt+Shift+B: Open in browser</li>
</ul>
<h3 id="Regex-Previewer"><a href="#Regex-Previewer" class="headerlink" title="Regex Previewer"></a><a href="https://marketplace.visualstudio.com/items?itemName=chrmarti.regex">Regex Previewer</a></h3><p>Preview Regex 比對結果。</p>
<p><img src="https://i.imgur.com/pT6kCAr.gif"></p>
<h3 id="REST-Client"><a href="#REST-Client" class="headerlink" title="REST Client"></a><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">REST Client</a></h3><p>REST Client for Visual Studio Code.</p>
<h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a><a href="https://marketplace.visualstudio.com/items?itemName=liximomo.sftp">SFTP</a></h3><p>SFTP&#x2F;FTP 同步。</p>
<h3 id="Swagger-Viewer"><a href="#Swagger-Viewer" class="headerlink" title="Swagger Viewer"></a><a href="https://marketplace.visualstudio.com/items?itemName=Arjun.swagger-viewer">Swagger Viewer</a></h3><p>方便直接瀏覽 Swagger API 文件。</p>
<h3 id="vscode-hexo"><a href="#vscode-hexo" class="headerlink" title="vscode-hexo"></a><a href="https://marketplace.visualstudio.com/items?itemName=codeyu.vscode-hexo">vscode-hexo</a></h3><p>若有使用 Hexo 這個 blog framework, 推薦安裝此套件，讓 VSCode 支援 hexo 相關指令(init, new, generate, server, deploy, publish, clean commands).</p>
<h3 id="VSCode-Reveal"><a href="#VSCode-Reveal" class="headerlink" title="VSCode Reveal"></a><a href="https://marketplace.visualstudio.com/items?itemName=evilz.vscode-reveal">VSCode Reveal</a></h3><p>使用 VS Code 做 slides.</p>
<h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a><a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml">YAML</a></h3><p>YAML Language Support by Red Hat, with built-in Kubernetes syntax support.</p>
<hr>
<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>除了上面的 plugins 之外，在這裡順便紀錄一下自己常用的 config:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// settings.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;material-icon-theme&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.defaultLanguage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Monokai&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;strings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;other&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DavidAnson.vscode-markdownlint&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;markdown.preview.lineHeight&quot;</span><span class="punctuation">:</span> <span class="number">1.8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;**.m4a&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**.mp3&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**.mp4&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**.wav&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/__pycache__&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.DS_Store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.hg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.pytest_cache&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.svn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/build&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/CVS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/env&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.eol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Source Code Pro&#x27;, Consolas, &#x27;微軟正黑體&#x27;, &#x27;Courier New&#x27;, monospace, &#x27;SauceCodePro Nerd Font&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;emmet.includeLanguages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//&quot;editor.formatOnSave&quot;: true,</span></span><br><span class="line">    <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[html]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;projectManager.git.baseFolders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/Users/user/Documents/workspace&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;projectManager.any.baseFolders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/Users/user/Documents/workspace&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;projectManager.any.ignoredFolders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;output&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;typings&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;__pycache__&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;.pytest_cache&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;.vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;.idea&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;projectManager.any.maxDepthRecursion&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;**/__pycache__&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.pytest_cache&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.editorAssociations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.ipynb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jupyter-notebook&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint.rules.customizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.jsxSingleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier.printWidth&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.envFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/config/.env&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pylintEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.defaultInterpreterPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/opt/homebrew/opt/python@3.10/bin/python3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;notebook.cellToolbarLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jupyter-notebook&quot;</span><span class="punctuation">:</span> <span class="string">&quot;left&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[json]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;.env.prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dotenv&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.blackArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--skip-string-normalization&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--line-length=100&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;git.confirmSync&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pycodestyleEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pydocstyleEnabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.formatting.autopep8Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--max-line-length=100&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.flake8Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--max-line-length=100&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.linting.pycodestyleArgs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--max-line-length=100&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.colorCustomizations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;terminal.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#0903008f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A5A2A2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminalCursor.background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A5A2A2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminalCursor.foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A5A2A2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#090300&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#01a0e4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#5C5855&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#01A0E4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B5E4F4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#01A252&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A16A94&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DB2D20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F7F7F7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiBrightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FDED02&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#B5E4F4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#01A252&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiMagenta&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A16A94&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#DB2D20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A5A2A2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;terminal.ansiYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FDED02&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;yaml.customTags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;!And&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!And sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!If&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!If sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Not&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Not sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Equals&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Equals sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Or&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Or sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!FindInMap&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!FindInMap sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Base64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Join&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Join sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Cidr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Ref&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Sub&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Sub sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!GetAtt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!GetAZs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!ImportValue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!ImportValue sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Select&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Select sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Split&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;!Split sequence&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;go.buildTags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testtools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;go.testTags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testtools&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;go.testEnvVars&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;GOOS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html.autoClosingTags&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.lineNumbers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aws.profile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;profile:n1-int&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.inlineSuggest.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[python]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;github.copilot.advanced&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;github.copilot.enable&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yaml&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;plaintext&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;markdown&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scminput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[yaml]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// &quot;go.gopath&quot;: &quot;/Users/user/go&quot;,</span></span><br><span class="line">    <span class="comment">// &quot;prettier.configPath&quot;: &quot;/Users/user/workspace/.vscode/.prettierrc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>[Webpack] Webpack 設定及使用</title>
    <url>/posts/f0b15985/</url>
    <content><![CDATA[<p><a href="https://medium.codylamson.com/minimum-viable-webpack-babel-react-setup-without-create-react-app-47959f43fbac"><img src="https://cdn-images-1.medium.com/max/1600/1*9IXiJMp60QAt3MP0R8qX_A.png" alt="Webpack"></a></p>
<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p><a href="https://webpack.js.org/" title="Webpack">Webpack</a> 是一個 module bundler，把許多不同類型的模組 build 成靜態資源。</p>
<p>主要功能：</p>
<ul>
<li>將 CSS、圖片與其他資源打包</li>
<li>Pre-processing Less、CoffeeScript、JSX、ES6 等檔案</li>
<li>可依 entry 文件不同，把 .js 打包成多個 .js 檔案</li>
<li>可以搭配許多 Loaders</li>
</ul>
<p>這一篇文章主要是紀錄 Webpack 搭配 Express、Hot module replacement 、 Babel 和許多常用的 Lodaers 的設定及使用方式.</p>
<span id="more"></span>

<h1 id="Loaders-介紹"><a href="#Loaders-介紹" class="headerlink" title="Loaders 介紹"></a>Loaders 介紹</h1><p>在使用 Webpack 時，常常會搭配各種 loaders 來做靜態資源的打包，接下來我們先介紹一下常用到的 lodaers:</p>
<h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p><a href="https://babeljs.io/" title="Babel">Babel</a> 是一個JavaScript compiler，可以將新的 JS 語法轉譯為瀏覽器支援的 ES5，因為 JavaScript 幾乎是每年會提出一個新的規格草案，但是瀏覽器沒辦法很快就能夠支援新的 JS，所以我們需要先轉譯成瀏覽器支援的 ES5。</p>
<p>設定方式:</p>
<p><code>.babelrc</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;es2017&quot;</span>, <span class="string">&quot;react&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>webpack.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,</span><br><span class="line">            <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css-loader-and-style-loader"><a href="#css-loader-and-style-loader" class="headerlink" title="css-loader and style-loader"></a>css-loader and style-loader</h2><p><strong>css-loader</strong>: 載入 CSS file.<br><strong>style-loader</strong>: Add CSS to the DOM by injecting a <code>&lt;style&gt;</code> tag. 通常搭配css-loader一起使用。</p>
<p><code>webpack.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/style.css&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h2><p>將 Less 轉為 CSS.</p>
<p><code>webpack.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./css/style.less&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><p>載入檔案，回傳 public URL.</p>
<p><code>webpack.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|JPE?G|png|PNG|gif|GIF|svg|SVG|woff|woff2|eot|ttf)(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;[hash].[ext]&#x27;</span>,    <span class="comment">//[hash].[ext] or [name].[ext]</span></span><br><span class="line">                    <span class="attr">publicPath</span>: <span class="string">&quot;/src/&quot;</span>,</span><br><span class="line">                    <span class="attr">outputPath</span>: <span class="string">&quot;img/&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式:</p>
<ul>
<li><p>If <code>options.name == &quot;[name].[ext]&quot;</code>:</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./img/user-icon.png&#x27;</span>;</span><br></pre></td></tr></table></figure>

  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- main.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;userIcon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/src/img/user-icon.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>else:</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> user_icon <span class="keyword">from</span> <span class="string">&#x27;./img/user-icon.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">src</span> = user_icon;</span><br><span class="line">$(<span class="string">&quot;#userIcon&quot;</span>).<span class="title function_">append</span>(img);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>和 <code>file-loader</code> 類似, 但在檔案大小小於 limit 時, 會回傳一個 base64 url.</p>
<p><code>webpack.config.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|JPE?G|png|PNG|gif|GIF|svg|SVG|woff|woff2|eot|ttf)(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">8192</span>     <span class="comment">// 當圖片大小小於 8k 時使用 base64 URL, 其餘使用直接連接到圖片的 URL</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> user_icon <span class="keyword">from</span> <span class="string">&#x27;./img/user-icon.png&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">src</span> = user_icon;</span><br><span class="line">$(<span class="string">&quot;#userIcon&quot;</span>).<span class="title function_">append</span>(img);</span><br></pre></td></tr></table></figure>

<h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><p>Webpack 也提供了許多方便的 plugins, 這裡介紹一下常用的 plugins:</p>
<h2 id="uglifyjs-webpack-plugin"><a href="#uglifyjs-webpack-plugin" class="headerlink" title="uglifyjs-webpack-plugin"></a>uglifyjs-webpack-plugin</h2><p><a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin">uglifyjs-webpack-plugin</a> 主要功能是 minify JavaScript, 減少 js file size.  </p>
<h2 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h2><p>webpack-dev-middleware 可以讓 webpack 被 Express app 或是其他可使用 middleware 的框架所使用。</p>
<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>webpack-dev-server 本身就是小型的 Express server，整合了 Express 和 webpack-dev-middleware。<br>雖然方便架設，但彈性較少，無法跟現有的 Express app 結合。</p>
<h2 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h2><p>Hot Module Replacement (簡稱 HMR)，主要功能是在修改任意檔案並儲存後，會自動編譯打包 (等同於 <code>webpack --watch</code> 的功能)，接著更新瀏覽器畫面，只會 reload 更新的部分，而不會全部 reload。</p>
<p>HMR 有兩種套件:</p>
<ul>
<li>react-hot-loader: webpack-dev-server 的衍生套件。</li>
<li>webpack-hot-middleware: webpack-dev-middleware 的衍生套件。</li>
</ul>
<p>請依照選擇的環境安裝。</p>
<p>這裡我們選擇的環境是 <strong>webpack-dev-middleware + Express + webpack-hot-middleware</strong>, Dashboard 則是使用<a href="https://github.com/FormidableLabs/webpack-dashboard" title="webpack-dashboard">webpack-dashboard</a>.</p>
<h1 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h1><p>安裝 Webpack and Loaders</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># webpack</span></span><br><span class="line">$ npm install --save-dev webpack webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># webpack loaders</span></span><br><span class="line">$ npm install --save-dev css-loader style-loader url-loader file-loader less less-loader</span><br><span class="line"></span><br><span class="line"><span class="comment"># babel</span></span><br><span class="line">npm install --save-dev babel-core babel-loader babel-preset-es2017</span><br></pre></td></tr></table></figure>

<p>安裝 webpack-dev-middleware、webpack-hot-middleware</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># webpack-dev-middleware and HMR</span></span><br><span class="line">$ npm install --save-dev webpack-dev-middleware webpack-hot-middleware</span><br><span class="line"></span><br><span class="line"><span class="comment"># uglifyjs-webpack-plugin</span></span><br><span class="line">$ npm install --save-dev uglifyjs-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>安裝 <a href="https://github.com/FormidableLabs/webpack-dashboard" title="webpack-dashboard">webpack-dashboard</a>: A friendly UI for webpack.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev webpack-dashboard</span><br></pre></td></tr></table></figure>

<h1 id="Webpack-相關指令"><a href="#Webpack-相關指令" class="headerlink" title="Webpack 相關指令"></a>Webpack 相關指令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack                       <span class="comment"># 會在開發模式下開始一次性的建置</span></span><br><span class="line">webpack -p                    <span class="comment"># 會建置production的程式碼</span></span><br><span class="line">webpack --watch               <span class="comment"># 會監聽程式碼的修改，當儲存時有修改時會更新檔案</span></span><br><span class="line">webpack -d                    <span class="comment"># 加入source maps檔案</span></span><br><span class="line">webpack --progress --color    <span class="comment"># 加上處理進度和顏色</span></span><br></pre></td></tr></table></figure>

<h1 id="設定-Webpack"><a href="#設定-Webpack" class="headerlink" title="設定 Webpack"></a>設定 Webpack</h1><p>這裡的設定範例是依照我們所選擇的環境: webpack-dev-middleware + Express + webpack-hot-middleware, 並使用以下 loaders:</p>
<ul>
<li>babel-loaders</li>
<li>css-loader</li>
<li>style-loader</li>
<li>less-loader</li>
<li>url-loader</li>
</ul>
<p><code>webpack.config.js</code> 設定範例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DashboardPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dashboard/plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> env = process.<span class="property">env</span>.<span class="property">NODE_ENV</span>;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: env || <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: [</span><br><span class="line">        <span class="string">&#x27;webpack-hot-middleware/client?reload=true&#x27;</span>,    <span class="comment">// HMR</span></span><br><span class="line">        <span class="string">&#x27;./public/js/index.js&#x27;</span>                          <span class="comment">// 進入點</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/dist/&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">publicPath</span>: <span class="string">&#x27;/src/&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,</span><br><span class="line">            <span class="attr">use</span>: &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>  <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>    <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>   <span class="comment">// compiles Less to CSS</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|JPE?G|png|PNG|gif|GIF|svg|SVG|woff|woff2|eot|ttf)(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [&#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">limit</span>: <span class="number">8192</span>         <span class="comment">// 當圖片大小小於 8k 時使用 base64 URL, 其餘使用直接連接到圖片的 URL</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line"></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>,    <span class="comment">// 設置 eval 或 SourceMap 屬性，debug 用</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>(),</span><br><span class="line">        <span class="comment">// new DashboardPlugin()                //如果沒有使用express, 將plugin加到webpack.config.js</span></span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>搭配 Babel, 需安裝 <code>babel-loader</code> 並另外再設定 <code>.babelrc</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;es2017&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在 <code>package.json</code> 加上以下 script, 方便之後執行:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;NODE_ENV=development webpack-dashboard -p 2458 -- node app.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;deploy&quot;</span>: <span class="string">&quot;NODE_ENV=production webpack -p --config webpack.config.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<code>dev</code>指令中的<code>-p</code>可換為指定的port.</p>
<h2 id="撰寫-app-js"><a href="#撰寫-app-js" class="headerlink" title="撰寫 app.js"></a>撰寫 app.js</h2><p>再來，我們先撰寫一個簡單的 <code>app.js</code>, 並在裡面加上 Webpack、webpack-dev-middleware、HMR 和 webpack-dashboard 的相關設定:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&#x27;helmet&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDev = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackHot = <span class="built_in">require</span>(<span class="string">&#x27;webpack-hot-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DashboardPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dashboard/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./routes&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== 基本設定 ======</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;port&#x27;</span>, process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;httpsport&#x27;</span>, process.<span class="property">env</span>.<span class="property">HTTPSPORT</span> || <span class="number">3001</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">helmet</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">logger</span>(<span class="string">&#x27;dev&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, routes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== Session ======</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;trust proxy&#x27;</span>, <span class="number">1</span>) <span class="comment">// trust first proxy</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: config.<span class="property">server</span>.<span class="property">secret</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">86400</span> * <span class="number">1000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">login</span> = req.<span class="property">session</span>.<span class="property">login</span>;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">account</span> = req.<span class="property">session</span>.<span class="property">account</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== Webpack (增加此段code) ======</span></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(webpackConfig);</span><br><span class="line">compiler.<span class="title function_">apply</span>(<span class="keyword">new</span> <span class="title class_">DashboardPlugin</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 webpack 傳入 webpack-dev-middleware 並套用至 app，同時傳入屬性，webpack 就可以被加載進來</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">webpackDev</span>(compiler, &#123;</span><br><span class="line">    <span class="attr">noInfo</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: webpackConfig.<span class="property">output</span>.<span class="property">publicPath</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 webpack 傳入 webpack-hot-middleware 並套用至 app，就可達到 HMR 的效果</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">webpackHot</span>(compiler));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== Error handler ======</span></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> err = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not Found&#x27;</span>);</span><br><span class="line">    err.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="title function_">next</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">message</span> = err.<span class="property">message</span>;</span><br><span class="line">    res.<span class="property">locals</span>.<span class="property">error</span> = req.<span class="property">app</span>.<span class="title function_">get</span>(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render the error page</span></span><br><span class="line">    res.<span class="title function_">status</span>(err.<span class="property">status</span> || <span class="number">500</span>);</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== Server ======</span></span><br><span class="line"><span class="comment">// HTTP</span></span><br><span class="line"><span class="keyword">let</span> httpServer = app.<span class="title function_">listen</span>(app.<span class="title function_">get</span>(<span class="string">&#x27;port&#x27;</span>), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Listening at port <span class="subst">$&#123;httpServer.address().port&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS</span></span><br><span class="line"><span class="comment">/*let options = &#123;</span></span><br><span class="line"><span class="comment">    key: fs.readFileSync(config.serverKey),</span></span><br><span class="line"><span class="comment">    cert: fs.readFileSync(config.serverCrt)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">https.createServer(options, app).listen(app.get(&#x27;httpsport&#x27;), (err) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    if (err) &#123;</span></span><br><span class="line"><span class="comment">        console.error(err);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    console.log(`Listening at port $&#123;app.get(&#x27;httpsport&#x27;)&#125;.`);</span></span><br><span class="line"><span class="comment">&#125;);*/</span></span><br></pre></td></tr></table></figure>

<h2 id="啟動-Server"><a href="#啟動-Server" class="headerlink" title="啟動 Server"></a>啟動 Server</h2><p>依照上述步驟設定好 Webpack，並撰寫好 <code>app.js</code> 後，要記得在 HTML 中加入打包好的 JS:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/src/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最後就可以啟動 Server:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># develop</span></span><br><span class="line">$ npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># deploy</span></span><br><span class="line">$ npm run deploy</span><br></pre></td></tr></table></figure>

<p>這樣就完成了使用 Webpack 來打包我們的網站囉~</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://webpack.js.org/" title="Webpack">Webpack</a></li>
<li><a href="https://doc.webpack-china.org/loaders/">Loaders</a></li>
<li><a href="https://doc.webpack-china.org/concepts/">Webpack官方中文文件</a></li>
<li><a href="https://github.com/AriaFallah/WebpackTutorial/tree/master/zh-TW/part1">Webpack Tutorial</a></li>
<li><a href="https://medium.com/html-test/%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89%E5%BB%BA%E7%AB%8B-webpack-%E8%A8%AD%E5%AE%9A%E6%AA%94-%E4%B8%80-42fbc76a2d37">從無到有建立 webpack 設定檔（一）</a></li>
<li><a href="https://medium.com/html-test/webpack-%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B-585f2bc952b9">【webpack】的基本工作流程</a></li>
<li><a href="https://j6qup3.github.io/2016/08/15/%E7%8C%B4%E5%AD%90%E4%B9%9F%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84-React-%E6%95%99%E5%AD%B8-3/">猴子也能看懂的 React 教學 - 3 - Webpack 建置指南</a></li>
<li><a href="http://blog.techbridge.cc/2016/07/30/react-dev-enviroment-webpack-browserify/">一看就懂的 React 開發環境建置與 Webpack 入門教學</a></li>
<li><a href="http://zhaoda.net/webpack-handbook/index.html">Webpack中文指南</a></li>
<li><a href="https://fakefish.github.io/react-webpack-cookbook/Introduction-to-Webpack.html">Webpack 教學2</a></li>
</ul>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>Webpack</tag>
        <tag>Express</tag>
        <tag>Babel</tag>
        <tag>HMR</tag>
      </tags>
  </entry>
  <entry>
    <title>[word2vec] Word2vec 實作</title>
    <url>/posts/b9b8571c/</url>
    <content><![CDATA[<p><a href="https://medium.com/pyladies-taiwan/%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80%E8%99%95%E7%90%86%E5%85%A5%E9%96%80-word2vec%E5%B0%8F%E5%AF%A6%E4%BD%9C-f8832d9677c8"><img src="http://bit.ly/2DxGHGS" alt="word2vec"></a></p>
<h1 id="Word2vec"><a href="#Word2vec" class="headerlink" title="Word2vec"></a>Word2vec</h1><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><ul>
<li>依照輸入的<strong>詞的集合</strong>計算出詞與詞之間的距離</li>
<li>將<strong>詞</strong>轉為<strong>向量</strong>，把對文章內容的處理簡化為向量空間中的向量運算，計算出向量空間上的相似度</li>
<li>計算的是 cosine 值(餘弦值)，cosine 值越大，代表兩個詞關聯度越高</li>
<li>CBOW vs. Skip-gram 算法<ul>
<li>CBOW(Continues Bag of Words): 給定上下文，預測 input word</li>
<li>Skip-gram: 給定 input word，預測上下文</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><p>在這次的實作中，我們使用的 Python 版本是 3.5.2，另外也會需要以下幾個 package:</p>
<ul>
<li>gensim</li>
<li>jieba</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create virtual environment</span></span><br><span class="line">$ virtualenv ./env</span><br><span class="line"></span><br><span class="line"><span class="comment"># change to virtual environment</span></span><br><span class="line">$ <span class="built_in">source</span> ./env/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># install required packages</span></span><br><span class="line">$ pip3 install gensim jieba</span><br></pre></td></tr></table></figure>

<h3 id="資料前處理"><a href="#資料前處理" class="headerlink" title="資料前處理"></a>資料前處理</h3><p>首先，我們需要先將資料進行前處理，在這次的實作中，我們是以 Dcard 的資料來訓練 word2vec model.<br>資料已經先處理為每行都是一篇文章的內容，將每篇文章進行斷詞，並過濾 stopwords，最後將斷詞後的結果存為檔案以便後續訓練 word2vec model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># preprocessing.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Preprocessing</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># logging config</span></span><br><span class="line">        logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s : %(levelname)s : %(message)s&#x27;</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 載入自定義詞典</span></span><br><span class="line">        jieba.set_dictionary(<span class="string">&#x27;./dict/dict.txt.big&#x27;</span>)</span><br><span class="line">        jieba.load_userdict(<span class="string">&#x27;./dict/user_dict.dict&#x27;</span>)</span><br><span class="line">        self.stoplist = self.load_dict(<span class="string">&#x27;./dict/stoplist.dict&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_dict</span>(<span class="params">self, fileName</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 讀取stoplist &quot;&quot;&quot;</span></span><br><span class="line">        dicts = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">                line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> line:</span><br><span class="line">                    dicts.append(line)</span><br><span class="line">        <span class="keyword">return</span> dicts</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">self, content</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 使用 jieba 斷詞, 並過濾 stopwords &quot;&quot;&quot;</span></span><br><span class="line">        word_list = jieba.cut(content, cut_all=<span class="literal">False</span>, HMM=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 過濾stopwords</span></span><br><span class="line">        terms = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> word_list:</span><br><span class="line">            word = word.strip()</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">and</span> word.isalnum() <span class="keyword">and</span> word <span class="keyword">not</span> <span class="keyword">in</span> self.stoplist:</span><br><span class="line">                terms.append(word)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(terms)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">self, input_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            1. 讀取檔案內容，每行已處理為每篇文章的內容</span></span><br><span class="line"><span class="string">            2. 將每篇文章內容進行斷詞後輸出為 &#123;file&#125;.out, 每行為該文章的詞的集合</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        output = <span class="built_in">open</span>(input_file + <span class="string">&#x27;.out&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">                line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                terms = self.cut(line)</span><br><span class="line">                output.write(terms + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (cnt % <span class="number">1000</span>) == <span class="number">0</span>:</span><br><span class="line">                    logging.info(<span class="string">&#x27;cnt: %d&#x27;</span> % cnt)</span><br><span class="line"></span><br><span class="line">        output.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Option parser</span></span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, dest=<span class="string">&quot;input_file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Input file.&quot;</span>)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> options.file:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        parser.error(<span class="string">&quot;Must have -f option.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    preprocessing = Preprocessing()</span><br><span class="line">    preprocessing.execute(options.input_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 preprocessing.py -f <span class="string">&#x27;./data/data.rec&#x27;</span></span><br></pre></td></tr></table></figure>

<p>資料處理完之後，會輸出至<code>data/data.rec.out</code>，檔案內容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">發問 淘寶 新手 付款 集運 疑問 聽 玩 模型 前輩 ...</span><br><span class="line">退款 下訂 私下 轉錢 麻煩 淘寶 退款 付款 帳戶 百度 查 物流 帳號 ...</span><br></pre></td></tr></table></figure>

<p>每篇文章都被轉換為多個詞的集合，接著我們就可以用這些處理過的資料來訓練 word2vec model.</p>
<h3 id="訓練-word2vec-model"><a href="#訓練-word2vec-model" class="headerlink" title="訓練 word2vec model"></a>訓練 word2vec model</h3><p>處理完資料之後，利用 <code>gensim</code> 的 <code>word2vec</code> 來訓練 word2vec model:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">options</span>):</span><br><span class="line"></span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s : %(levelname)s : %(message)s&#x27;</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">    sentences = word2vec.LineSentence(options.input_file)</span><br><span class="line">    model = word2vec.Word2Vec(sentences, size=<span class="number">300</span>, min_count=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 儲存model</span></span><br><span class="line">    model.save(options.output_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Option parser</span></span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, dest=<span class="string">&quot;input_file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Input file for training wrod2vec model.&quot;</span>, metavar=<span class="string">&quot;FILE&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output&quot;</span>, dest=<span class="string">&quot;output_file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Output word2vec model. (Default=\&quot;data/word2vec.mdl\&quot;)&quot;</span>, metavar=<span class="string">&quot;FILE&quot;</span>, default=<span class="string">&quot;./data/word2vec.mdl&quot;</span>)</span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> options.input_file:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        parser.error(<span class="string">&quot;Must have -f option.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    train(options)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 train.py -f <span class="string">&#x27;./data/data.rec.out&#x27;</span> -o <span class="string">&#x27;./data/word2vec.mdl&#x27;</span></span><br></pre></td></tr></table></figure>

<p>這裡的程式碼最主要其實只有三行 (分別是第11、12和15行)，就能夠訓練出 word2vec model 並將 model 儲存。最重要的是第12行: <code>model = word2vec.Word2Vec(sentences, size=300, min_count=15)</code>，我們先看一下<code>word2vec.Word2Vec()</code>的原型:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">gensim</span>.models.word2vec.Word2Vec(sentences=<span class="literal">None</span>, size=<span class="number">100</span>, alpha=<span class="number">0.025</span>, window=<span class="number">5</span>, \</span><br><span class="line">    min_count=<span class="number">5</span>, max_vocab_size=<span class="literal">None</span>, sample=<span class="number">0.001</span>, seed=<span class="number">1</span>, workers=<span class="number">3</span>, min_alpha=<span class="number">0.0001</span>, \</span><br><span class="line">    sg=<span class="number">0</span>, hs=<span class="number">0</span>, negative=<span class="number">5</span>, cbow_mean=<span class="number">1</span>, hashfxn=&lt;built-<span class="keyword">in</span> function <span class="built_in">hash</span>&gt;, <span class="built_in">iter</span>=<span class="number">5</span>, \</span><br><span class="line">    null_word=<span class="number">0</span>, trim_rule=<span class="literal">None</span>, sorted_vocab=<span class="number">1</span>, batch_words=<span class="number">10000</span>)</span><br></pre></td></tr></table></figure>

<p>參數說明:</p>
<ul>
<li>sentences: 要訓練的句子，可以是 list，對於較大量的訓練資料，建議使用 BrownCorpus, Text8Corpus 或 LineSentence.</li>
<li>size: 詞向量的維度，預設是 100，較大的 size 會需要更多的訓練資料，也會需要更多的記憶體空間，但是效果會比較好。</li>
<li>alpha: 機器學習中的學習率，會逐漸收斂到 min_alpha.</li>
<li>window: 往左右各看幾個字，預設是 5.</li>
<li>min_count: 忽略出現的次數小於 min_count 的詞</li>
<li>max_vocab_size: 設定詞向量構建期間的RAM限制，如果詞的總數超過 <code>max_vocab_size</code> 的值，則會去除出現頻率最低的。設為 <code>None</code> 表示沒有限制。</li>
<li>workers: 執行緒數目</li>
<li>sg: sg&#x3D;1 表示採用 skip-gram, sg&#x3D;0 表示採用 CBOW, 預設是 0.</li>
<li>hs: hs&#x3D;1 表示採用 hierarchical softmax, hs&#x3D;0 表示使用 negative sampling, 預設是 0.</li>
<li>negative: 如果 &gt; 0, 則會採用 negative sampling. 此值表示 <code>noise words</code> 的數量。</li>
<li>cbow_mean: cbow_mean&#x3D;0 採用上下文詞向量的總和， cbow_mean&#x3D;1 採用均值，預設是 1。這個值只有在使用 CBOW 時才有作用。</li>
<li>hashfxn: hash function 來初始化權重，預設使用 Python 的 hash function.</li>
<li>iter: 迭代次數，預設是 5.</li>
<li>trim_rule: 用來設定詞的整理規則，指定哪些詞要被刪除、哪些要保留，預設是 word count &lt; <code>min_count</code> 的詞會被刪除。</li>
<li>sorted_vocab: 預設是 1, 在分配 word index 時會依照詞頻做降序排序。</li>
<li>batch_words: 每次處理的詞的數量。</li>
</ul>
<p>其中 <code>sentences</code> 是一定要有的參數，其他的可以依照需求再做調整~</p>
<p>如果訓練完 word2vec model 後，在載入 model 或是查詢時出現 <code>MemoryError</code> 的問題，可以試著增加 <code>min_count</code>，忽略出現次數過少的詞，以減少訓練的詞量，降低記憶體需求。</p>
<h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>訓練完之後，來測試一下效果如何:</p>
<ul>
<li><p>載入模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"></span><br><span class="line">model = word2vec.Word2Vec.load(<span class="string">&#x27;./data/word2vec.mdl&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>取得前20個相關詞及其機率:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">similar = model.most_similar(positive=query, topn=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>執行結果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query: 蔡英文</span><br><span class="line"></span><br><span class="line">馬英九  0.7758316397666931</span><br><span class="line">小英    0.7685800194740295</span><br><span class="line">馬總統  0.741024911403656</span><br><span class="line">蔡英文總統      0.7397772073745728</span><br><span class="line">洪秀柱  0.7373905777931213</span><br><span class="line">朱立倫  0.7315630912780762</span><br><span class="line">民進黨政府      0.7311826944351196</span><br><span class="line">民進黨  0.7303115725517273</span><br><span class="line">林全    0.7250531315803528</span><br><span class="line">馬英九總統      0.7208837270736694</span><br><span class="line">總統    0.7105945348739624</span><br><span class="line">宋楚瑜  0.7093351483345032</span><br><span class="line">選前    0.7067139148712158</span><br><span class="line">吳敦義  0.7047908902168274</span><br><span class="line">新政府  0.7000598311424255</span><br><span class="line">賴清德  0.6969730854034424</span><br><span class="line">李登輝  0.6749316453933716</span><br><span class="line">選後    0.6709515452384949</span><br><span class="line">國民黨  0.6695643067359924</span><br><span class="line">綠營    0.668891191482544</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query: 珍珠奶茶</span><br><span class="line"></span><br><span class="line">珍奶    0.8230817317962646</span><br><span class="line">波霸奶茶        0.7711058855056763</span><br><span class="line">木瓜牛奶        0.7707912921905518</span><br><span class="line">奶綠    0.7704713344573975</span><br><span class="line">芒果冰沙        0.7543411254882812</span><br><span class="line">鮮奶茶  0.7471712231636047</span><br><span class="line">西瓜汁  0.7412415146827698</span><br><span class="line">芋頭牛奶        0.7387706637382507</span><br><span class="line">手搖飲料        0.7384251356124878</span><br><span class="line">水果茶  0.7374613881111145</span><br><span class="line">四季春  0.736596941947937</span><br><span class="line">抹茶拿鐵        0.7361791133880615</span><br><span class="line">綠豆沙  0.7361130714416504</span><br><span class="line">檸檬紅茶        0.7228580713272095</span><br><span class="line">五十嵐  0.7211850881576538</span><br><span class="line">凍檸茶  0.7128199934959412</span><br><span class="line">迷克夏  0.708733320236206</span><br><span class="line">手搖    0.7055209875106812</span><br><span class="line">酪梨牛奶        0.7013069987297058</span><br><span class="line">冬瓜茶  0.7011166214942932</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">query: 阿里山</span><br><span class="line"></span><br><span class="line">合歡山  0.8092970848083496</span><br><span class="line">日月潭  0.804085373878479</span><br><span class="line">清境    0.7589331865310669</span><br><span class="line">北海岸  0.7464619278907776</span><br><span class="line">武嶺    0.7462913990020752</span><br><span class="line">擎天崗  0.7406344413757324</span><br><span class="line">清境農場        0.7399024367332458</span><br><span class="line">太平山  0.7287646532058716</span><br><span class="line">忘憂森林        0.7182701826095581</span><br><span class="line">高美    0.7161029577255249</span><br><span class="line">三仙台  0.7141523957252502</span><br><span class="line">奮起湖  0.7141432762145996</span><br><span class="line">七星潭  0.710894763469696</span><br><span class="line">高美濕地        0.7108360528945923</span><br><span class="line">平溪    0.710108757019043</span><br><span class="line">南投    0.7075525522232056</span><br><span class="line">拉拉山  0.7046494483947754</span><br><span class="line">鵝鑾鼻  0.7046091556549072</span><br><span class="line">六十石山        0.7044894099235535</span><br><span class="line">蘇澳    0.6968797445297241</span><br></pre></td></tr></table></figure>
</li>
<li><p>取得兩個詞之間的相關度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = model.similarity(word1, word2)</span><br></pre></td></tr></table></figure>

<p>執行結果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">珍珠奶茶, 奶茶</span><br><span class="line">0.698616829611946</span><br><span class="line"></span><br><span class="line">蔡英文, 賴清德</span><br><span class="line">0.6969730854034424</span><br><span class="line"></span><br><span class="line">電腦, 程式</span><br><span class="line">0.5202557530895322</span><br></pre></td></tr></table></figure></li>
</ul>
<p>從以上幾個例子來看，效果還算OK。  </p>
<p>當然，我們還可以再想辦法優化模型訓練的效果：<br>在訓練的過程中，很重要的一部份是斷詞，透過斷詞來決定哪些詞出現在一起的，所以斷詞的效果好，整體訓練結果才會更好。<code>jieba</code>斷詞其實還有不足的地方，所以也可以試著選擇其他斷詞器，或者是調整辭典中的詞的權重、增加自定義辭典來改善斷詞效果。<br>另外一部份就是在訓練時的參數調整，如果對於 word2vec 已經很熟悉，也可以試著調整 word2vec model 的參數，讓訓練的效果可以更好~</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="https://medium.com/pyladies-taiwan/%E8%87%AA%E7%84%B6%E8%AA%9E%E8%A8%80%E8%99%95%E7%90%86%E5%85%A5%E9%96%80-word2vec%E5%B0%8F%E5%AF%A6%E4%BD%9C-f8832d9677c8">自然語言處理入門- Word2vec小實作</a></li>
<li><a href="http://zake7749.github.io/2016/08/28/word2vec-with-gensim/">以 gensim 訓練中文詞向量</a></li>
<li><a href="https://rare-technologies.com/word2vec-tutorial/">Word2vec Tutorial</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>word2vec</tag>
      </tags>
  </entry>
</search>
